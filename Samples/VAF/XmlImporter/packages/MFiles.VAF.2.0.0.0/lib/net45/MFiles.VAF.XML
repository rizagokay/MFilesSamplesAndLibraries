<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MFiles.VAF</name>
    </assembly>
    <members>
        <member name="T:MFiles.VAF.AdminConfigurations.IUsesAdminConfigurations">
            <summary>
            Inherit to create configuration editable in M-Files Admin.
            </summary>
        </member>
        <member name="T:MFiles.VAF.IUsesVaultExtensionMethods">
            <summary>
            Inherit to allow adding Vault Extension Methods dynamically.
            </summary>
        </member>
        <member name="M:MFiles.VAF.AdminConfigurations.IUsesAdminConfigurations.InitializeAdminConfigurations(MFiles.VAF.AdminConfigurations.IAdminConfigurations)">
            <summary>
            A method to allow Vault Application to place Admin Configuration Nodes to M-Files Admin.
            </summary>
            <param name="adminConfigurations">Allows adding Admin Configurations. Can be saved for later usage.</param>
        </member>
        <member name="T:MFiles.VAF.AdminConfigurations.IAdminConfigurations">
            <summary>
            Allows registering dashboard nodes and configuration nodes to admin.
            </summary>
        </member>
        <member name="M:MFiles.VAF.AdminConfigurations.IAdminConfigurations.AddSimpleConfigurationNode``1(System.String,System.Func{System.String})">
            <summary>
            Adds a simple configuration node to M-Files Admin.
            </summary>
            <typeparam name="T">The type of the configuration class. Must have an zero parameter constructor.</typeparam>
            <param name="nodeName">Name of the node.</param>
            <param name="dashboardGenerator">Function to generate content for the dashboard.</param>
            <returns>The added configuration node.</returns>
        </member>
        <member name="M:MFiles.VAF.AdminConfigurations.IAdminConfigurations.AddSimpleDashboardNode(System.String,System.Func{System.String})">
            <summary>
            Adds a simple dashboard node to M-Files Admin.
            </summary>
            <param name="nodeName">Name of the node.</param>
            <param name="dashboardGenerator">Function to generate content for the dashboard.</param>
            <returns>The added dashboard node</returns>
        </member>
        <member name="M:MFiles.VAF.AdminConfigurations.IAdminConfigurations.AddRootNode(MFiles.VAF.AdminConfigurations.DashboardNode)">
            <summary>
            Adds the root node and all of its subnodes to M-Files Admin.
            </summary>
            <param name="node">The root node to add.</param>
        </member>
        <member name="T:MFiles.VAF.AdminConfigurations.AdminConfigurationManager">
            <summary>
            Manages the setting up the communication between M-Files Admin and the Dashboard Nodes.
            </summary>
        </member>
        <member name="M:MFiles.VAF.AdminConfigurations.AdminConfigurationManager.#ctor(MFiles.VAF.VaultApplicationBase)">
            <summary>
            Creates a new admin configuration manager for the vault application.
            </summary>
            <param name="vaultApplication">Reference to the vault application.</param>
        </member>
        <member name="M:MFiles.VAF.AdminConfigurations.AdminConfigurationManager.AddSimpleConfigurationNode``1(System.String,System.Func{System.String})">
            <summary>
            Adds a simple configuration node to M-Files Admin.
            </summary>
            <typeparam name="T">The type of the configuration class. Must have an zero parameter constructor.</typeparam>
            <param name="nodeName">Name of the node.</param>
            <param name="dashboardGenerator">Function to generate content for the dashboard.</param>
            <returns>The added configuration node.</returns>
        </member>
        <member name="M:MFiles.VAF.AdminConfigurations.AdminConfigurationManager.AddSimpleDashboardNode(System.String,System.Func{System.String})">
            <summary>
            Adds a simple dashboard node to M-Files Admin.
            </summary>
            <param name="nodeName">Name of the node.</param>
            <param name="dashboardGenerator">Function to generate content for the dashboard.</param>
            <returns>The added dashboard node</returns>
        </member>
        <member name="M:MFiles.VAF.AdminConfigurations.AdminConfigurationManager.GetDefaultNamedValueSource(System.String)">
            <summary>
            Returns the default named value source for the given node name. 
            Default named value source should only be used at the root level to avoid name collision.
            </summary>
            <param name="nodeName">The name for the node.</param>
            <returns>The default named value source for the given node name.</returns>
        </member>
        <member name="M:MFiles.VAF.AdminConfigurations.AdminConfigurationManager.AddRootNode(MFiles.VAF.AdminConfigurations.DashboardNode)">
            <summary>
            Registers the root node and all of its subnodes to M-Files Admin.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:MFiles.VAF.AdminConfigurations.AdminConfigurationManager.UnRegisterRootNode(System.String)">
            <summary>
            Removes the registration of the given dn
            </summary>
            <param name="nodeName"></param>
        </member>
        <member name="M:MFiles.VAF.AdminConfigurations.AdminConfigurationManager.Dispose">
            <summary>
            Disposes of the manager and unregistered all domains that has been registered by it.
            </summary>
        </member>
        <member name="M:MFiles.VAF.AdminConfigurations.AdminConfigurationManager.CreateConfigurationDomainAndRegisterVaultExtensionMethods(MFiles.VAF.AdminConfigurations.DashboardNode,System.String)">
            <summary>
            Creates configuration domain for the given node including its subnodes.
            </summary>
            <param name="node">The dashboard node or configuration node.</param>
            <param name="parentNodeUniqueIdentifier">The unique identifier of the immediate parent node.</param>
            <returns>A configuration domain for the given node and its subnodes.</returns>
        </member>
        <member name="M:MFiles.VAF.AdminConfigurations.AdminConfigurationManager.TryPrepareSimpleReadSourceDefinition(System.String,System.String,System.Reflection.MethodInfo[],System.Object)">
            <summary>
            Prepares simple read source definition, if the method with the given name is found in the method infos.
            </summary>
            <param name="uniqueIdentifier">Unique identifier for this instance.</param>
            <param name="methodName">The name of the method.</param>
            <param name="methodInfos">The methods to search.</param>
            <param name="instance">The instance with the methods.</param>
            <returns>The source definition with the extension method for reading data.</returns>
        </member>
        <member name="M:MFiles.VAF.AdminConfigurations.AdminConfigurationManager.PrepareSimpleReadSourceDefinition(System.String,System.Reflection.MethodInfo,System.Object)">
            <summary>
            Prepares a read source definition.
            </summary>
            <param name="uniqueIdentifier">Unique identifier for this instance.</param>
            <param name="methodInfo">The method to register as vault extension method.</param>
            <param name="instance">The instance with the method.</param>
            <returns>The source definition with the extension method for reading data.</returns>
        </member>
        <member name="M:MFiles.VAF.AdminConfigurations.AdminConfigurationManager.CreateReadSourceDefinition(System.String)">
            <summary>
            Creates a source definition that defines the given extension method as a read source.
            </summary>
            <param name="extensionMethodName">The name of the extension method.</param>
            <returns>The source definition with the extension method for reading data.</returns>
        </member>
        <member name="M:MFiles.VAF.AdminConfigurations.AdminConfigurationManager.TryPrepareSimpleReadWriteSourceDefinition(System.String,System.String,System.String,System.Reflection.MethodInfo[],System.Object)">
            <summary>
            Prepares simple read and write source definition, if the both methods with the given names are found in the method infos.
            </summary>
            <param name="uniqueIdentifier">Unique identifier for this instance.</param>
            <param name="readMethodName">The name of the read method.</param>
            <param name="writeMethodName">The name of the write method.</param>
            <param name="methodInfos">The methods to search.</param>
            <param name="instance">The instance with the methods.</param>
            <returns>The source definition with the extension methods for reading and writing data.</returns>
        </member>
        <member name="M:MFiles.VAF.AdminConfigurations.AdminConfigurationManager.PrepareSimpleReadWriteSourceDefinition(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Object)">
            <summary>
            Prepares a read and write source definition.
            </summary>
            <param name="uniqueIdentifier">Unique identifier for this instance.</param>
            <param name="readMethodInfo">The method to register as vault extension method for reading.</param>
            <param name="writeMethodInfo">The method to register as vault extension method for writing.</param>
            <param name="instance">The instance with the methods.</param>
            <returns>The source definition with the extension methods for reading and writing data.</returns>
        </member>
        <member name="M:MFiles.VAF.AdminConfigurations.AdminConfigurationManager.CreateSimpleReadWriteSourceDefinition(System.String,System.String)">
            <summary>
            Creates a source definition that defines the given extension methods as the read and write sources.
            </summary>
            <param name="readExtensionMethodName">The name of the extension method for reading.</param>
            <param name="writeExtensionMethodName">The name of the extension method for writing.</param>
            <returns>The source definition with the extension methods for reading and writing data.</returns>
        </member>
        <member name="M:MFiles.VAF.AdminConfigurations.AdminConfigurationManager.RegisterHiddenVaultExtensionMethod(System.String,System.Reflection.MethodInfo,System.Object)">
            <summary>
            Registers a new hidden vault extension method to the vault application.
            </summary>
            <param name="extensionMethodName">The name for the method.</param>
            <param name="methodInfo">The method that will be called, when the Vault Extension Method is executed.</param>
            <param name="instance">The instance with the method.</param>
        </member>
        <member name="T:MFiles.VAF.AdminConfigurations.ConfigurationNode`1">
            <summary>
            A configuration node with actual configuration values.
            </summary>
            <typeparam name="T">The configuration type.</typeparam>
        </member>
        <member name="T:MFiles.VAF.AdminConfigurations.DashboardNode">
            <summary>
            A configuration node without configuration. Can be used as top node for multiple subnodes or just to show dashboard content in M-Files Admin.
            </summary>
        </member>
        <member name="F:MFiles.VAF.AdminConfigurations.DashboardNode.Name">
            <summary>
            Name of the node. Must be unique for root level nodes.
            </summary>
        </member>
        <member name="F:MFiles.VAF.AdminConfigurations.DashboardNode.SubNodes">
            <summary>
            Subnodes of this node. Visible in the tree view in M-Files Admin.
            </summary>
        </member>
        <member name="M:MFiles.VAF.AdminConfigurations.DashboardNode.#ctor(System.String,System.Collections.Generic.IReadOnlyList{MFiles.VAF.AdminConfigurations.DashboardNode},System.Func{System.String})">
            <summary>
            Creates new dashboard node.
            </summary>
            <param name="name">Name visible in M-Files Admin. Must be unique for root level nodes.</param>
            <param name="subNodes">Subnodes for this node. Visible in the tree view in M-Files Admin.</param>
            <param name="dashboardGenerator">Function to generate content for the dashboard.</param>
        </member>
        <member name="M:MFiles.VAF.AdminConfigurations.DashboardNode.ShowDashboard(MFiles.VAF.Common.EventHandlerEnvironment)">
            <summary>
            Internal wire-up method for getting the dashboard content to M-Files Admin. 
            AdminConfigurationManager handles registering the Vault Extension Methods to M-Files Admin. Changing the method name will break the wire-up.
            </summary>
            <param name="env">Event handler environment.</param>
            <returns>Returns the dashboard content in html.</returns>
        </member>
        <member name="M:MFiles.VAF.AdminConfigurations.DashboardNode.GetDashboardContent">
            <summary>
            Returns the dashboard content in html.
            </summary>
            <returns>Returns the dashboard content in html.</returns>
        </member>
        <member name="P:MFiles.VAF.AdminConfigurations.DashboardNode.DashboardGenerator">
            <summary>
            Function to generate html content for the dashboard in M-Files Admin.
            </summary>
        </member>
        <member name="F:MFiles.VAF.AdminConfigurations.ConfigurationNode`1.MetadataStructureValidator">
            <summary>
            Metadata structure validator to validate the structure after changes and resolve ids.
            </summary>
        </member>
        <member name="F:MFiles.VAF.AdminConfigurations.ConfigurationNode`1.ConfigurationStorage">
            <summary>
            Configuration storage to store configuration data.
            </summary>
        </member>
        <member name="F:MFiles.VAF.AdminConfigurations.ConfigurationNode`1.storedConfigurationJson">
            <summary>
            Cached configuration to avoid unnecessary reads to vault.
            </summary>
        </member>
        <member name="M:MFiles.VAF.AdminConfigurations.ConfigurationNode`1.#ctor(MFiles.VAF.VaultApplicationBase,System.String,MFiles.VAF.Configuration.Domain.NamedValueKeySource,System.Collections.Generic.IReadOnlyList{MFiles.VAF.AdminConfigurations.DashboardNode},System.Func{System.String},`0)">
            <summary>
            Creates a new configuration node.
            </summary>
            <param name="vaultApplication">The application base context.</param>
            <param name="name">Name of the configuration node.</param>
            <param name="configSource">The named value storage key to store configuration values.</param>
            <param name="subNodes">Subnodes for this node. Visible in the tree view in M-Files Admin.</param>
            <param name="dashboardGenerator">Function to generate content for the dashboard.</param>
            <param name="defaultConfig">Optional. Initial values for the the configuration.</param>
        </member>
        <member name="M:MFiles.VAF.AdminConfigurations.ConfigurationNode`1.#ctor(System.String,MFiles.VAF.Configuration.Domain.NamedValueKeySource,MFilesAPI.Vault,MFiles.VAF.Configuration.IMetadataStructureValidator,MFiles.VAF.Configuration.IConfigurationStorage,System.Collections.Generic.IReadOnlyList{MFiles.VAF.AdminConfigurations.DashboardNode},System.Func{System.String},`0)">
            <summary>
            Creates a new configuration node.
            </summary>
            <param name="name">>Name of the configuration node.</param>
            <param name="configSource">The named value storage key to store configuration values.</param>
            <param name="vault">Vault to access configurations.</param>
            <param name="metadataStructureValidator">Metadata structure validator to validate the structure after changes.</param>
            <param name="configurationStorage">Configuration storage.</param>
            <param name="subNodes">Subnodes for this node. Visible in the tree view in M-Files Admin.</param>
            <param name="dashboardGenerator">Function to generate content for the dashboard.</param>
            <param name="defaultConfig">Optional. Initial values for the the configuration.</param>
        </member>
        <member name="M:MFiles.VAF.AdminConfigurations.ConfigurationNode`1.ValidateAndUpdateConfiguration(MFilesAPI.Vault,`0)">
            <summary>
            Validates the configuration and makes it available through the public methods.
            </summary>
            <param name="vault">M-Files vault.</param>
            <param name="configuration">The configuration object.</param>
        </member>
        <member name="M:MFiles.VAF.AdminConfigurations.ConfigurationNode`1.ReadConfigurationSchema(MFiles.VAF.Common.EventHandlerEnvironment)">
            <summary>
            Internal wire-up method to return the configuration schema to M-Files Admin.
            </summary>
            <param name="env">Event handler environment.</param>
            <returns>The configuration schema in json.</returns>
        </member>
        <member name="M:MFiles.VAF.AdminConfigurations.ConfigurationNode`1.ReadConfiguration(MFiles.VAF.Common.EventHandlerEnvironment)">
            <summary>
            Internal wire-up method to return the current configuration to M-Files Admin.
            </summary>
            <param name="env">Event handler environment.</param>
            <returns>The current configuration in json.</returns>
        </member>
        <member name="M:MFiles.VAF.AdminConfigurations.ConfigurationNode`1.WriteConfiguration(MFiles.VAF.Common.EventHandlerEnvironment)">
            <summary>
            Internal wire-up method to get the changed configuration from M-Files Admin.
            </summary>
            <param name="env">Event handler environment.</param>
            <returns>Returned value does not affect anything in M-Files Admin.</returns>
        </member>
        <member name="M:MFiles.VAF.AdminConfigurations.ConfigurationNode`1.ValidateConfiguration(MFiles.VAF.Common.EventHandlerEnvironment)">
            <summary>
            Internal wire-up method to return validation findings to M-Files Admin.
            </summary>
            <param name="env">Event handler environment.</param>
            <returns>The validation findings for current configuration.</returns>
        </member>
        <member name="M:MFiles.VAF.AdminConfigurations.ConfigurationNode`1.GetErrorsAsValidationFindings(MFiles.VAF.Configuration.ValidationResultForValidation)">
            <summary>
            Helper to convert metadata structure validation result to validation findings.
            </summary>
            <param name="validationResults">Metadata structure validation result.</param>
            <returns>Validation findings.</returns>
        </member>
        <member name="P:MFiles.VAF.AdminConfigurations.ConfigurationNode`1.CurrentConfigurationAndValidation">
            <summary>
            Current configuration and the related validation results.
            </summary>
        </member>
        <member name="P:MFiles.VAF.AdminConfigurations.ConfigurationNode`1.CurrentConfiguration">
            <summary>
            The current configuration.
            </summary>
        </member>
        <member name="P:MFiles.VAF.AdminConfigurations.ConfigurationNode`1.ConfigSource">
            <summary>
            The named value source used as the save location for the configuration.
            </summary>
        </member>
        <member name="P:MFiles.VAF.AdminConfigurations.ConfigurationNode`1.Validator">
            <summary>
            The validator function to perform custom server side validation to the configured values.
            </summary>
        </member>
        <member name="E:MFiles.VAF.AdminConfigurations.ConfigurationNode`1.Changed">
            <summary>
            Triggered when the configuration changes.
            </summary>
        </member>
        <member name="T:MFiles.VAF.AdminConfigurations.ConfigurationNode`1.ChangedEventHandler">
            <summary>
            Handler to react to changes in the configuration
            </summary>
            <param name="oldConfig">The configuration before changes.</param>
            <param name="newConfig">The configuration after changes.</param>
        </member>
        <member name="T:MFiles.VAF.AssemblyVersionCompatibilityResolver">
            <summary>
            A static class with pre-defined name that contains the assembly version compatibility checking method.
            </summary>
        </member>
        <member name="M:MFiles.VAF.AssemblyVersionCompatibilityResolver.IsAssemblyVersionCompatible(System.Reflection.AssemblyName)">
            <summary>
            Checks whether the given assebly version is compatible with the current version.
            </summary>
            <param name="other">The other assembly's assembly name.</param>
            <returns>True if the assemblies are compatible.</returns>
        </member>
        <member name="T:MFiles.VAF.Common.IAccessCache">
            <summary>
            Accessor Interface.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.IAccessCache.GetObjVerExPermissions(MFilesAPI.Vault,MFiles.VAF.Common.ObjVerEx,System.Int32,System.Boolean)">
            <summary>
            Gets the <see cref="T:MFiles.VAF.Common.ObjVerExPermissions"/> for the passed <see cref="T:MFiles.VAF.Common.ObjVerEx"/> / User or Group ID from the access cache.
            </summary>
            <param name="vault">The vault object. Reserved for future implementation to rebuild the cache if found not up-to-date.</param>
            <param name="objVerEx"><see cref="T:MFiles.VAF.Common.ObjVerEx"/> to resolve <see cref="T:MFiles.VAF.Common.Accessibility"/> rights against.</param>
            <param name="userOrGroupID"><see cref="T:MFilesAPI.UserAccount"/> or <see cref="T:MFilesAPI.UserGroup"/> ID to resolve <see cref="T:MFiles.VAF.Common.Accessibility"/> rights against.</param>
            <param name="isGroup">True when the passed userOrGroupID is for a <see cref="T:MFilesAPI.UserGroup"/></param>
            <returns><see cref="T:MFiles.VAF.Common.ObjVerExPermissions"/></returns>
        </member>
        <member name="M:MFiles.VAF.Common.IAccessCache.GetObjectAccess(MFilesAPI.Vault,System.Int32)">
            <summary>
            Gets the <see cref="T:MFiles.VAF.Common.ObjectAccess"/> for the passed object id from the access cache.
            </summary>
            <param name="vault">The vault object. Reserved for future implementation to rebuild the cache if found not up-to-date.</param>
            <param name="objTypeId">The object type id.</param>
            <returns><see cref="T:MFiles.VAF.Common.ObjectAccess"/></returns>
        </member>
        <member name="M:MFiles.VAF.Common.IAccessCache.GetClassAccess(MFilesAPI.Vault,System.Int32)">
            <summary>
            Gets the <see cref="T:MFiles.VAF.Common.ClassAccess"/> for the passed object class id from the access cache.
            </summary>
            <param name="vault">The vault object. Reserved for future implementation to rebuild the cache if found not up-to-date.</param>
            <param name="classId">The object class id.</param>
            <returns><see cref="T:MFiles.VAF.Common.ClassAccess"/></returns>
        </member>
        <member name="M:MFiles.VAF.Common.IAccessCache.GetPropertyAccess(MFilesAPI.Vault,System.Int32)">
            <summary>
            Gets the <see cref="T:MFiles.VAF.Common.PropertyAccess"/> for the passed property def id from the access cache.
            </summary>
            <param name="vault">The vault object. Reserved for future implementation to rebuild the cache if found not up-to-date.</param>
            <param name="propId">The property def id.</param>
            <returns><see cref="T:MFiles.VAF.Common.PropertyAccess"/></returns>
        </member>
        <member name="M:MFiles.VAF.Common.IAccessCache.GetNamedACLAccess(MFilesAPI.Vault,System.Int32)">
            <summary>
            Gets the <see cref="T:MFiles.VAF.Common.NamedACLAccess"/> for the passed property def id from the access cache.
            </summary>
            <param name="vault">The vault object. Reserved for future implementation to rebuild the cache if found not up-to-date.</param>
            <param name="naclId">The nacl id.</param>
            <returns><see cref="T:MFiles.VAF.Common.NamedACLAccess"/></returns>
        </member>
        <member name="M:MFiles.VAF.Common.IAccessCache.GetCache(MFilesAPI.Vault)">
            <summary>
            Gets the <see cref="T:MFiles.VAF.Common.AccessCache"/>.
            </summary>
            <param name="vault">The vault object. Reserved for future implementation to rebuild the cache if found not up-to-date.</param>
            <returns><see cref="T:MFiles.VAF.Common.AccessCache"/></returns>
        </member>
        <member name="T:MFiles.VAF.Common.Accessibility">
            <summary>
            The Accessibility Class provides a wrapper around the <see cref="T:MFilesAPI.AccessControlEntry"/> class.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.Accessibility.#ctor(System.Int32,MFilesAPI.AccessControlList,MFilesAPI.UserOrUserGroupID)">
            <summary>
            Default Constructor.
            </summary>
            <param name="structureID">Structure Element ID</param>
            <param name="acl"><see cref="T:MFilesAPI.AccessControlList"/> dictating permissions</param>
            <param name="userOrGroup"><see cref="T:MFilesAPI.UserOrUserGroupID"/> to check the permissions against</param>
        </member>
        <member name="P:MFiles.VAF.Common.Accessibility.StructureID">
            <summary>
            Vault structural element ID.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.Accessibility.UserOrUserGroup">
            <summary>
            <see cref="T:MFilesAPI.UserOrUserGroupID"/> for which this object provides access information.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.Accessibility.UserOrGroupID">
            <summary>
            The ID of the User Account or User Group.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.Accessibility.CanRead">
            <summary>
            Read Access Flag.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.Accessibility.CanEdit">
            <summary>
            Edit Access Flag.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.Accessibility.CanChangePermissions">
            <summary>
            Change Permissions Access Flag.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.StructureAccess">
            <summary>
            Base Class : Structure Access : Inherited from by all classes in the Structure Access Family used
            by the <see cref="T:MFiles.VAF.Common.AccessCache"/>.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.StructureAccess.SetGroupFlag(MFilesAPI.UserOrUserGroupID)">
            <summary>
            Sets the IsGroup values based on the <see cref="T:MFilesAPI.UserOrUserGroupID"/>.
            </summary>
            <param name="id">Source <see cref="T:MFilesAPI.UserOrUserGroupID"/></param>
        </member>
        <member name="M:MFiles.VAF.Common.StructureAccess.#ctor(MFilesAPI.UserOrUserGroupID)">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.StructureAccess.AddEntry(MFilesAPI.UserOrUserGroupID)">
            <summary>
            Add User or Group ID method.
            </summary>
            <param name="userOrUserGroup"><see cref="T:MFilesAPI.UserOrUserGroupID"/> to Add</param>
        </member>
        <member name="M:MFiles.VAF.Common.StructureAccess.CanRead(MFilesAPI.UserOrUserGroupID)">
            <summary>
            Checks the read access for the passed user or group against this value structure element.
            </summary>
            <param name="permissionContext">User or Group Permissions Context</param>
            <returns>Has Access => True | False</returns>
        </member>
        <member name="M:MFiles.VAF.Common.StructureAccess.CanEdit(MFilesAPI.UserOrUserGroupID)">
            <summary>
            Checks the edit access for the passed user or group against this value structure element.
            </summary>
            <param name="permissionContext">User or Group Permissions Context</param>
            <returns>Has Access => True | False</returns>
        </member>
        <member name="M:MFiles.VAF.Common.StructureAccess.CanChangePermissions(MFilesAPI.UserOrUserGroupID)">
            <summary>
            Checks the change permissions access for the passed user or group against this value structure element.
            </summary>
            <param name="permissionContext">User or Group Permissions Context</param>
            <returns>Has Access => True | False</returns>
        </member>
        <member name="P:MFiles.VAF.Common.StructureAccess.IsGroup">
            <summary>
            User or Group Flag.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.StructureAccess.ACL">
            <summary>
            <see cref="T:MFilesAPI.AccessControlList"/> dictating access to this structure element.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.StructureAccess.StructureID">
            <summary>
            Structure element ID.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.StructureAccess.Users">
            <summary>
            Dictionary of ( UserID, Accessibility ).
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.StructureAccess.Groups">
            <summary>
            Dictionary of ( GroupID, Accessibility ).
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.ObjectAccess">
            <summary>
            <see cref="T:MFilesAPI.ObjType"/> implementation of the <see cref="T:MFiles.VAF.Common.StructureAccess"/> base.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.ObjectAccess.#ctor(MFilesAPI.ObjType,MFilesAPI.UserOrUserGroupID)">
            <summary>
            <see cref="T:MFiles.VAF.Common.StructureAccess"/> Object Implementation.
            </summary>
            <param name="ot"><see cref="T:MFilesAPI.ObjType"/> to cache.</param>
            <param name="userOrUserGroup"><see cref="T:MFilesAPI.UserOrUserGroupID"/> to validate against.</param>
        </member>
        <member name="T:MFiles.VAF.Common.ClassAccess">
            <summary>
            <see cref="T:MFilesAPI.ObjectClass"/> implementation of the <see cref="T:MFiles.VAF.Common.StructureAccess"/> base.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.ClassAccess.#ctor(MFilesAPI.ObjectClass,MFilesAPI.UserOrUserGroupID)">
            <summary>
            <see cref="T:MFiles.VAF.Common.StructureAccess"/> Class Implementation.
            </summary>
            <param name="oc"><see cref="T:MFilesAPI.ObjectClass"/> to cache.</param>
            <param name="userOrUserGroup"><see cref="T:MFilesAPI.UserOrUserGroupID"/> to validate against.</param>
        </member>
        <member name="T:MFiles.VAF.Common.PropertyAccess">
            <summary>
            <see cref="P:MFiles.VAF.Common.PropertyAccess.PropertyDef"/> implementation of the <see cref="T:MFiles.VAF.Common.StructureAccess"/> base.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.PropertyAccess.#ctor(MFilesAPI.PropertyDef,MFilesAPI.UserOrUserGroupID)">
            <summary>
            <see cref="T:MFiles.VAF.Common.StructureAccess"/> Property Implementation.
            </summary>
            <param name="pd"><see cref="P:MFiles.VAF.Common.PropertyAccess.PropertyDef"/> to cache.</param>
            <param name="userOrUserGroup"><see cref="T:MFilesAPI.UserOrUserGroupID"/> to validate against.</param>
        </member>
        <member name="M:MFiles.VAF.Common.PropertyAccess.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="P:MFiles.VAF.Common.PropertyAccess.PropertyDef">
            <summary>
            Cached <see cref="P:MFiles.VAF.Common.PropertyAccess.PropertyDef"/>.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.NamedACLAccess">
            <summary>
            <see cref="P:MFiles.VAF.Common.NamedACLAccess.NamedACL"/> implementation of the <see cref="T:MFiles.VAF.Common.StructureAccess"/> base.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.NamedACLAccess.#ctor(MFilesAPI.NamedACL,MFilesAPI.UserOrUserGroupID)">
            <summary>
            <see cref="T:MFiles.VAF.Common.StructureAccess"/> Property Implementation.
            </summary>
            <param name="nacl"><see cref="T:MFilesAPI.PropertyDef"/> to cache.</param>
            <param name="userOrUserGroup"><see cref="T:MFilesAPI.UserOrUserGroupID"/> to validate against.</param>
        </member>
        <member name="M:MFiles.VAF.Common.NamedACLAccess.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="P:MFiles.VAF.Common.NamedACLAccess.NamedACL">
            <summary>
            Cached <see cref="P:MFiles.VAF.Common.NamedACLAccess.NamedACL"/>.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.ObjVerExPermissions">
            <summary>
            Permissions <see cref="T:MFiles.VAF.Common.Accessibility"/> wrapper for an <see cref="T:MFiles.VAF.Common.ObjVerEx"/>.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerExPermissions.#ctor(MFiles.VAF.Common.ObjVerEx,MFilesAPI.UserOrUserGroupID)">
            <summary>
            Constructor Overload accepting a <see cref="T:MFilesAPI.UserOrUserGroupID"/>.
            </summary>
            <param name="objVerEx"><see cref="T:MFiles.VAF.Common.ObjVerEx"/> to resolve <see cref="T:MFiles.VAF.Common.Accessibility"/> rights against.</param>
            <param name="userOrGroupID"><see cref="T:MFilesAPI.UserAccount"/> or <see cref="T:MFilesAPI.UserGroup"/> to resolve <see cref="T:MFiles.VAF.Common.Accessibility"/> rights against.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerExPermissions.#ctor(MFiles.VAF.Common.ObjVerEx,System.Int32,System.Boolean)">
            <summary>
            Default ObjVerEx Permissions Constructor.
            </summary>
            <param name="objVerEx"><see cref="T:MFiles.VAF.Common.ObjVerEx"/> to resolve <see cref="T:MFiles.VAF.Common.Accessibility"/> rights against.</param>
            <param name="userOrGroupID"><see cref="T:MFilesAPI.UserAccount"/> or <see cref="T:MFilesAPI.UserGroup"/> ID to resolve <see cref="T:MFiles.VAF.Common.Accessibility"/> rights against.</param>
            <param name="isGroup">True when the passed userOrGroupID is for a <see cref="T:MFilesAPI.UserGroup"/></param>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerExPermissions.ProcessObjectVersionPermissions(MFilesAPI.ObjectVersionPermissions)">
            <summary>
            Processes the <see cref="T:MFilesAPI.ObjectVersionPermissions"/> of an <see cref="T:MFilesAPI.ObjVer"/>.
            </summary>
            <param name="ovPermissions"><see cref="T:MFilesAPI.ObjectVersionPermissions"/> to process.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerExPermissions.ProcessNACL(MFilesAPI.NamedACL)">
            <summary>
            Processes a <see cref="T:MFilesAPI.NamedACL"/>.
            </summary>
            <param name="nacl"><see cref="T:MFilesAPI.NamedACL"/> to Process.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerExPermissions.ProcessACL(MFilesAPI.AccessControlList)">
            <summary>
            Processes a <see cref="T:MFilesAPI.AccessControlList"/>.
            </summary>
            <param name="acl"><see cref="T:MFilesAPI.AccessControlList"/> to process.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerExPermissions.ProcessComponents(MFilesAPI.AccessControlListComponentContainer)">
            <summary>
            Processes all components found within a <see cref="T:MFilesAPI.AccessControlListComponentContainer"/>.
            </summary>
            <param name="componentContainer"><see cref="T:MFilesAPI.AccessControlListComponentContainer"/> to process.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerExPermissions.FilterUser(MFiles.VAF.Common.AccessCache)">
            <summary>
            Filters the <see cref="T:MFiles.VAF.Common.AccessCache"/> to only the elements found on the passed <see cref="T:MFiles.VAF.Common.ObjVerEx"/>.
            </summary>
            <param name="cache"><see cref="T:MFiles.VAF.Common.AccessCache"/> used in resolution.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerExPermissions.FilterGroup(MFiles.VAF.Common.AccessCache)">
            <summary>
            Filters the <see cref="T:MFiles.VAF.Common.AccessCache"/> to only the elements found on the passed <see cref="T:MFiles.VAF.Common.ObjVerEx"/>.
            </summary>
            <param name="cache"><see cref="T:MFiles.VAF.Common.AccessCache"/> used in resolution.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerExPermissions.ToString(System.Boolean)">
            <summary>
            Returns a object access report as a string.
            </summary>
            <param name="excludeHeader">Excludes the Key Header when true.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerExPermissions.ToString">
            <summary>
            Returns a object access report as a string.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerExPermissions.CanAttachObject">
            <summary>
            Checks the attach object access for the passed user or group against this object version.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerExPermissions.CanRead">
            <summary>
            Checks the read access for the passed user or group against this object version.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerExPermissions.CanEdit">
            <summary>
            Checks the edit access for the passed user or group against this object version.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerExPermissions.CanChangePermissions">
            <summary>
            Checks the change permissions access for the passed user or group against this object version.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerExPermissions.CanDelete">
            <summary>
            Checks the delete access for the passed user or group against this object version.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerExPermissions.ObjVerEx">
            <summary>
            Source <see cref="T:MFiles.VAF.Common.ObjVerEx"/>.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerExPermissions.IsGroup">
            <summary>
            <see cref="T:MFilesAPI.UserAccount"/> or <see cref="T:MFilesAPI.UserGroup"/> Flag.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerExPermissions.UserOrGroupID">
            <summary>
            <see cref="T:MFilesAPI.UserAccount"/> or <see cref="T:MFilesAPI.UserGroup"/> ID.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerExPermissions.Object">
            <summary>
            <see cref="T:MFiles.VAF.Common.Accessibility"/> for this <see cref="T:MFilesAPI.ObjType"/>.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerExPermissions.Class">
            <summary>
            <see cref="T:MFiles.VAF.Common.Accessibility"/> for this <see cref="T:MFilesAPI.ObjectClass"/>.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerExPermissions.Properties">
            <summary>
            <see cref="T:MFiles.VAF.Common.Accessibility"/> for all <see cref="T:MFilesAPI.PropertyDef"/>s found on this <see cref="T:MFiles.VAF.Common.ObjVerEx"/>.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.AccessCache">
             <summary>
             Access Cache Class : Caches all Object, Class, and Property Structure elements.
             User and Groups Access rights are stored on the structure element that each are related to.
             <example>
             Used in order to check the Levels of Access a User or UserGroup has to a Object, Class or Property,
             or from an <see cref="T:MFiles.VAF.Common.ObjVerEx"/>.
             <code>
             AccessCache cache = new AccessCache( ServerVault );
             ObjVerEx objVerEx = ObjVerEx.Parse( ServerVault, "(0-6)" );
            
             AccessCache.ObjVerExPermissions objVerExPermissions = new AccessCache.ObjVerExPermissions(
                    objVerEx,
                    cache,
                    ( int ) MFBuiltInUserGroup.MFBuiltInUserGroupAllInternalUsers,
                    true );
            
             Console.WriteLine( objVerExPermissions.ToString(true) );
            
             AccessCache.Accessibility hiddenProp = objVerExPermissions.Properties.SingleOrDefault( p =&gt; p.StructureID == 1234 );
             Assert.IsNotNull( hiddenProp );
             Assert.IsFalse( hiddenProp.CanRead );
             </code>
             </example>
             </summary>
        </member>
        <member name="M:MFiles.VAF.Common.AccessCache.PopulateObjectPermissions(MFilesAPI.ObjTypes,MFilesAPI.UserOrUserGroupIDs)">
            <summary>
            Populates all <see cref="T:MFilesAPI.ObjType"/> Permissions.
            </summary>
            <param name="objTypes"><see cref="T:MFilesAPI.ObjTypes"/> Collection</param>
            <param name="ids"><see cref="T:MFilesAPI.UserOrUserGroupIDs"/> to Cache <see cref="T:MFiles.VAF.Common.Accessibility"/> against.</param>
        </member>
        <member name="M:MFiles.VAF.Common.AccessCache.PopulateClassPermissions(MFilesAPI.ObjectClasses,MFilesAPI.UserOrUserGroupIDs)">
            <summary>
            Populates all <see cref="T:MFilesAPI.ObjectClass"/> Permissions.
            </summary>
            <param name="classes"><see cref="T:MFilesAPI.ObjectClasses"/> Collection</param>
            <param name="ids"><see cref="T:MFilesAPI.UserOrUserGroupIDs"/> to Cache <see cref="T:MFiles.VAF.Common.Accessibility"/> against.</param>
        </member>
        <member name="M:MFiles.VAF.Common.AccessCache.PopulatePropertyPermissions(MFilesAPI.PropertyDefs,MFilesAPI.UserOrUserGroupIDs)">
            <summary>
            Populates all <see cref="T:MFilesAPI.PropertyDef"/> Permissions.
            </summary>
            <param name="propDefs"><see cref="T:MFilesAPI.PropertyDefs"/> Collection</param>
            <param name="ids"><see cref="T:MFilesAPI.UserOrUserGroupIDs"/> to Cache <see cref="T:MFiles.VAF.Common.Accessibility"/> against.</param>
        </member>
        <member name="M:MFiles.VAF.Common.AccessCache.PopulateNaclPermissions(MFilesAPI.NamedACLs,MFilesAPI.UserOrUserGroupIDs)">
            <summary>
            Populates all <see cref="P:MFiles.VAF.Common.AccessCache.NamedACLs"/> Permissions.
            </summary>
            <param name="nacls"><see cref="P:MFiles.VAF.Common.AccessCache.NamedACLs"/> Collection</param>
            <param name="ids"><see cref="T:MFilesAPI.UserOrUserGroupIDs"/> to Cache <see cref="T:MFiles.VAF.Common.Accessibility"/> against.</param>
        </member>
        <member name="M:MFiles.VAF.Common.AccessCache.GetAccessibility(System.Int32,MFilesAPI.AccessControlList,MFilesAPI.UserOrUserGroupID)">
            <summary>
            <see cref="T:MFiles.VAF.Common.Accessibility"/> constructor proxy.
            </summary>
            <param name="structureID">Structure Element ID</param>
            <param name="acl"><see cref="T:MFilesAPI.AccessControlList"/> dictating permissions</param>
            <param name="userOrGroup"><see cref="T:MFilesAPI.UserOrUserGroupID"/> to check the permissions against</param>
            <returns><see cref="T:MFiles.VAF.Common.Accessibility"/></returns>
        </member>
        <member name="M:MFiles.VAF.Common.AccessCache.#ctor(MFilesAPI.UserOrUserGroupIDs,MFilesAPI.UserOrUserGroupIDs,MFilesAPI.ObjTypes,MFilesAPI.ObjectClasses,MFilesAPI.PropertyDefs,MFilesAPI.NamedACLs)">
            <summary>
            Access Cache Metadata Structure Cache Constructor.
            </summary>
            <param name="users"><see cref="T:MFilesAPI.UserOrUserGroupIDs"/> for <see cref="T:MFilesAPI.UserAccounts"/></param>
            <param name="groups"><see cref="T:MFilesAPI.UserOrUserGroupIDs"/> for <see cref="T:MFilesAPI.UserGroups"/></param>
            <param name="objTypes">Cached <see cref="T:MFilesAPI.ObjTypes"/></param>
            <param name="objectClasses">Cached <see cref="T:MFilesAPI.ObjectClasses"/></param>
            <param name="propertyDefs">Cached <see cref="T:MFilesAPI.PropertyDefs"/></param>
            <param name="nacls">Cached <see cref="T:MFilesAPI.NamedACLs"/></param>
        </member>
        <member name="M:MFiles.VAF.Common.AccessCache.#ctor(MFilesAPI.Vault)">
            <summary>
            Access Cache Default Constructor.
            </summary>
            <param name="serverVault">Server <see cref="T:MFilesAPI.Vault"/> Connection</param>
        </member>
        <member name="P:MFiles.VAF.Common.AccessCache.Objects">
            <summary>
            Cached <see cref="T:MFiles.VAF.Common.ObjectAccess"/> <see cref="T:MFiles.VAF.Common.Accessibility"/> Collection.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.AccessCache.Classes">
            <summary>
            Cached <see cref="T:MFiles.VAF.Common.ClassAccess"/> <see cref="T:MFiles.VAF.Common.Accessibility"/> Collection.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.AccessCache.Properties">
            <summary>
            Cached <see cref="T:MFiles.VAF.Common.PropertyAccess"/> <see cref="T:MFiles.VAF.Common.Accessibility"/> Collection.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.AccessCache.NamedACLs">
            <summary>
            Cached <see cref="T:MFiles.VAF.Common.NamedACLAccess"/> <see cref="T:MFiles.VAF.Common.Accessibility"/> Collection.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.ApplicationDefinition">
            <summary>
            ApplicationDefinition is a class that provides the application basic information read from the appdef.xml which
            is associated with the application.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ApplicationDefinition.instance">
            <summary>
            The single instance of this object.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ApplicationDefinition.data">
            <summary>
            The application definition data content.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.ApplicationDefinition.#ctor">
            <summary>
            The only and private constructor.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ApplicationDefinition.Instance">
            <summary>
            The singleton object data access.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ApplicationDefinition.Guid">
            <summary>
            The application's GUID. Mandatory.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ApplicationDefinition.MasterApplicationGuid">
            <summary>
            The master application's GUID.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ApplicationDefinition.Name">
            <summary>
            The application's name. Mandatory.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ApplicationDefinition.Description">
            <summary>
            The application's description.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ApplicationDefinition.Publisher">
            <summary>
            The application's publisher information.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ApplicationDefinition.Copyright">
            <summary>
            The application's copyright text.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ApplicationDefinition.Version">
            <summary>
            The application's version. Mandatory.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ApplicationDefinition.RequiredMFilesVersion">
            <summary>
            The required M-Files version.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ApplicationDefinition.EventHandlerExtensionObjectName">
            <summary>
            The name of the application's extension object that is responsible of the event handling and dispatching.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.ApplicationDefinition.ApplicationDefinitionData">
            <summary>
            The internal data representation in appdef.xml.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.ApplicationDefinition.ApplicationDefinitionData.#ctor">
            <summary>
            Default constructor needed by the serialization.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.ApplicationDefinition.ApplicationDefinitionData.GetSchema">
            <summary>
            Method for returning the schema. Documentation says that this needs to return null.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Common.ApplicationDefinition.ApplicationDefinitionData.ReadXml(System.Xml.XmlReader)">
            <summary>
            ReadXML deserializes the class using the given XmlReader.
            </summary>
            <param name="reader">The XML stream to deserialize from.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ApplicationDefinition.ApplicationDefinitionData.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Method for serializing the class. Not implemented.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:MFiles.VAF.Common.ApplicationDefinition.ApplicationDefinitionData.Guid">
            <summary>
            The application's GUID. Mandatory.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ApplicationDefinition.ApplicationDefinitionData.MasterApplicationGuid">
            <summary>
            The master application's GUID.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ApplicationDefinition.ApplicationDefinitionData.Name">
            <summary>
            The application's name. Mandatory.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ApplicationDefinition.ApplicationDefinitionData.Description">
            <summary>
            The application's description.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ApplicationDefinition.ApplicationDefinitionData.Publisher">
            <summary>
            The application's publisher information.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ApplicationDefinition.ApplicationDefinitionData.Copyright">
            <summary>
            The application's copyright text.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ApplicationDefinition.ApplicationDefinitionData.Version">
            <summary>
            The application's version. Mandatory.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ApplicationDefinition.ApplicationDefinitionData.RequiredMFilesVersion">
            <summary>
            The required M-Files version.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ApplicationDefinition.ApplicationDefinitionData.EventHandlerExtensionObjectName">
            <summary>
            The name of the application's extension object that is responsible of the event handling and dispatching.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.ApplicationDefinition.ApplicationDefinitionData.ElementNames">
            <summary>
            appdef.xml element names from which the data is read.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ApplicationDefinition.ApplicationDefinitionData.ElementNames.Root">
            <summary>
            The root element name.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ApplicationDefinition.ApplicationDefinitionData.ElementNames.Name">
            <summary>
            The name element name.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ApplicationDefinition.ApplicationDefinitionData.ElementNames.Version">
            <summary>
            The version element name.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ApplicationDefinition.ApplicationDefinitionData.ElementNames.Guid">
            <summary>
            The guid element name.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ApplicationDefinition.ApplicationDefinitionData.ElementNames.MasterApplicationGuid">
            <summary>
            The master application guid element name.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ApplicationDefinition.ApplicationDefinitionData.ElementNames.Description">
            <summary>
            The description element name.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ApplicationDefinition.ApplicationDefinitionData.ElementNames.Publisher">
            <summary>
            The publisher element name.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ApplicationDefinition.ApplicationDefinitionData.ElementNames.Copyright">
            <summary>
            The copyright element name.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ApplicationDefinition.ApplicationDefinitionData.ElementNames.RequiredMFilesVersion">
            <summary>
            The required M-Files version element name.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ApplicationDefinition.ApplicationDefinitionData.ElementNames.ExtensionObjects">
            <summary>
            The extension objects element name.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ApplicationDefinition.ApplicationDefinitionData.ElementNames.ExtensionObject">
            <summary>
            The extension object element name.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ApplicationDefinition.ApplicationDefinitionData.ElementNames.ExtensionObjectName">
            <summary>
            The extension object name element name.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.AutoTempFile">
            <summary>
            A class to create and hold the ownership of a temporary file. The temporary file is deleted when the class instance
            is disposed.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.AutoTempFile.Empty">
            <summary>
            The single empty instance.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.AutoTempFile.#ctor">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.AutoTempFile.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.AutoTempFile.Create(System.String)">
            <summary>
            Creates a automatically controlled temporary file.
            </summary>
            <param name="extension">The file extension.</param>
            <returns>The new automatically controlled temporary file.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.AutoTempFile.Attach(System.String)">
            <summary>
            Attaches and takes ownership of an existing temporary file.
            </summary>
            <param name="path">A path to the file.</param>
            <returns>The new automatically controlled temporary file.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.AutoTempFile.Detach">
            <summary>
            Detaches the temporary file from the object, so that the object doesn't control the file any longer.
            The caller receives the ownership of the file.
            </summary>
            <returns>The path to the file.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.AutoTempFile.Dispose">
            <summary>
            Deletes the temporary folder (with content).
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.AutoTempFile.Dispose(System.Boolean)">
            <summary>
            Deletes the temporary folder (with content).
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.AutoTempFile.IsValid">
            <summary>
            Resolves if the object encapsulates a controlled file path.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.AutoTempFile.Path">
            <summary>
            The controlled temporary folder.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.AutoTempFolder">
            <summary>
            A class to create and hold the ownership of a temporary folder. The temporary folder is deleted when the class instance
            is disposed.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.AutoTempFolder.Empty">
            <summary>
            The single empty instance.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.AutoTempFolder.#ctor">
            <summary>
            Constructor, creates an invalid object.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.AutoTempFolder.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.AutoTempFolder.Create">
            <summary>
            Creates a automatically controlled temporary folder. 
            </summary>
            <returns>The new automatically controlled temporary folder object.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.AutoTempFolder.Attach(System.String)">
            <summary>
            Attaches and takes ownership of an existing temporary folder.
            </summary>
            <param name="path">The path to the temporary folder.</param>
            <returns>The new automatically controlled temporary folder object.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.AutoTempFolder.Detach">
            <summary>
            Detaches the temporary folder from the object, so that the object doesn't control the folder any longer.
            The caller receives the ownership of the folder.
            </summary>
            <returns>The path to the folder.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.AutoTempFolder.Dispose">
            <summary>
            Deletes the temporary folder (with content).
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.AutoTempFolder.Dispose(System.Boolean)">
            <summary>
            Deletes the temporary folder (with content).
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.AutoTempFolder.IsValid">
            <summary>
            Resolves if the object encapsulates a controlled folder path.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.AutoTempFolder.Path">
            <summary>
            The controlled temporary folder.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.BackgroundOperationState">
            <summary>
            A type for the state of the background operation.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.BackgroundOperationState.Idle">
            <summary>
            Waiting to be started.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.BackgroundOperationState.Waiting">
            <summary>
            Waiting for next run.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.BackgroundOperationState.Running">
            <summary>
            A run is ongoing.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.BackgroundOperationStatus">
            <summary>
            The status of a background operation at one given moment.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.BackgroundOperationStatus.State">
            <summary>
            The status of the background operation.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.BackgroundOperationStatus.Cancelled">
            <summary>
            Is the operation cancelled. A cancelled operation cannot be used and is waiting to be disposed.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.BackgroundOperationStatus.Recurring">
            <summary>
            Is the operation recurring.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.BackgroundOperationStatus.Interval">
            <summary>
            The interval between runs, when the operation is recurring. Only available when the operation is recurring.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.BackgroundOperationStatus.PreviousRunStarted">
            <summary>
            The previous invocation time in milliseconds. Only available after the first run has started.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.BackgroundOperationStatus.RunOnceRequestCount">
            <summary>
            The amount of run once requests. The run once requests will be served immediately after the previous run finishes.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.BackgroundOperationStatus.PreviousRunFinished">
            <summary>
            The previous run finished time in milliseconds. Only available after the first run has finished.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.BackgroundOperationStatus.NextRunScheduled">
            <summary>
            The next run scheduled time in milliseconds. Only available in Waiting state.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.BackgroundOperationStatus.RunCount">
            <summary>
            The number of finished runs since the creation of the background operation.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperationStatus.#ctor(MFiles.VAF.Common.BackgroundOperation)">
            <summary>
            Creates a new background operation status.
            </summary>
            <param name="operation">The background operation to clone the status from.</param>
        </member>
        <member name="T:MFiles.VAF.Common.BackgroundOperation">
            <summary>
            A background operation, that can be used to run a method in a background task. The method can be run at given intervals. Runs only one method at a time. Will delay the next run, if previous run is still ongoing.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperation.#ctor(System.String,System.String,System.Threading.CancellationToken,System.Action{MFiles.VAF.Common.BackgroundOperation})">
            <summary>
            Creates a new background operation that runs the method in separate task.
            </summary>
            <param name="vaultName">The name of the vault where this background operation is running.</param>
            <param name="name">The name of the background operation.</param>
            <param name="cancellationToken">The cancellation token, that is used to cancel the running background operation.</param>
            <param name="method">The method to invoke. The background operation will be passed to the method.</param>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperation.RunOnce">
            <summary>
            Runs the operation at once or immediately after the current run is finished.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperation.RunOnce(System.Int32)">
            <summary>
            Runs the operation at once or immediately after the current run is finished.
            </summary>
            <param name="maximumRunOnceRequests">The run once request will not be made, if there are already more than equal requests to the given maximum.</param>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperation.RunAtIntervals(System.TimeSpan)">
            <summary>
            Begins running the operation at given intervals. If a run takes longer than the interval, the next run starts immediately after the previous run.
            </summary>
            <param name="interval">The interval between consecutive runs.</param>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperation.StopRunningAtIntervals">
            <summary>
            Stops running the operation at intervals.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperation.Cancel(System.Boolean)">
            <summary>
            Cancels the operation. A cancelled operation cannot be used and is waiting to be disposed.
            </summary>
            <param name="waitUntilIdle">If true, also waits until the operation is idle.</param>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperation.WaitUntilIdle(System.TimeSpan)">
            <summary>
            Waits for the the operation to stop running. Can only return, if the operation is not running at intervals.
            </summary>
            <param name="maximumWaitingTime"></param>
            <returns>False, if the maximum waiting time was reached.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperation.ChangeStatus(System.Action)">
            <summary>
            A method to change the status of the background operation.
            The provided status changing action is run inside a lock and the state will change accordingly.
            </summary>
            <param name="statusChangingAction">The action that changes the status. Will be run inside a lock.</param>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperation.WorkerMethod">
            <summary>
            The worker method for the background operations. Should be run in a separate task.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperation.ContinueOperationAfterWaiting(System.Threading.Tasks.Task)">
            <summary>
            Continues the operation after waiting. Run in a separate task.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperation.TryChangeStateAndScheduleNextRun">
            <summary>
            Changes the state according to the operation status. The state might not change.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperation.GetNextStateAndScheduleNextRun">
            <summary>
            Returns the next state, where the operation should be transferred.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperation.EnsureFreshWakeupTokenSource">
            <summary>
            Creates a new refresh token source, if one is required.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperation.RunOperation">
            <summary>
            Task method that runs the operation.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperation.DisposeWakeupTokenSource">
            <summary>
            Ensures, that the operation is stopped. Should be called with lock(this).
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperation.GetRemainingTime(System.Int64)">
            <summary>
            Gets the remaining time before the next invocation. Should be called with lock(this).
            </summary>
            <returns>The timespan that should be slept, before the next invocation</returns>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperation.StartTask(System.Action)">
            <summary>
            Starts the method in a background task.
            </summary>
            <param name="method">The method to start.</param>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperation.OnOperationEvent(MFiles.VAF.Common.BackgroundOperation.OperationEventHandler,MFiles.VAF.Common.BackgroundOperation)">
            <summary>
            A helper to trigger a background operation event.
            </summary>
            <param name="eventHandler">The event handler to trigger.</param>
            <param name="operation">The operation to pass to the event.</param>
        </member>
        <member name="P:MFiles.VAF.Common.BackgroundOperation.Timer">
            <summary>
            Timer for the background operation.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.BackgroundOperation.Status">
            <summary>
            The status of the background operation.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.BackgroundOperation.VaultName">
            <summary>
            The name of the vault where this background operation is running.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.BackgroundOperation.State">
            <summary>
            The state of the background operation.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.BackgroundOperation.Name">
            <summary>
            The name of the background operation.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.BackgroundOperation.Cancelled">
            <summary>
            Is the operation cancelled. A cancelled operation cannot be used and is waiting to be disposed.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.BackgroundOperation.Recurring">
            <summary>
            Is the operation recurring.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.BackgroundOperation.Interval">
            <summary>
            The interval between runs, when the operation is recurring. Only available when the operation is recurring.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.BackgroundOperation.PreviousRunStarted">
            <summary>
            The previous invocation time in milliseconds. Only available after the first run has started.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.BackgroundOperation.RunOnceRequestCount">
            <summary>
            The amount of run once requests. The run once requests will be served immediately after the previous run finishes.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.BackgroundOperation.PreviousRunFinished">
            <summary>
            The previous run finished time in milliseconds. Only available after the first run has finished.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.BackgroundOperation.NextRunScheduled">
            <summary>
            The next run scheduled time in milliseconds. Only available in Waiting state.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.BackgroundOperation.RunCount">
            <summary>
            The number of finished runs since the creation of the background operation.
            </summary>
        </member>
        <member name="E:MFiles.VAF.Common.BackgroundOperation.StatusChanged">
            <summary>
            The event that is triggered, when the status of the background operation has changed.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.BackgroundOperation.OperationEventHandler">
            <summary>
            An event handler, that takes a background operation.
            </summary>
            <param name="operation">The background operation.</param>
        </member>
        <member name="T:MFiles.VAF.Common.BackgroundOperationManager">
            <summary>
            A manager to keep track of running background operations and their cancellation.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperationManager.#ctor(System.String)">
            <summary>
            Initializes new BackgroundOperationManager object.
            </summary>
            <param name="vaultName">The name of the vault in which the manager is running.</param>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperationManager.CancelAll">
            <summary>
            Cancels all background operations.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperationManager.CancelAllAndWaitForFinish(System.TimeSpan)">
            <summary>
            Sends the request for cancelling the background operations and waits for them to finish.
            </summary>
            <param name="maximumWaitingTime">The maximum waiting time.</param>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperationManager.GetBackgroundOperations">
            <summary>
            Returns all created background operations, that have not been cancelled and finished.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperationManager.RunOnce(System.String,System.Action)">
            <summary>
            Runs the given action in a background task.
            </summary>
            <param name="name">The name for the background operation.</param>
            <param name="method">The method to run.</param>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperationManager.RunOnce(System.String,System.Action{MFiles.VAF.Common.BackgroundOperation})">
            <summary>
            Runs the given action in a background task.
            </summary>
            <param name="name">The name for the background operation.</param>
            <param name="method">The method to run.</param>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperationManager.StartRecurringBackgroundOperation(System.String,System.TimeSpan,System.Action)">
            <summary>
            Creates a new background operation and starts it. The background operation runs the given method at given intervals.
            </summary>
            <param name="name">The name of the operation.</param>
            <param name="interval">The target interval between method calls. If the method call takes longer than the interval, the method will be invoked immediately after the previous method call returns.</param>
            <param name="method">The method to invoke at given intervals.</param>
            <returns>A started background operation.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperationManager.StartRecurringBackgroundOperation(System.String,System.TimeSpan,System.Action{MFiles.VAF.Common.BackgroundOperation})">
            <summary>
            Creates a new background operation and starts it. The background operation runs the given method at given intervals.
            </summary>
            <param name="name">The name of the operation.</param>
            <param name="interval">The target interval between method calls. If the method call takes longer than the interval, the method will be invoked immediately after the previous method call returns.</param>
            <param name="method">The method to invoke at given intervals.</param>
            <returns>A started background operation.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperationManager.CreateBackgroundOperation(System.String,System.Action)">
            <summary>
            Creates a new background operation. The background operations runs the given method at given intervals. Must be separately started.
            </summary>
            <param name="name">The name of the operation.</param>
            <param name="method">The method to invoke at given intervals.</param>
            <returns>A new background operation, that is not yet started.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperationManager.CreateBackgroundOperation(System.String,System.Action{MFiles.VAF.Common.BackgroundOperation})">
            <summary>
            Creates a new background operation. The background operations runs the given method at given intervals. Must be separately started.
            </summary>
            <param name="name">The name of the operation.</param>
            <param name="method">The method to invoke at given intervals.</param>
            <returns>A new background operation, that is not yet started.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperationManager.OperationStatusChanged(MFiles.VAF.Common.BackgroundOperation)">
            <summary>
            Is run when the status of an operation has changed.
            </summary>
            <param name="operation">The background operation.</param>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperationManager.GetCancellationTokenForUninitialization">
            <summary>
            Returns a cancellation token, that gets cancelled, when the vault goes offline.
            </summary>
            <returns>The cancellation token for uninitialization.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperationManager.OnOperationEvent(MFiles.VAF.Common.BackgroundOperation.OperationEventHandler,MFiles.VAF.Common.BackgroundOperation)">
            <summary>
            A helper to trigger a background operation event.
            </summary>
            <param name="eventHandler">The event handler to trigger.</param>
            <param name="operation">The operation to pass to the event.</param>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperationManager.CastAction(System.Action)">
            <summary>
            Casts an action without a parameter to an action with a background operation parameter.
            </summary>
            <param name="method">Action without a parameter.</param>
            <returns>Action with a background operation parameter.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperationManager.ZeroIfNegative(System.TimeSpan)">
            <summary>
            Helper to return TimeSpan.Zero, if negative.
            </summary>
            <param name="timeSpan">TimeSpan</param>
            <returns>TimeSpan.Zero or the given non-negative TimeSpan.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.BackgroundOperationManager.Dispose">
            <summary>
            Force disposing.
            </summary>
        </member>
        <member name="E:MFiles.VAF.Common.BackgroundOperationManager.OperationStarting">
            <summary>
            Triggered when a background operation starts.
            </summary>
        </member>
        <member name="E:MFiles.VAF.Common.BackgroundOperationManager.OperationStopping">
            <summary>
            Triggered when a background operation stops.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.BackgroundOperationManager.VaultName">
            <summary>
            The name of the vault in which the manager is running.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.UserGroupEqualityComparer">
            <summary>
            Equality comparer for UserGroups objects.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.UserGroupEqualityComparer.Equals(MFilesAPI.UserGroup,MFilesAPI.UserGroup)">
            <summary>
            Compare for equality
            </summary>
            <param name="o1">UserGroup 1</param>
            <param name="o2">UserGroup 2</param>
            <returns>True if the IDs are equal.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.UserGroupEqualityComparer.GetHashCode(MFilesAPI.UserGroup)">
            <summary>
            Implements hashcode method for efficient use in HashSets.
            </summary>
            <returns>The id of the object.</returns>
        </member>
        <member name="T:MFiles.VAF.Common.UserAccountEqualityComparer">
            <summary>
            Equality comparer for UserAccounts objects.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.UserAccountEqualityComparer.Equals(MFilesAPI.UserAccount,MFilesAPI.UserAccount)">
            <summary>
            Compare for equality
            </summary>
            <param name="o1">UserAccount 1</param>
            <param name="o2">UserAccount 2</param>
            <returns>True if the IDs are equal.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.UserAccountEqualityComparer.GetHashCode(MFilesAPI.UserAccount)">
            <summary>
            Implements hashcode method for efficient use in HashSets.
            </summary>
            <returns>The id of the object.</returns>
        </member>
        <member name="T:MFiles.VAF.Common.ObjIDEqualityComparer">
            <summary>
            Equality comparer for ObjID objects
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.ObjIDEqualityComparer.Equals(MFilesAPI.ObjID,MFilesAPI.ObjID)">
            <summary>
            Compare for equality
            </summary>
            <param name="o1">ObjID 1</param>
            <param name="o2">ObjID 2</param>
            <returns>True if both the Type and ID are equal.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjIDEqualityComparer.GetHashCode(MFilesAPI.ObjID)">
            <summary>
            Implements hashcode method for efficient use in HashSets.
            </summary>
            <returns>The id of the object.</returns>
        </member>
        <member name="T:MFiles.VAF.Common.ObjVerIDEqualityComparer">
            <summary>
            Equality comparer for ObjVers based only on ID (not version)
            Essentially compares thier underlying ObjID.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerIDEqualityComparer.Equals(MFilesAPI.ObjVer,MFilesAPI.ObjVer)">
            <summary>
            Compare for equality
            </summary>
            <param name="o1">ObjVer 1</param>
            <param name="o2">ObjVer 2</param>
            <returns>True if both the Type and ID are equal.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerIDEqualityComparer.GetHashCode(MFilesAPI.ObjVer)">
            <summary>
            Implements hashcode method for efficient use in HashSets.
            </summary>
            <returns>The id of the object.</returns>
        </member>
        <member name="T:MFiles.VAF.Common.ObjVerEqualityComparer">
            <summary>
            Equality comparer for ObjVer objects.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEqualityComparer.Equals(MFilesAPI.ObjVer,MFilesAPI.ObjVer)">
            <summary>
            Compare for equality
            </summary>
            <param name="o1">ObjVer 1</param>
            <param name="o2">ObjVer 2</param>
            <returns>True if both the Type and ID are equal.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEqualityComparer.GetHashCode(MFilesAPI.ObjVer)">
            <summary>
            Implements hashcode method for efficient use in HashSets.
            </summary>
            <returns>The id of the object.</returns>
        </member>
        <member name="T:MFiles.VAF.Common.EqualityCompareOptions">
            <summary>
            Equality compare options.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.EqualityCompareOptions.None">
            <summary>
            Versions in lookups and the order of lookups are meaningful.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.EqualityCompareOptions.Default">
            <summary>
            Default values, versions in lookups are meaningful but the order is not.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.EqualityCompareOptions.LookupIgnoreVersions">
            <summary>
            Ignore lookup versions.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.EqualityCompareOptions.LookupsIgnoreOrder">
            <summary>
            Ignore lookups order.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.TypedValueEqualityComparer">
            <summary>
            Equality comparer for TypedValues objects.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.TypedValueEqualityComparer.Equals(MFilesAPI.TypedValue,MFilesAPI.TypedValue)">
            <summary>
            Compare for equality
            </summary>
            <param name="tv1">TypedValue 1</param>
            <param name="tv2">TypedValue 2</param>
            <returns>True if both the datatype and underlying values are equal.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.TypedValueEqualityComparer.GetHashCode(MFilesAPI.TypedValue)">
            <summary>
            Implements hashcode method for efficient use in HashSets.
            </summary>
            <returns>The id of the object.</returns>
        </member>
        <member name="T:MFiles.VAF.Common.JTokenExtensionMethods">
            <summary>
            Extension / Helper methods for the <see cref="T:Newtonsoft.Json.Linq.JToken"/> objects used in JSON Serialization / Deserialization throughout the VAF.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.JTokenExtensionMethods.RemoveNulls(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Utility method to remove null values from a <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="token"><see cref="T:Newtonsoft.Json.Linq.JToken"/> to clean</param>
            <returns>Clean <see cref="T:Newtonsoft.Json.Linq.JToken"/></returns>
        </member>
        <member name="M:MFiles.VAF.Common.JTokenExtensionMethods.IsEmpty(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Utility method to check a JToken for nulls.
            </summary>
            <param name="token"><see cref="T:Newtonsoft.Json.Linq.JToken"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="T:MFiles.VAF.Common.LookupExtensionMethods">
            <summary>
            Defines convenience methods for the Lookup interface.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.LookupExtensionMethods.ToObjVerEx(MFilesAPI.Lookup,MFilesAPI.Vault)">
            <summary>
            Converts a Lookup to an ObjVerEx.
            </summary>
            <param name="l">Lookup to convert</param>
            <param name="vault">Vault Reference</param>
            <returns>ObjVerEx | null</returns>
        </member>
        <member name="M:MFiles.VAF.Common.LookupExtensionMethods.ToLookups(MFilesAPI.Lookup)">
            <summary>
            Converts a Lookup to a <see cref="T:MFilesAPI.Lookups"/> collection.
            </summary>
            <param name="l"><see cref="T:MFilesAPI.Lookup"/> to convert</param>
            <returns><see cref="T:MFilesAPI.Lookups"/></returns>
        </member>
        <member name="M:MFiles.VAF.Common.LookupExtensionMethods.ToObjID(MFilesAPI.Lookup)">
            <summary>
            Converts a Lookup to a <see cref="T:MFilesAPI.ObjID"/>.
            </summary>
            <param name="l"><see cref="T:MFilesAPI.Lookup"/> to convert</param>
            <returns><see cref="T:MFilesAPI.ObjID"/></returns>
        </member>
        <member name="M:MFiles.VAF.Common.LookupExtensionMethods.ToObjVer(MFilesAPI.Lookup)">
            <summary>
            Converts a Lookup to a <see cref="T:MFilesAPI.ObjVer"/>.
            </summary>
            <param name="l"><see cref="T:MFilesAPI.Lookup"/> to convert</param>
            <returns><see cref="T:MFilesAPI.ObjVer"/></returns>
        </member>
        <member name="M:MFiles.VAF.Common.LookupExtensionMethods.ToLatestObjVer(MFilesAPI.Lookup,MFilesAPI.Vault,System.Boolean,System.Boolean)">
            <summary>
            Converts a Lookup to the latest <see cref="T:MFilesAPI.ObjVer"/>.
            </summary>
            <param name="l"><see cref="T:MFilesAPI.Lookup"/> to convert</param>
            <param name="vault">Vault Reference</param>
            <param name="allowCheckedOut">Allow checked out object resolution?</param>
            <param name="updateFromServer">Update from server?</param>
            <returns></returns>
        </member>
        <member name="T:MFiles.VAF.Common.UrlTargetPlatform">
            <summary>
            The various platforms MFiles Urls can target.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.UrlTargetPlatform.Undefined">
            <summary>
            Unefined.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.UrlTargetPlatform.Desktop">
            <summary>
            M-Files Desktop client.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.UrlTargetPlatform.Web">
            <summary>
            M-Files Web Access.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.UrlTargetPlatform.Mobile">
            <summary>
            M-Files mobile clients.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.UrlHelper">
            <summary>
            Helps generate urls to m-files content.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.UrlHelper.GetObjectUrl(MFiles.VAF.Common.ObjVerEx,MFiles.VAF.Common.UrlTargetPlatform,System.Boolean,MFilesAPI.MFilesURLType)">
            <summary>
            Generates a url pointing to an object for the specified platform.
            </summary>
            <param name="objVerEx">The object to which the url should point.</param>
            <param name="platform">The platform the url should target.</param>
            <param name="specificVersion">
            	Indicates whether the url should point to this specific version, or the latest version of the object.
            </param>
            <param name="urlType">The type of url to create. (Web type is always show)</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Common.UrlHelper.GetObjectUrlForDesktop(MFiles.VAF.Common.ObjVerEx,System.Boolean,MFilesAPI.MFilesURLType)">
            <summary>
            Generates a url pointing to an object for the desktop.
            </summary>
            <param name="objVerEx">The object to which the url should point.</param>
            <param name="specificVersion">
            	Indicates whether the url should point to this specific version, or the latest version of the object.
            </param>
            <param name="urlType">The type of url to create.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Common.UrlHelper.GetObjectUrlForWeb(MFiles.VAF.Common.ObjVerEx,System.Boolean)">
            <summary>
            Generates a url pointing to an object for the desktop.
            </summary>
            <param name="objVerEx">The object to which the url should point.</param>
            <param name="specificVersion">
            	Indicates whether the url should point to this specific version, or the latest version of the object.
            </param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Common.UrlHelper.GetObjectUrlForMobile(MFiles.VAF.Common.ObjVerEx,System.Boolean,MFilesAPI.MFilesURLType)">
            <summary>
            Generates a url pointing to an object for the desktop.
            </summary>
            <param name="objVerEx">The object to which the url should point.</param>
            <param name="specificVersion">
            	Indicates whether the url should point to this specific version, or the latest version of the object.
            </param>
            <param name="urlType">The type of url to create.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Common.UrlHelper.GetBaseUrlForWebAccess(MFilesAPI.Vault)">
            <summary>
            Resolves the configured canonical base url for the web.
            </summary>
            <param name="vault">The vault.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Common.UrlHelper.GetHyperlinkFragmentHtml(MFiles.VAF.Common.ObjVerEx,System.Boolean)">
            <summary>
            Creates an HTML formatted hyperlink containing URLs to the object 
            for M-Files Desktop, M-Files Web, and M-Files Mobile.
            </summary>
            <param name="objVerEx">The object to create the fragment for.</param>
            <param name="specificVersion">
            	Indicates whether the url should point to this specific version, or the latest version of the object.
            </param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Common.UrlHelper.GetHyperlinkFragmentPlain(MFiles.VAF.Common.ObjVerEx,System.Boolean)">
            <summary>
            A plain-text formatted text fragment containing URLs to the object for 
            M-Files Desktop, M-Files Web, and M-Files Mobile.
            </summary>
            <param name="objVerEx">The object to create the fragment for.</param>
            <param name="specificVersion">
            	Indicates whether the url should point to this specific version, or the latest version of the object.
            </param>
            <returns></returns>
        </member>
        <member name="T:MFiles.VAF.Common.ObjectVersionsExtensionMethods">
            <summary>
            ObjectVersions Extension Methods.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.ObjectVersionsExtensionMethods.ToObjVerExs(MFilesAPI.ObjectVersions,MFilesAPI.Vault)">
            <summary>
            Converts a <see cref="T:MFilesAPI.ObjectVersions"/> collection into a List of <see cref="T:MFiles.VAF.Common.ObjVerEx"/>.
            </summary>
            <param name="objectVersions"><see cref="T:MFilesAPI.ObjectVersions"/> Collection</param>
            <param name="vault"><see cref="T:MFilesAPI.Vault"/> Reference</param>
            <returns>List of <see cref="T:MFiles.VAF.Common.ObjVerEx"/>.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjectVersionsExtensionMethods.ToLookups(MFilesAPI.ObjectVersions,MFilesAPI.Vault)">
            <summary>
            Converts a <see cref="T:MFilesAPI.ObjectVersions"/> collection into a <see cref="T:MFilesAPI.Lookups"/> Collection.
            </summary>
            <param name="objectVersions"><see cref="T:MFilesAPI.ObjectVersions"/> Collection</param>
            <param name="vault"><see cref="T:MFilesAPI.Vault"/> Reference</param>
            <returns><see cref="T:MFilesAPI.Lookups"/></returns>
        </member>
        <member name="T:MFiles.VAF.Common.ObjVerExtensionMethods">
            <summary>
            Extension methods for the ObjVer object.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerExtensionMethods.ToString(MFilesAPI.ObjVer,System.Boolean)">
            <summary>
            Converts an ObjVer into human readable, and code-parseable string.
            </summary>
            <param name="objVer">The source ObjID object.</param>
            <param name="parsable"></param>
            <returns>A string represenation of the ObjID.</returns>
        </member>
        <member name="T:MFiles.VAF.Common.ReferenceTrees">
            <summary>
            Contains a Collection of <see cref="T:MFiles.VAF.Common.ReferenceTree"/>'s and their nested <see cref="T:MFiles.VAF.Common.ReferenceTree.ReferenceTreeBranch"/>'s.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.ReferenceTrees.#ctor(MFilesAPI.Vault,System.String,MFilesAPI.PropertyValues,System.String,MFiles.VAF.Common.ReferenceTree.ResolutionType,System.Boolean)">
            <summary>
            Default Async Constructor.
            </summary>
            <param name="vault">Permanent Vault</param>
            <param name="objVerStr">ObjVer String of the Context Object</param>
            <param name="contextProps">PropertyValues Collection of the Context Object</param>
            <param name="refTreesString"><see cref="T:MFiles.VAF.Common.ReferenceTree"/> <see cref="T:System.String"/></param>
            <param name="type"><see cref="T:MFiles.VAF.Common.ReferenceTree.ResolutionType"/> Display Value or Object Reference</param>
            <param name="hideMissingValues">Should hidden display values be shown?</param>
        </member>
        <member name="M:MFiles.VAF.Common.ReferenceTrees.#ctor(MFilesAPI.Vault,System.String,MFilesAPI.PropertyValues,MFiles.VAF.Common.ReferenceTree.TreeMap,MFiles.VAF.Common.ReferenceTree.ResolutionType,System.Boolean)">
            <summary>
            Overloaded Async Constructor.
            </summary>
            <param name="vault">Permanent Vault</param>
            <param name="objVerStr">ObjVer String of the Context Object</param>
            <param name="contextProps">PropertyValues Collection of the Context Object</param>
            <param name="treeMap"><see cref="T:MFiles.VAF.Common.ReferenceTree.TreeMap"/></param>
            <param name="type"><see cref="T:MFiles.VAF.Common.ReferenceTree.ResolutionType"/> Display Value or Object Reference</param>
            <param name="hideMissingValues">Should hidden values be shown?</param>
        </member>
        <member name="M:MFiles.VAF.Common.ReferenceTrees.#ctor(MFilesAPI.Vault,System.String,MFilesAPI.PropertyValues,MFiles.VAF.Common.ReferenceTree.TreeMap[],MFiles.VAF.Common.ReferenceTree.ResolutionType,System.Boolean)">
            <summary>
            Overloaded Constructor.
            </summary>
            <param name="vault">Permanent Vault</param>
            <param name="objVerStr">ObjVer String of the Context Object</param>
            <param name="contextProps">PropertyValues Collection of the Context Object</param>
            <param name="treeMaps"><see cref="T:MFiles.VAF.Common.ReferenceTree.TreeMap"/> Array</param>
            <param name="type"><see cref="T:MFiles.VAF.Common.ReferenceTree.ResolutionType"/> Display Value or Object Reference</param>
            <param name="hideMissingValues">Should hidden values be shown?</param>
        </member>
        <member name="M:MFiles.VAF.Common.ReferenceTrees.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:MFiles.VAF.Common.ReferenceTrees.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:MFiles.VAF.Common.ReferenceTrees.Trees">
            <summary>
            Private <see cref="T:MFiles.VAF.Common.ReferenceTree"/> Collection.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ReferenceTrees.Item(System.Int32)">
            <summary>
            Indexer.
            </summary>
            <param name="index">Index to access.</param>
        </member>
        <member name="T:MFiles.VAF.Common.ReferenceTree">
            <summary>
            Reference Tree Resolution Object.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.ReferenceTree.AsObjVerExName(MFilesAPI.Vault,MFilesAPI.PropertyValues,MFilesAPI.ObjVer,MFilesAPI.ObjectClass)">
            <summary>
            Async ObjVerEx Name Builder.
            </summary>
            <param name="v">Vault</param>
            <param name="props">PropertyValues</param>
            <param name="objVer">ObjVer</param>
            <param name="oc">Optional ObjectClass</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Common.ReferenceTree.IsLookupVisible(MFilesAPI.Lookup,System.Boolean)">
            <summary>
            Lookup visibility checker.
            </summary>
            <param name="lookup">Lookup to check.</param>
            <param name="hideMissingValues">Show Hidden Lookup values?</param>
            <returns>True / False</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ReferenceTree.GetMatches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Returns filtered matching values from a regular expression against a string.
            </summary>
            <param name="regex">Regular Expression</param>
            <param name="value">String to Parse</param>
            <param name="options">RegEx Options</param>
            <returns>Match Collection</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ReferenceTree.ResolveLookupReferences(MFilesAPI.Vault,MFilesAPI.ObjVer,MFilesAPI.PropertyValues,MFiles.VAF.Common.ReferenceTree.MFDynamicIdentifier)">
            <summary>
            Resolves to a <see cref="T:MFilesAPI.Lookups"/> Collection.
            Should be used when the final property ID is for a MSLU.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.ReferenceTree.ToObjVerStr(MFilesAPI.Lookup)">
            <summary>
            Helper Method to convert a Lookup into a <see cref="T:MFilesAPI.ObjVer"/> String.
            </summary>
            <param name="lookup"></param>
            <returns><see cref="T:MFilesAPI.ObjVer"/> String.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ReferenceTree.ToObjVer(MFilesAPI.Vault,System.String)">
            <summary>
            Helper Method to convert a string into a fully populated <see cref="T:MFilesAPI.ObjVer"/>.
            </summary>
            <param name="v">The vault.</param>
            <param name="objVerStr">String to parse</param>
            <returns><see cref="T:MFilesAPI.ObjVer"/></returns>
        </member>
        <member name="M:MFiles.VAF.Common.ReferenceTree.AddBranch(MFiles.VAF.Common.ReferenceTree.MFDynamicIdentifier)">
            <summary>
            Adds a single Branch.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.ReferenceTree.AddBranchs(MFiles.VAF.Common.ReferenceTree.MFDynamicIdentifier)">
            <summary>
            Adds a Collection of Branches.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.ReferenceTree.#ctor">
            <summary>
            Parameterless Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.ReferenceTree.#ctor(MFilesAPI.Vault,System.String,MFilesAPI.PropertyValues,MFiles.VAF.Common.ReferenceTree.TreeMap,MFiles.VAF.Common.ReferenceTree.ResolutionType,System.Boolean)">
            <summary>
            Async Constructor that accepts a Tree Map.
            </summary>
            <param name="vault">Permanent Vault</param>
            <param name="objVerStr">ObjVer String of the Context Object</param>
            <param name="contextProps">PropertyValues Collection of the Context Object</param>
            <param name="map">Reference Tree Map</param>
            <param name="type"><see cref="T:MFiles.VAF.Common.ReferenceTree.ResolutionType"/> - Object Reference or Display Value</param>
            <param name="hideMissingValues">Should hidden values be shown?</param>
        </member>
        <member name="M:MFiles.VAF.Common.ReferenceTree.Resolve(MFiles.VAF.Common.ReferenceTree.MFDynamicIdentifier)">
            <summary>
            Self Resolver.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.ReferenceTree.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="P:MFiles.VAF.Common.ReferenceTree.HideMissingValues">
            <summary>
            When true, shows hidden values... otherwise respects hidden display values.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ReferenceTree.Vault">
            <summary>
            Vault Reference.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ReferenceTree.BaseProps">
            <summary>
            Base <see cref="T:MFilesAPI.PropertyValues"/> for the <see cref="T:MFiles.VAF.Common.ReferenceTree.TreeMap"/> resolution.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ReferenceTree.BaseObjVer">
            <summary>
            Base <see cref="T:MFilesAPI.ObjVer"/>.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ReferenceTree.Depth">
            <summary>
            Current resolution depth.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ReferenceTree.Type">
            <summary>
            Specifies the value type to resolve ( <see cref="T:System.String"/> DisplayValue or <see cref="T:MFilesAPI.Lookup"/> ).
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ReferenceTree.Map">
            <summary>
            Current Map Set of Property IDs to follow in order to find the Target Reference or DisplayValue.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ReferenceTree.Matches">
            <summary>
            Reference Tree Matches at this depth.
            Boxed as an List of 'object'.
            Un-box each by ResolutionType: ObjectReference => ObjVerEx, DisplayValue => String
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ReferenceTree.Branches">
            <summary>
            Child Branches.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.ReferenceTree.ComplexReference">
            <summary>
            The Complex Placeholder - Available Triggers that can perform 
            logical actions against an object in order to retrieve an Object.
            
            These Items Modify the Base Context Object.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ReferenceTree.ComplexReference.UNINITIALIZED">
            <summary>
            Default UNINITIALIZED Value.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ReferenceTree.ComplexReference.PARENT">
            <summary>
            Returns the 'Default Owner'
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ReferenceTree.ComplexReference.PREVIOUSVERSION">
            <summary>
            Returns the Previous Version of An Object
            Usage Sample: %PREVIOUSVERSION_3.PROPERTY_0% 
            Returns the Name or Title of the Object 3 versions ago.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ReferenceTree.ComplexReference.SPECIFICVERSION">
            <summary>
            Returns a specific Version of An Object
            Usage Sample: %SPECIFICVERSION_3.PROPERTY_0% 
            Returns the Name or Title of the Object at version 3.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ReferenceTree.ComplexReference.RELATEDFROMOBJECT">
            <summary>
            Performs a call to GetRelationships( Object Type = Provided ID, Relation Type = FromThisObject ) 
            Returns the resulting Lookups collection.
            Usage Sample: %FOREACH( #{ %RELATEDFROMOBJECT_0% }, #{ This is a related object %PROPERTY_0% } )%
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ReferenceTree.ComplexReference.RELATEDTOOBJECT">
            <summary>
            Performs a call to GetRelationships( Object Type = Provided ID, Relation Type = ToThisObject ) 
            Returns the resulting Lookups collection.
            Usage Sample: %FOREACH( #{ %RELATEDTOOBJECT_0% }, #{ This is a related object %PROPERTY_0% } )%
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ReferenceTree.ComplexReference.RELATEDFROMCLASS">
            <summary>
            Performs a call to GetRelationships( Class = Provided ID, Relation Type = FromThisObject ) 
            Returns the resulting Lookups collection.
            Usage Sample: %FOREACH( #{ %RELATEDFROMCLASS_0% }, #{ This is a related object %PROPERTY_0% } )%
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ReferenceTree.ComplexReference.RELATEDTOCLASS">
            <summary>
            Performs a call to GetRelationships( Object Type = Provided ID, Relation Type = ToThisObject ) 
            Returns the resulting Lookups collection.
            Usage Sample: %FOREACH( #{ %RELATEDTOCLASS_0% }, #{ This is a related object %PROPERTY_0% } )%
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ReferenceTree.ComplexReference.RELATIONSHIPS">
            <summary>
            Performs a call to GetRelationships( Relation Type = Any ) 
            Returns all relationships.
            Usage Sample: "This object is %OBJTITLE%, with %COUNT( #{%RELATIONSHIPS%} )% related items."
            Usage Sample: "This object is %OBJTITLE%, with related items:<br/>%FOREACH( #{%RELATIONSHIPS%}, #{- %PROPERTY_0%<br/>} )%"
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.ReferenceTree.PropertyReference">
            <summary>
            The Simple Reference - Available Triggers that can perform a logical actions against an 
            object in order to retrieve an object or lookup reference.
            
            These Items Modify the Base Context Object.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ReferenceTree.PropertyReference.UNINITIALIZED">
            <summary>
            Default UNINITIALIZED Value.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ReferenceTree.PropertyReference.PROPERTY">
            <summary>
            Returns the Display Value or the Property in the Triggering Object.
            Usage Sample: This Object just is in state %PROPERTY_39%.
            Returns the workflow state for the current object.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ReferenceTree.PropertyReference.OLDPROPERTY">
            <summary>
            Returns the Display Value or the Property in the Triggering Objects Previous Version.
            Usage Sample: This Object just existed state %OLDPROPERTY_39%.
            Returns the workflow state for the version just before the current one.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.ReferenceTree.SimplePlaceholder">
            <summary>
            The Simple Placeholder - Available Triggers that can perform 
            logical actions against an object in order to retrieve a string value.
            
            These Items Do Not Modify the Base Context Object.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ReferenceTree.SimplePlaceholder.UNINITIALIZED">
            <summary>
            Default UNINITIALIZED Value.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ReferenceTree.SimplePlaceholder.TIMESTAMP">
            <summary>
            Returns the Display Value or the Property in the Triggering Object.
            Usage Sample: This Object was most recently edited at %TIMESTAMP%.
            Returns the Last Modified Display Value.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ReferenceTree.SimplePlaceholder.LASTMODIFIEDBY">
            <summary>
            Returns the Display Value or the Property in the Triggering Object.
            Usage Sample: This Object was most recently edited by %LASTMODIFIEDBY%.
            Returns the Last Modified By Display Value.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ReferenceTree.SimplePlaceholder.OBJTYPE">
            <summary>
            Returns the Object Type Name of the Triggering Object
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ReferenceTree.SimplePlaceholder.OBJTYPEID">
            <summary>
            Allows for the dynamic resolution of the current object's ObjType ID.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ReferenceTree.SimplePlaceholder.OBJID">
            <summary>
            Returns an ObjID String: Sample = "(0-1)"
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ReferenceTree.SimplePlaceholder.ID">
            <summary>
            Returns an int ID of the object
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ReferenceTree.SimplePlaceholder.OBJVER">
            <summary>
            Returns the ObjVerEx.ToString() Value.  Sample = "(0-1-6)"
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ReferenceTree.SimplePlaceholder.OBJTITLE">
            <summary>
            Returns the Object Title of the Triggering Object
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ReferenceTree.SimplePlaceholder.FILENAMES">
            <summary>
            Returns an aggregated Filename List for the files contained within an object.
            Usage Sample: This Object has the following files %FILENAMES%.
            Returns semicolon delimited filename list.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ReferenceTree.SimplePlaceholder.MFILESURL">
            <summary>
            Returns the MF-SHOW Desktop URL for an Object.
            </summary>
            <summary>
            Returns the MF-SHOW Desktop URL for an Object.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ReferenceTree.SimplePlaceholder.MFILESURL_SHOW">
            <summary>
            Returns the MF-SHOW Desktop URL for an Object.
            </summary>
            <summary>
            Returns the MF-SHOW Desktop URL for an Object.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ReferenceTree.SimplePlaceholder.MFILESURL_OPEN">
            <summary>
            Returns the MF-OPEN Desktop URL for an Object.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ReferenceTree.SimplePlaceholder.MFILESURL_VIEW">
            <summary>
            Returns the MF-VIEW Desktop URL for an Object.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ReferenceTree.SimplePlaceholder.MFILESURL_EDIT">
            <summary>
            Returns the MF-EDIT Desktop URL for an Object.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ReferenceTree.SimplePlaceholder.MFILESURL_SHOWMETADATA">
            <summary>
            Returns the MF-SHOWMETADATA Desktop URL for an Object.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ReferenceTree.SimplePlaceholder.MFILESURLTOVERSION_SHOW">
            <summary>
            Returns the MF-SHOW Desktop URL (Version Specific) for an Object.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ReferenceTree.SimplePlaceholder.MFILESURLTOVERSION_OPEN">
            <summary>
            Returns the MF-OPEN Desktop URL (Version Specific) for an Object.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ReferenceTree.SimplePlaceholder.MFILESURLTOVERSION_VIEW">
            <summary>
            Returns the MF-VIEW Desktop URL (Version Specific) for an Object.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ReferenceTree.SimplePlaceholder.MFILESURLTOVERSION_EDIT">
            <summary>
            Returns the MF-EDIT Desktop URL (Version Specific) for an Object.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ReferenceTree.SimplePlaceholder.MFILESURLTOVERSION_SHOWMETADATA">
            <summary>
            Returns the MF-SHOWMETADATA Desktop URL (Version Specific) for an Object.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ReferenceTree.SimplePlaceholder.VAULTNAME">
            <summary>
            Returns the Name of the Vault
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ReferenceTree.SimplePlaceholder.VAULTGUID">
            <summary>
            Returns the GUID of the Vault
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.ReferenceTree.ResolutionType">
            <summary>
            Specifies the value type to resolve using a <see cref="T:MFiles.VAF.Common.ReferenceTree"/>.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ReferenceTree.ResolutionType.DisplayValue">
            <summary>
            <see cref="T:System.String"/> DisplayValue(s) will be resolved.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ReferenceTree.ResolutionType.Lookups">
            <summary>
            <see cref="T:MFilesAPI.Lookups"/> values will be resolved.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.ReferenceTree.ProcessCmd">
            <summary>
            Static Command Processing Class.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.ReferenceTree.ProcessCmd.ProcessSpecialValues(System.String,System.Boolean@)">
            <summary>
            Helper method for processing DATEDIFF.
            </summary>
            <param name="toReplace">Replacement String</param>
            <param name="isSpecial">Flag denoting if this was a special date placeholder.</param>
            <returns><see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:MFiles.VAF.Common.ReferenceTree.ProcessCmd.SetDateValue(MFilesAPI.Vault,MFilesAPI.ObjVer,MFilesAPI.PropertyValues,System.Boolean,MFilesAPI.TypedValue@,System.DateTime,System.String,System.Boolean)">
            <summary>
            helper function that sets a TypedValue's Value to a date based on the resolved value.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.ReferenceTree.ProcessCmd.DateDiff(MFilesAPI.Vault,MFilesAPI.ObjVer,MFilesAPI.PropertyValues,System.Text.RegularExpressions.Match,System.Boolean)">
            <summary>
            Processes two dates to a number ( Days between the given dates ).
            </summary>
            <param name="contextProps">PropertyValues of the Target Object</param>
            <param name="contextVault">Context Vault ( often the  ModuleManager.PermenantVault )</param>
            <param name="contextObjVer">Target ObjVer</param>
            <param name="match">Placeholder <see cref="T:System.Text.RegularExpressions.Match"/></param>
            <param name="hideMissingValues">Should hidden values be shown?</param>
        </member>
        <member name="M:MFiles.VAF.Common.ReferenceTree.ProcessCmd.Count(MFilesAPI.Vault,MFilesAPI.ObjVer,MFilesAPI.PropertyValues,System.Text.RegularExpressions.Match,System.Boolean)">
            <summary>
            Processes a placeholder to its match Count string.
            </summary>
            <param name="contextProps">PropertyValues of the Target Object</param>
            <param name="contextVault">Context Vault ( often the  ModuleManager.PermenantVault )</param>
            <param name="contextObjVer">Target ObjVer</param>
            <param name="match">Placeholder <see cref="T:System.Text.RegularExpressions.Match"/></param>
            <param name="hideMissingValues">Should hidden values be shown?</param>
        </member>
        <member name="M:MFiles.VAF.Common.ReferenceTree.ProcessCmd.ForEach(MFilesAPI.Vault,MFilesAPI.ObjVer,MFilesAPI.PropertyValues,System.Text.RegularExpressions.Match,System.Boolean)">
            <summary>
            Processes a FOREACH placeholder.
            </summary>
            <param name="contextProps">PropertyValues of the Target Object</param>
            <param name="contextVault">Context Vault ( often the  ModuleManager.PermenantVault )</param>
            <param name="contextObjVer">Target ObjVer</param>
            <param name="match">Placeholder <see cref="T:System.Text.RegularExpressions.Match"/></param>
            <param name="hideMissingValues">Should hidden values be shown?</param>
        </member>
        <member name="T:MFiles.VAF.Common.ReferenceTree.RegexString">
            <summary>
            Regular Expression Values used in parsing Placeholder Strings.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ReferenceTree.RegexString.Placeholder">
            <summary>
            Extracts a Placeholder (<see cref="T:MFiles.VAF.Common.ReferenceTree.ComplexReference"/>|<see cref="T:MFiles.VAF.Common.ReferenceTree.PropertyReference"/>|<see cref="T:MFiles.VAF.Common.ReferenceTree.SimplePlaceholder"/>) 
            from a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ReferenceTree.RegexString.Alias">
            <summary>
            Extracts an Alias wrapper from a String.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ReferenceTree.RegexString.DateDiff">
            <summary>
            Parses a DateDiff placeholder from a String.
            Sample: %DATEDIFF( #{param-one}, #{param-two} )%
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ReferenceTree.RegexString.Count">
            <summary>
            Parses a Count placeholder from a String.
            Sample: %COUNT( #{param-one} )%
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ReferenceTree.RegexString.ForEach">
            <summary>
            Parses a ForEach placeholder from a String.
            Sample: %FOREACH( #{param-one}, #{param-two} )%
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ReferenceTree.RegexString.TwoParameterCommand">
            <summary>
            Two Parameter Command.
            Sample: #{param-one}, #{param-two}
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ReferenceTree.RegexString.SingleParameterCommand">
            <summary>
            Single Parameter Command.
            Sample: #{param-one}
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.ReferenceTree.MFDynamicIdentifier">
            <summary>
            Dynamic <see cref="T:MFiles.VAF.Configuration.MFIdentifier"/> resolution object, resolves MFIdentfier via <see cref="T:MFiles.VAF.Common.ReferenceTree.ComplexReference"/>'s.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ReferenceTree.MFDynamicIdentifier.propertyReference">
            <summary>
            Private <see cref="T:MFiles.VAF.Common.ReferenceTree.PropertyReference"/>.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ReferenceTree.MFDynamicIdentifier.complexReference">
            <summary>
            Private <see cref="T:MFiles.VAF.Common.ReferenceTree.ComplexReference"/>.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ReferenceTree.MFDynamicIdentifier.simplePlaceholder">
            <summary>
            Private <see cref="T:MFiles.VAF.Common.ReferenceTree.SimplePlaceholder"/>.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.ReferenceTree.MFDynamicIdentifier.SetDataTypeAndFilter(MFiles.VAF.Common.ReferenceTree.SimplePlaceholder)">
            <summary>
            Overload for <see cref="T:MFiles.VAF.Common.ReferenceTree.SimplePlaceholder"/>.
            </summary>
            <param name="sp"><see cref="T:MFiles.VAF.Common.ReferenceTree.SimplePlaceholder"/></param>
        </member>
        <member name="M:MFiles.VAF.Common.ReferenceTree.MFDynamicIdentifier.SetDataTypeAndFilter(MFiles.VAF.Common.ReferenceTree.ComplexReference)">
            <summary>
            Overload for <see cref="T:MFiles.VAF.Common.ReferenceTree.ComplexReference"/>.
            </summary>
            <param name="cr"><see cref="T:MFiles.VAF.Common.ReferenceTree.ComplexReference"/></param>
        </member>
        <member name="M:MFiles.VAF.Common.ReferenceTree.MFDynamicIdentifier.SetDataTypeAndFilter(MFilesAPI.Vault,MFiles.VAF.Common.ReferenceTree.PropertyReference)">
            <summary>
            Overload for <see cref="T:MFiles.VAF.Common.ReferenceTree.PropertyReference"/>.
            </summary>
            <param name="vault">Vault</param>
            <param name="pr"><see cref="T:MFiles.VAF.Common.ReferenceTree.PropertyReference"/></param>
        </member>
        <member name="M:MFiles.VAF.Common.ReferenceTree.MFDynamicIdentifier.op_Implicit(MFiles.VAF.Common.ReferenceTree.MFDynamicIdentifier)~MFilesAPI.MFDataType">
            <summary>
            Implicit conversion to <see cref="T:MFilesAPI.MFDataType"/>.
            </summary>
            <param name="dynamicIdentifier"></param>
        </member>
        <member name="M:MFiles.VAF.Common.ReferenceTree.MFDynamicIdentifier.#ctor(MFilesAPI.Vault,MFiles.VAF.Common.ReferenceTree.PropertyReference,System.String,System.Boolean)">
            <summary>
            <see cref="T:MFiles.VAF.Common.ReferenceTree.PropertyReference"/> Constructor.
            </summary>
            <param name="vault"><see cref="P:MFiles.VAF.Common.ReferenceTree.Vault"/> Reference</param>
            <param name="propertyReference">Parsed <see cref="F:MFiles.VAF.Common.ReferenceTree.MFDynamicIdentifier.propertyReference"/></param>
            <param name="placeholder">Complex Placeholder to resolve.</param>
            <param name="hideMissingValues">Should hidden values be shown?</param>
        </member>
        <member name="M:MFiles.VAF.Common.ReferenceTree.MFDynamicIdentifier.#ctor(MFiles.VAF.Common.ReferenceTree.ComplexReference,System.String,System.Boolean)">
            <summary>
            <see cref="T:MFiles.VAF.Common.ReferenceTree.ComplexReference"/> Constructor.
            </summary>
            <param name="complexReference">Parsed <see cref="T:MFiles.VAF.Common.ReferenceTree.ComplexReference"/></param>
            <param name="placeholder">Complex Placeholder to resolve.</param>
            <param name="hideMissingValues">Should hidden values be shown?</param>
        </member>
        <member name="M:MFiles.VAF.Common.ReferenceTree.MFDynamicIdentifier.#ctor(MFiles.VAF.Common.ReferenceTree.SimplePlaceholder,System.String,System.Boolean)">
            <summary>
            <see cref="T:MFiles.VAF.Common.ReferenceTree.SimplePlaceholder"/> Constructor.
            </summary>
            <param name="simplePlaceholder">Parsed <see cref="T:MFiles.VAF.Common.ReferenceTree.SimplePlaceholder"/></param>
            <param name="placeholder">Complex Placeholder to resolve.</param>
            <param name="hideMissingValues">Should hidden values be shown?</param>
        </member>
        <member name="M:MFiles.VAF.Common.ReferenceTree.MFDynamicIdentifier.ResolveText(MFilesAPI.Vault,MFilesAPI.ObjVer,MFilesAPI.PropertyValues,MFiles.VAF.Common.ReferenceTree.SimplePlaceholder)">
            <summary>
            This method will attempt to resolve an <see cref="T:MFiles.VAF.Configuration.MFIdentifier"/> by processing the simple text placeholder.
            </summary>
            <param name="vault">Permanent Vault</param>
            <param name="objVer">ObjVer of the Context Object</param>
            <param name="contextProps">PropertyValues Collection of the Context Object</param>
            <param name="cmd"><see cref="T:MFiles.VAF.Common.ReferenceTree.SimplePlaceholder"/></param>
            <returns>Resolved Text</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ReferenceTree.MFDynamicIdentifier.ResolvePropertyReference(MFilesAPI.Vault,MFilesAPI.ObjVer,MFilesAPI.PropertyValues,MFiles.VAF.Common.ReferenceTree.PropertyReference)">
            <summary>
            This method will attempt to resolve an <see cref="T:MFiles.VAF.Configuration.MFIdentifier"/> by processing the simple reference placeholder.
            </summary>
            <param name="vault">Permanent Vault</param>
            <param name="objVer">ObjVer of the Context Object</param>
            <param name="contextProps">PropertyValues Collection of the Context Object</param>
            <param name="cmd"><see cref="T:MFiles.VAF.Common.ReferenceTree.PropertyReference"/></param>
            <returns>Resolves to a <see cref="T:MFilesAPI.PropertyValue"/></returns>
        </member>
        <member name="M:MFiles.VAF.Common.ReferenceTree.MFDynamicIdentifier.ResolveComplexReference(MFilesAPI.Vault,MFilesAPI.ObjVer,MFilesAPI.PropertyValues,MFiles.VAF.Common.ReferenceTree.ComplexReference)">
            <summary>
            This method will attempt to resolve an <see cref="T:MFiles.VAF.Configuration.MFIdentifier"/> by processing the complex reference placeholder.
            </summary>
            <param name="vault">Permanent Vault</param>
            <param name="objVer">ObjVer of the Context Object</param>
            <param name="contextProps">PropertyValues Collection of the Context Object</param>
            <param name="ph"><see cref="T:MFiles.VAF.Common.ReferenceTree.ComplexReference"/></param>
            <returns><see cref="T:MFilesAPI.Lookup"/></returns>
        </member>
        <member name="M:MFiles.VAF.Common.ReferenceTree.MFDynamicIdentifier.Resolve(MFilesAPI.Vault,MFilesAPI.ObjVer,MFilesAPI.PropertyValues)">
            <summary>
            Dynamic Type Resolver.
            </summary>
            <param name="vault">Permanent Vault</param>
            <param name="objVer">ObjVer the Context Object</param>
            <param name="contextProps">PropertyValues Collection of the Context Object</param>
            <returns>Dynamic <see cref="T:System.Type"/></returns>
        </member>
        <member name="M:MFiles.VAF.Common.ReferenceTree.MFDynamicIdentifier.ToString">
            <summary>
            Returns this instance of Alias value, if not avail, returns string of ID.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ReferenceTree.MFDynamicIdentifier.PlaceholderString">
            <summary>
            <see cref="T:MFiles.VAF.Common.ReferenceTree.ComplexReference"/> String.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ReferenceTree.MFDynamicIdentifier.HideMissingValues">
            <summary>
            When true, shows hidden values... otherwise respects hidden display values.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ReferenceTree.MFDynamicIdentifier.IsReference">
            <summary>
            True when this object is a dynamic reference.
            False when the value is a non-lookup type.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ReferenceTree.MFDynamicIdentifier.Filter">
            <summary>
            Filter ID.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ReferenceTree.MFDynamicIdentifier.HasFilter">
            <summary>
            Has Filter Flag.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ReferenceTree.MFDynamicIdentifier.DataType">
            <summary>
            Identifier Datatype.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.ReferenceTree.TreeMap">
            <summary>
            <see cref="T:MFiles.VAF.Common.ReferenceTree.TreeMap"/> <see cref="T:MFiles.VAF.Configuration.MFIdentifier"/> Collection Class.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.ReferenceTree.TreeMap.Parse(MFilesAPI.Vault,MFiles.VAF.Configuration.MFIdentifier[],System.Boolean)">
            <summary>
            Parses a <see cref="T:MFiles.VAF.Configuration.MFIdentifier"/> array into a <see cref="T:MFiles.VAF.Common.ReferenceTree.TreeMap"/>.
            </summary>
            <param name="vault"><see cref="P:MFiles.VAF.Common.ReferenceTree.Vault"/>.</param>
            <param name="ids"><see cref="T:MFiles.VAF.Configuration.MFIdentifier"/> Array </param>
            <returns><see cref="T:MFiles.VAF.Common.ReferenceTree.TreeMap"/>.</returns>
            <param name="hideMissingValues">Should hidden values be shown?</param>
        </member>
        <member name="M:MFiles.VAF.Common.ReferenceTree.TreeMap.ParseID(MFilesAPI.Vault,System.String,System.Boolean)">
            <summary>
            Single Tree Map Parser.
            </summary>
            <param name="vault">Vault Reference, used in alias resolution.</param>
            <param name="treeMapString">Reference Tree Map String</param>
            <param name="hideMissingValues">Should hidden values be shown?</param>
            <returns><see cref="T:MFiles.VAF.Common.ReferenceTree.TreeMap"/></returns>
        </member>
        <member name="M:MFiles.VAF.Common.ReferenceTree.TreeMap.ParseIDs(MFilesAPI.Vault,System.String,System.Boolean)">
            <summary>
            Multi Tree Map Parser.
            </summary>
            <param name="vault">Vault Reference</param>
            <param name="value">Multi Tree Map String</param>
            <param name="hideMissingValue">Should hidden values be shown?</param>
            <returns>Collection of <see cref="T:MFiles.VAF.Common.ReferenceTree.TreeMap"/></returns>
        </member>
        <member name="M:MFiles.VAF.Common.ReferenceTree.TreeMap.IsLast(MFiles.VAF.Common.ReferenceTree.MFDynamicIdentifier)">
            <summary>
            Boolean flag to determine if this is the last item in the collection.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.ReferenceTree.TreeMap.#ctor">
            <summary>
            Default List Initializing Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.ReferenceTree.TreeMap.#ctor(System.Collections.Generic.IEnumerable{MFiles.VAF.Common.ReferenceTree.MFDynamicIdentifier})">
            <summary>
            Constructor Overload, allowing the Ids to be specified.
            </summary>
            <param name="ids"></param>
        </member>
        <member name="M:MFiles.VAF.Common.ReferenceTree.TreeMap.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:MFiles.VAF.Common.ReferenceTree.TreeMap.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:MFiles.VAF.Common.ReferenceTree.TreeMap.Add(MFiles.VAF.Common.ReferenceTree.MFDynamicIdentifier)">
            <summary>
            Private Collection Modifier: Add.
            </summary>
            <param name="id"><see cref="T:MFiles.VAF.Configuration.MFIdentifier"/> to add.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ReferenceTree.TreeMap.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="P:MFiles.VAF.Common.ReferenceTree.TreeMap.Ids">
            <summary>
            <see cref="T:MFiles.VAF.Common.ReferenceTree.MFDynamicIdentifier"/> Collection.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ReferenceTree.TreeMap.PlaceholderString">
            <summary>
            Placeholder String being parsed.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ReferenceTree.TreeMap.First">
            <summary>
            Returns the First <see cref="T:MFiles.VAF.Configuration.MFIdentifier"/> in the Map.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ReferenceTree.TreeMap.NextMap">
            <summary>
            Returns the Next Map: This Map, without the first index.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.ReferenceTree.ReferenceTreeBranch">
            <summary>
            Contains Nested[ Depth ], Tree Branch <see cref="T:MFiles.VAF.Common.ReferenceTree"/> Information.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.ReferenceTree.ReferenceTreeBranch.#ctor(MFilesAPI.Vault,MFilesAPI.ObjVer,MFilesAPI.PropertyValues,MFiles.VAF.Common.ReferenceTree,System.Int32,MFiles.VAF.Common.ReferenceTree.ResolutionType,MFiles.VAF.Common.ReferenceTree.TreeMap)">
            <summary>
            Async <see cref="T:MFiles.VAF.Common.ReferenceTree.ReferenceTreeBranch"/> Constructor.
            </summary>
            <param name="vault">Permanent Vault</param>
            <param name="objVer">ObjVer of the Context Object</param>
            <param name="contextProps">PropertyValues Collection of the Context Object</param>
            <param name="parent">Parent <see cref="T:MFiles.VAF.Common.ReferenceTree"/></param>
            <param name="nestingDepth">Depth at this level</param>
            <param name="type"><see cref="T:MFiles.VAF.Common.ReferenceTree.ResolutionType"/> - Object Reference or Display Value</param>
            <param name="map">Map for this depth. ( Same as Parent, without the first index )</param>
        </member>
        <member name="M:MFiles.VAF.Common.ReferenceTree.ReferenceTreeBranch.PushMatchesUpTree">
            <summary>
            Pushes matches up the <see cref="T:MFiles.VAF.Common.ReferenceTree"/>.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.ReferenceTree.ReferenceTreeBranch.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="P:MFiles.VAF.Common.ReferenceTree.ReferenceTreeBranch.Parent">
            <summary>
            Parent <see cref="T:MFiles.VAF.Common.ReferenceTree"/>. Could also be a 
            <see cref="T:MFiles.VAF.Common.ReferenceTree.ReferenceTreeBranch"/>, for depths 2 and greater.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.StringExtensions">
            <summary>
            Provides Generic String Extensions.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.StringExtensions.HasValue(System.String)">
            <summary>
            Syntactical sugar for a string null or whitespace check.
            </summary>
            <param name="s"></param>
            <returns>True when the string has a value.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.StringExtensions.TakeAfter(System.String,System.Char)">
            <summary>
            Variation on the Substring function. Take After a specified character.
            </summary>
            <param name="s">String to parse</param>
            <param name="c">character to use as the substring index</param>
            <returns>Sub String</returns>
        </member>
        <member name="M:MFiles.VAF.Common.StringExtensions.TakeBefore(System.String,System.Char)">
            <summary>
            Variation on the Substring function. Take Before a specified character.
            </summary>
            <param name="s">String to parse</param>
            <param name="c">character to use as the substring index</param>
            <returns>Sub String</returns>
        </member>
        <member name="T:MFiles.VAF.Common.MFConfigurationAttribute">
            <summary>
            Attribute for marking the configuration objects.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.MFConfigurationAttribute.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="configNamespace">The configuration storage namespace.</param>
            <param name="configKey">The configuration storage key.</param>
        </member>
        <member name="M:MFiles.VAF.Common.MFConfigurationAttribute.Load``1(MFilesAPI.Vault,``0,MFiles.VAF.Configuration.IConfigurationStorage)">
            <summary>
            Loads the configuration from the configuration storage.
            </summary>
            <typeparam name="T">The configuration object's type.</typeparam>
            <param name="vault">The vault object.</param>
            <param name="original">The (possibly prefilled) existing object that will be populated. Can be null in which case a new instance will be created.</param>
            <param name="storage">The configuration storage object.</param>
            <returns>The populated original or new object depending whether the original was given in the first place.</returns>
        </member>
        <member name="P:MFiles.VAF.Common.MFConfigurationAttribute.ConfigNamespace">
            <summary>
            The configuration storage namespace.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.MFConfigurationAttribute.ConfigKey">
            <summary>
            The configuration storage key in the defined namespace.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.IStateTransitionAttribute">
            <summary>
            Common interface for state handlers attributes.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.IStateTransitionAttribute.MatchesEnvironment(MFiles.VAF.Common.IStateTransitionEnvironment)">
            <summary>
            MatchesEnvironment is a method that is used in evaluating the calling context against the provided filters.
            </summary>
            <param name="context">The environment object to check.</param>
            <returns>True if the filters are fulfilled and the handler should be called.</returns>
        </member>
        <member name="T:MFiles.VAF.Common.StateTransitionAttribute">
            <summary>
            Allows methods to be specified as event handler delegates.
            If these attributes match a certain event environment, the attached method will be executed.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.ScriptAttributeBase">
            <summary>
            Common VAF Attribute base class.
            If these attributes match a certain environment, the attached method will be executed.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ScriptAttributeBase.objectTypeIdentifier">
            <summary>
            Internal MFIdentifier of the ObjectType.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.ScriptAttributeBase.classIdentifier">
            <summary>
            Internal MFIdentifier version of the Class.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.ScriptAttributeBase.#ctor">
            <summary>
            Creates a new instance of this attribute.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ScriptAttributeBase.Priority">
            <summary>
            The event handling priority. The highest priority handlers receive the event first. Large number indicates a high priority. 0 is the default value.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ScriptAttributeBase.ObjectType">
            <summary>
            The object type to which the method is bound.
            (All object types assumed if not specified.)
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ScriptAttributeBase.Class">
            <summary>
            The objects of a specific class to which the method is bound.
            (All classes assumed if not specified.)
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.StateTransitionAttribute.MatchesEnvironment(MFiles.VAF.Common.IStateTransitionEnvironment)">
            <summary>
            MatchesEnvironment checks the method filters against the current event context and determines if the handler should be called.
            </summary>
            <param name="context">The state context object.</param>
            <returns>Returns true if the handler method should be called.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.StateTransitionAttribute.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="stateTransitionAlias">Alias of the state transition where the handler method decorated with this attribute should be attached to.</param>
        </member>
        <member name="P:MFiles.VAF.Common.StateTransitionAttribute.StateTransition">
            <summary>
            The state transition identifier where the method containing this attribute should be attached.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.AutomaticStateTransitionTriggerAttribute">
            <summary>
            Attribute for marking the automatic state transition conditions evaluation handlers.
            Handler signature: delegate bool AutomaticStateTransitionTriggerMethod( StateEnvironment environment, out int nextState )
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.AutomaticStateTransitionTriggerAttribute.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="stateTransitionAlias">Alias of the state transition where the automatic state transition trigger evaluation handler should be attached to.</param>
        </member>
        <member name="T:MFiles.VAF.Common.LookupsExtensionMethods">
            <summary>
            Defines convenience methods for the Lookups interface.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.LookupsExtensionMethods.ToObjVerExs(MFilesAPI.Lookups,MFilesAPI.Vault)">
            <summary>
            Converts a Lookups Collection to a List of ObjVerEx.
            </summary>
            <param name="lookups">Lookups to Convert</param>
            <param name="vault">Vault Reference</param>
            <returns>List of ObjVerEx</returns>
        </member>
        <member name="M:MFiles.VAF.Common.LookupsExtensionMethods.AddRange(MFilesAPI.Lookups,System.Collections.Generic.IEnumerable{MFilesAPI.Lookup})">
            <summary>
            Adds all Lookups in a range to an existing Lookups collection .
            </summary>
            <param name="lookups">Existing Lookups</param>
            <param name="range">Range of Lookups to Add</param>
            <returns>Existing Collection, for method chaining</returns>
        </member>
        <member name="M:MFiles.VAF.Common.LookupsExtensionMethods.AddRange(MFilesAPI.Lookups,MFilesAPI.Lookups)">
            <summary>
            Adds all Lookups in a range to an existing Lookups collection .
            </summary>
            <param name="lookups">Existing Lookups</param>
            <param name="range">Range of Lookups to Add</param>
            <returns>Existing Collection, for method chaining</returns>
        </member>
        <member name="M:MFiles.VAF.Common.LookupsExtensionMethods.IsEqual(MFilesAPI.Lookups,MFilesAPI.Lookups,MFiles.VAF.Common.EqualityCompareOptions)">
            <summary>
            Determines if the passed lookups contains all the same items as this one.
            </summary>
            <param name="lookups">The source lookups object.</param>
            <param name="otherLookups">The lookups object to compare the source with.</param>
            <param name="options">The equality comparison options.</param>
            <returns>True if the source lookups object, and other lookups object have the same items.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.LookupsExtensionMethods.Intersects(MFilesAPI.Lookups,MFilesAPI.Lookups)">
            <summary>
            Determines if the passed lookup has any items that are also in this one.
            Does not take into account the version information.
            </summary>
            <param name="lookups">The source lookups object.</param>
            <param name="otherLookups">The lookups object to compare the source with.</param>
            <returns>True if the source lookups object, has any items that are in the other lookups object.</returns>
        </member>
        <member name="T:MFiles.VAF.Common.MFFileHelper">
            <summary>
            Utility methods for file handling in M-Files.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.MFFileHelper.ObjectFilesToSourceFiles(MFilesAPI.Vault,MFiles.VAF.Common.ObjVerEx)">
            <summary>
            Turns the object files of the passed ObjVerEx into a SourceFiles collection
            by downloading the files to a temporary location.
            </summary>
            <param name="vault">The vault in which the files reside.</param>
            <param name="objVerEx">The a reference to the object's whose files to download.</param>
            <returns>
             SourceObjectFiles object where the downloaded file locations 
             are set as the SourceFilePath of each source file.
             </returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFFileHelper.ObjectFilesToSourceFiles(MFilesAPI.Vault,MFilesAPI.ObjectVersion)">
            <summary>
            Turns the object files of the passed version into a SourceFiles collection
            by downloading the files to a temporary location.
            </summary>
            <param name="vault">The vault in which the files reside.</param>
            <param name="objectVersion">The object's whose files to download.</param>
            <returns>
             SourceObjectFiles object where the downloaded file locations 
             are set as the SourceFilePath of each source file.
             </returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFFileHelper.ObjectFilesToSourceFiles(MFilesAPI.Vault,MFilesAPI.ObjectFiles)">
            <summary>
            Turns an ObjectFiles collection into a SourceFiles collection
            by downloading the files to a temporary location.
            </summary>
            <param name="vault">The vault in which the files resides.</param>
            <param name="files">The list of files to download.</param>
            <returns>
             SourceObjectFiles object where the downloaded file locations 
             are set as the SourceFilePath of each source file. The caller is responsible in deleting the files.
             </returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFFileHelper.DeleteSourceFiles(MFilesAPI.SourceObjectFiles)">
            <summary>
            Deletes all source files in a source file collection.
            </summary>
            <param name="sourceFiles">The SourceObjectFiles object whose source files should be deleted.</param>
        </member>
        <member name="T:MFiles.VAF.Common.MFPropertyValuesBuilder">
            <summary>
            Provides chainable convenience methods for defining a new object's properties.
            Allows properties passed as aliases, by looking up the correct IDs.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.MFPropertyValuesBuilder.#ctor(MFilesAPI.Vault)">
            <summary>
            Creates a new instance with an empty PropertyValues collection. 
            </summary>
            <param name="vault">The vault in which the property values will be stored.</param>
        </member>
        <member name="M:MFiles.VAF.Common.MFPropertyValuesBuilder.#ctor(MFilesAPI.Vault,MFilesAPI.PropertyValues)">
            <summary>
            Creates a new instance that wraps a copy of the passed property values.
            </summary>
            <param name="vault">The vault in which the property values will be stored.</param>
            <param name="values">The base values from which to start.</param>
        </member>
        <member name="M:MFiles.VAF.Common.MFPropertyValuesBuilder.Add(System.Object,MFilesAPI.MFDataType,System.Object)">
            <summary>
            Adds a property value to the list.
            </summary>
            <param name="prop">A reference to the propertyDef of the PropertyValue.</param>
            <param name="dataType">The datatype of the PropertyValue</param>
            <param name="value">The value of the PropertyValue</param>
            <returns>The MFPropertyValuesBuilder object - for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFPropertyValuesBuilder.Add(MFilesAPI.PropertyValue)">
            <summary>
            Adds a property value to the list.
            </summary>
            <param name="propVal">The propertyValue to add.</param>
            <returns>The MFPropertyValuesBuilder object - for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFPropertyValuesBuilder.Add(System.Object,MFilesAPI.TypedValue)">
            <summary>
            Adds a property value to the list.
            </summary>
            <param name="prop">A reference to the propertyDef of the PropertyValue.</param>
            <param name="value">The value of the PropertyValue</param>
            <returns>The MFPropertyValuesBuilder object - for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFPropertyValuesBuilder.CopyFrom(MFilesAPI.PropertyValues,System.Object[])">
            <summary>
            Copies a set of property values to this set.
            </summary>
            <param name="propVals">A list of propertyValues from which to copy property values</param>
            <param name="props">A list of the propertyDefs whose propertyValues should be copied.</param>
            <returns>The MFPropertyValuesBuilder object - for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFPropertyValuesBuilder.CopyFrom(MFiles.VAF.Common.ObjVerEx,System.Object[])">
            <summary>
            Copies a set of property values from the passed object to this set of property values.
            </summary>
            <param name="objVerEx">The object from whose propertyValues should be copied.</param>
            <param name="props">A list of the propertyDefs whose propertyValues should be copied.</param>
            <returns>The MFPropertyValuesBuilder object - for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFPropertyValuesBuilder.Remove(System.Object)">
            <summary>
            Removes the specified property value.
            </summary>
            <param name="prop">A reference to the PropertyDef, whose propetyValue will be removed.</param>
            <returns>The MFPropertyValuesBuilder object - for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFPropertyValuesBuilder.AddLookup(System.Object,System.Object)">
            <summary>
            Adds a lookup to the passed propertyvalue. Creating it if it doesn't already exist.
            </summary>
            <param name="prop">A reference to the propertyDef of the PropertyValue.</param>
            <param name="item">A reference to the item to add to the propertyValue</param>
            <returns>The MFPropertyValuesBuilder object - for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFPropertyValuesBuilder.AddLookup(System.Object,MFilesAPI.ObjVer,System.Boolean)">
            <summary>
            Adds a lookup to the passed propertyvalue. Creating it if it doesn't already exist.
            </summary>
            <param name="prop">A reference to the propertyDef of the PropertyValue.</param>
            <param name="item">A reference to the item to add to the propertyValue</param>
            <param name="exactVersion">
              Indicates whether the exact version of the 
              item should be used or if -1 (latest) should be used as the version..
            </param>
            <returns>The MFPropertyValuesBuilder object - for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFPropertyValuesBuilder.SetLookup(System.Object,System.Int32,System.Int32)">
            <summary>
             Sets a porperty to contain one lookup value. Creating it if it doesn't already exist.
             Works on both SSLU and MSLU, and optionally allows the specific version to be specified.
            </summary>
            <param name="prop">A reference to the propertyDef of the PropertyValue.</param>
            <param name="item">A reference to the item to set to the propertyValue</param>
            <param name="version">The version that the lookup should reference.</param>
            <returns>The MFPropertyValuesBuilder object - for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFPropertyValuesBuilder.SetLookup(System.Object,MFilesAPI.ObjVer,System.Boolean)">
            <summary>
             Sets a porperty to contain one lookup value. Creating it if it doesn't already exist.
             Works on both SSLU and MSLU, and optionally allows the specific version to be specified.
            </summary>
            <param name="prop">A reference to the propertyDef of the PropertyValue.</param>
            <param name="item">A reference to the item to set to the propertyValue</param>
            <param name="exactVersion">
              Indicates whether the exact version of the 
              item should be used or if -1 (latest) should be used as the version..
            </param>
            <returns>The MFPropertyValuesBuilder object - for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFPropertyValuesBuilder.SetLookup(System.Object,System.Object)">
            <summary>
             Sets a porperty to contain one lookup value. Creating it if it doesn't already exist.
             Works on both SSLU and MSLU.
            </summary>
            <param name="prop">A reference to the propertyDef of the PropertyValue.</param>
            <param name="item">A reference to the item to set to the propertyValue</param>
            <returns>The MFPropertyValuesBuilder object - for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFPropertyValuesBuilder.RemoveLookup(System.Object,System.Object)">
            <summary>
            Removes a lookup value from a particular property, if set.
            </summary>
            <param name="prop">A reference to the propertyDef, whose value should have the passed lookup removed.</param>
            <param name="item">A reference to the item to be removed.</param>
            <returns>The MFPropertyValuesBuilder object - for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFPropertyValuesBuilder.SetTitle(System.String,System.Object)">
            <summary>
            Sets the default title property, and also optionally the custom one defined in a class.
            </summary>
            <param name="title">The title to be set.</param>
            <param name="forClass">OPtional class reference, so that the class specific title property can also be set.</param>
            <returns>The MFPropertyValuesBuilder object - for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFPropertyValuesBuilder.SetClass(System.Object)">
            <summary>
            Sets the class property.
            </summary>
            <param name="value">A reference to the class.</param>
            <returns>The MFPropertyValuesBuilder object - for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFPropertyValuesBuilder.SetSFD(System.Boolean)">
            <summary>
            Sets the SingleFileDocument property.
            </summary>
            <param name="sfd">The value for the single file document.</param>
            <returns>The MFPropertyValuesBuilder object - for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFPropertyValuesBuilder.SetWorkflowState(System.Object,System.Object)">
            <summary>
            Sets the workflow and state properties.
            </summary>
            <param name="workflow">A reference to the workflow to to be set. If null, the workflow is resolved from the passed state.</param>
            <param name="state">A reference to the state to be set. If null, the first state of the workflow is used.</param>
            <returns>The MFPropertyValuesBuilder object - for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFPropertyValuesBuilder.RemoveSystemProperties">
            <summary>
            Removes all the built-in properties.
            
            Properties to remove:
            
            MFBuiltInPropertyDefCreated,
            MFBuiltInPropertyDefCreatedBy,
            MFBuiltInPropertyDefLastModified,
            MFBuiltInPropertyDefLastModifiedBy,
            MFBuiltInPropertyDefStatusChanged,
            MFBuiltInPropertyDefSizeOnServerThisVersion,
            MFBuiltInPropertyDefSizeOnServerAllVersions,
            MFBuiltInPropertyDefStateEntered,
            MFBuiltInPropertyDefObjectChanged
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.MFPropertyValuesBuilder.Vault">
            <summary>
            The vault to which the property values will be saved.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.MFPropertyValuesBuilder.Values">
            <summary>
            The propertyValues that this object wraps.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.MFPropertyValuesBuilder.HumanReadable">
            <summary>
            A human readable string of the set property values.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.MFSearchBuilder">
            <summary>
            Provides a chainable SearchConditions wrapper with convenience methods.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.MFSearchBuilder.#ctor(MFilesAPI.Vault,System.String)">
            <summary>
            Creates a new instance wrapping a SearchConditions created from the passed string.
            </summary>
            <param name="vault">The vault to search.</param>
            <param name="conditions">Initial search conditions</param>
        </member>
        <member name="M:MFiles.VAF.Common.MFSearchBuilder.#ctor(MFilesAPI.Vault,MFilesAPI.SearchConditions)">
            <summary>
            Creates a new instance wrapping a copy of the passed SearchConditions.
            </summary>
            <param name="vault">The vault to search.</param>
            <param name="conditions">Initial search conditions</param>
        </member>
        <member name="M:MFiles.VAF.Common.MFSearchBuilder.#ctor(MFilesAPI.Vault)">
            <summary>
            Creates a new instance wrapping an empty SearchConditions object.
            </summary>
            <param name="vault">The vault to search.</param>
        </member>
        <member name="M:MFiles.VAF.Common.MFSearchBuilder.Property(System.Object,MFilesAPI.MFDataType,System.Object)">
            <summary>
            Adds a property based, 'equal' search condition.
            </summary>
            <param name="property">The propertyDef of the condition.</param>
            <param name="dataType">The datatype of the value.</param>
            <param name="value">The value to search for.</param>
            <returns>The MFSearchBuilder object, for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFSearchBuilder.Property(System.Object,MFilesAPI.TypedValue)">
            <summary>
            Adds a property based, 'equal' search condition.
            </summary>
            <param name="property">The propertyDef to of the condition.</param>
            <param name="value">The value to search for.</param>
            <returns>The MFSearchBuilder object, for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFSearchBuilder.PropertyNot(System.Object,MFilesAPI.MFDataType,System.Object)">
            <summary>
            Adds a property based, 'not equal' search condition.
            </summary>
            <param name="property">The propertyDef of the condition.</param>
            <param name="dataType">The datatype of the value.</param>
            <param name="value">The value to exclude from the results.</param>
            <returns>The MFSearchBuilder object, for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFSearchBuilder.PropertyNotMissing(System.Object)">
            <summary>
            Adds a property based search condition to check if the property value is not missing.
            </summary>
            <param name="property">The propertyDef to of the condition.</param>
            <returns>The MFSearchBuilder object, for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFSearchBuilder.Status(MFilesAPI.MFStatusType,MFilesAPI.MFDataType,System.Object)">
            <summary>
            Adds a status based, 'equal' search condition.
            </summary>
            <param name="sType">The status type.</param>
            <param name="dType">The data type.</param>
            <param name="v">The status value to search for.</param>
            <returns>The MFSearchBuilder object, for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFSearchBuilder.StatusNot(MFilesAPI.MFStatusType,MFilesAPI.MFDataType,System.Object)">
            <summary>
            Adds a status based, 'not equal' search condition.
            </summary>
            <param name="sType">The status type.</param>
            <param name="dType">The data type.</param>
            <param name="v">The status value to exclude from the search results.</param>
            <returns>The MFSearchBuilder object, for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFSearchBuilder.References(System.Object,System.Object)">
            <summary>
            Sets a reverse reference search condition. (Result.Property = item.ID)
            </summary>
            <param name="property">The property in which the passed object should exist.</param>
            <param name="item">A reference to an object.</param>
            <returns>The MFSearchBuilder object, for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFSearchBuilder.References(System.Object,MFilesAPI.ObjVer)">
            <summary>
            Sets a reverse reference search condition that targets an exact object version with a property
            </summary>
            <param name="property">The property in which the passed object should exist.</param>
            <param name="objver">A reference to an object.</param>
            <returns>The MFSearchBuilder object, for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFSearchBuilder.ReferencesWithAnyProperty(System.Object)">
            <summary>
            Sets an any property reference search condition.
            </summary>
            <param name="item">A reference to an object (any version of the object).</param>
            <returns>The MFSearchBuilder object, for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFSearchBuilder.ReferencesWithAnyProperty(MFilesAPI.ObjVer)">
            <summary>
            Sets a reverse reference search condition that targets an exact object version with any property.
            </summary>
            <param name="objver">A reference to an object, exact version.</param>
            <returns>The MFSearchBuilder object, for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFSearchBuilder.ObjType(System.Object)">
            <summary>
            Adds an ObjectType condition.
            </summary>
            <param name="objType">A reference to the object Types that should be included in the results.</param>
            <returns>The MFSearchBuilder object, for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFSearchBuilder.Object(System.Object)">
            <summary>
            Add an ObjectID condition.
            </summary>
            <param name="id">A reference to an object to find.</param>
            <returns>The MFSearchBuilder object, for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFSearchBuilder.NotObject(System.Object)">
            <summary>
            Creates a condition that excludes an object by it's ID.
            </summary>
            <param name="id">A reference to an object to exclude from the search.</param>
            <returns>The MFSearchBuilder object, for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFSearchBuilder.Class(System.Object)">
            <summary>
            Creates a condition for a specific class.
            </summary>
            <param name="objClass">A reference to the class to search for.</param>
            <returns>The MFSearchBuilder object, for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFSearchBuilder.Deleted(System.Boolean)">
            <summary>
            Creates a deleted condition.
            </summary>
            <param name="deleted">Indicates the deleted status to search for.</param>
            <returns>The MFSearchBuilder object, for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFSearchBuilder.Record(System.Boolean)">
            <summary>
            Creates a condition for the record property.
            </summary>
            <param name="record">Indicates the record property value to search for.</param>
            <returns>The MFSearchBuilder object, for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFSearchBuilder.Find(MFilesAPI.MFSearchFlags,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Executes an object search in the vault with the current conditions.
            </summary>
            <param name="searchFlags">Search flags for the search operation.</param>
            <param name="sort">Indicates whether the results should be sorted by the server.</param>
            <param name="maxResults">The maximum number of results to return (0 means unlimited)</param>
            <param name="searchTimeoutInSeconds">The timeout in seconds for the search operation (0 means infinite).</param>
            <returns>The results of the search.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFSearchBuilder.FindEx(MFilesAPI.MFSearchFlags,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Executes an object search in the vault with the current conditions,
            wrapping each result as an ObjVerEx object.
            </summary>
            <param name="searchFlags">Search flags for the search operation.</param>
            <param name="sort">Indicates whether the results should be sorted by the server.</param>
            <param name="maxResults">The maximum number of results to return (0 means unlimited)</param>
            <param name="searchTimeoutInSeconds">The timeout in seconds for the search operation (0 means infinite).</param>
            <returns>The results of the search, with the found ObjectVersions wrapped as ObjVerEx objects.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFSearchBuilder.FindOneEx(MFilesAPI.MFSearchFlags,System.Int32)">
            <summary>
            Executes an object search in the vault with the current conditions,
            and returning the first result wrapped as an ObjVerEx object.
            </summary>
            <param name="searchFlags">Search flags for the search operation.</param>
            <param name="searchTimeoutInSeconds">The timeout in seconds for the search operation (0 means infinite).</param>
            <returns>The first result wrapped as an ObjVerEx object.</returns>
        </member>
        <member name="P:MFiles.VAF.Common.MFSearchBuilder.Vault">
            <summary>
            The vault to which these search conditions apply.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.MFSearchBuilder.Conditions">
            <summary>
            The SearchConditions that this object wraps.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.MFSearchBuilder.HumanReadable">
            <summary>
            A human readable string representing the set conditions.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.MFSearchBuilder.FilterString">
            <summary>
            Quick access to a string version of the search conditions. Primarily for debugging.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.NotFoundException">
            <summary>
            A generic 'Not found' exception. This is .NET replacement for the E_MFILES_NOT_FOUND error.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.NotFoundException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.MFUtilsConstants">
            <summary>
            Format strings used by MFUtils.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.MFUtils">
            <summary>
            Provides some common utility methods for M-Files operations.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.MFUtils.DefaultClassPropertyDefs">
            <summary>
            List of properties included automatically as associated property defs in all classes.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.MFUtils.ToLookups(System.Collections.Generic.List{MFiles.VAF.Common.ObjVerEx})">
            <summary>
            Collection Extension to convert a List of <see cref="T:MFiles.VAF.Common.ObjVerEx"/> to a <see cref="T:MFilesAPI.Lookups"/> collection.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.MFUtils.AddUnique``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Collection Extension to Ensure items added to a collection are unique
            </summary>
            <typeparam name="T">Collection Type</typeparam>
            <param name="self">Destination Collection</param>
            <param name="items">Collection to Add</param>
        </member>
        <member name="M:MFiles.VAF.Common.MFUtils.AddUnique``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Collection Extension to Ensure items added to a collection are unique
            </summary>
            <typeparam name="T">Collection Type</typeparam>
            <param name="self">Destination Collection</param>
            <param name="item">Item to Add</param>
        </member>
        <member name="M:MFiles.VAF.Common.MFUtils.IsValidEmail(System.String)">
            <summary>
            Email Address Validator.
            </summary>
            <param name="email">Email to validate</param>
            <returns>Is Valid => True of False</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFUtils.IsValidGuid(System.String)">
            <summary>
            Indicates whether the passed string is a valid M-Files formatted GUID.
            
            {00000000-0000-0000-0000-000000000000}
            
            </summary>
            <param name="guid">A guid string.</param>
            <returns>True if the string has the correct format, false otherwise.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFUtils.ObjIDString(MFilesAPI.ObjID)">
            <summary>
            Converts an ObjID into human readable, and code-parseable string.
            </summary>
            <param name="objID">The source ObjID object.</param>
            <returns>A string representation of the ObjID.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFUtils.IsObjIDString(System.String)">
            <summary>
            Indicates if the passed string matches a valid ObjID format.
            </summary>
            <param name="objIDString">A string representation of an ObjID</param>
            <returns>True if the string has the correct format, false otherwise.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFUtils.ParseObjIDString(System.String)">
            <summary>
            Parses a string into an ObjID object.
            </summary>
            <param name="objIDString">A string representation of an ObjID.</param>
            <returns>The corresponding ObjID object</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFUtils.ObjVerString(MFilesAPI.ObjVer)">
            <summary>
            Converts an ObjVer into human readable, and code-parseable string.
            </summary>
            <param name="objVer">The source ObjVer object.</param>
            <returns>A string representation of the ObjVer.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFUtils.IsObjVerString(System.String)">
            <summary>
            Indicates if the passed string matches a valid ObjVer format.
            </summary>
            <param name="objVerString">A string representation of an ObjVer.</param>
            <returns>True if the string has the correct format, false otherwise.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFUtils.ParseObjVerString(System.String)">
            <summary>
            Parses a string into an ObjVer object.
            </summary>
            <param name="objVerString">A string representation of an ObjVer.</param>
            <returns>The corresponding ObjVer object.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFUtils.GetWorkflowIDByState(MFilesAPI.Vault,MFiles.VAF.Configuration.MFIdentifier)">
            <summary>
            Finds a state's workflow.
            </summary>
            <param name="vault">The vault in which the state exists.</param>
            <param name="state">A reference to the state.</param>
            <returns>The id of the workflow which the passed state belongs to.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFUtils.GetWorkflowIDByTransition(MFilesAPI.Vault,MFiles.VAF.Configuration.MFIdentifier)">
            <summary>
            Finds a transition's workflow.
            </summary>
            <param name="vault">The vault in which the transition exists.</param>
            <param name="transition">A reference to the transition.</param>
            <returns>The id of the workflow which the passed transition belongs to.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFUtils.GetFirstWorkflowState(MFilesAPI.Vault,MFiles.VAF.Configuration.MFIdentifier)">
            <summary>
            Gets the first workflow state defined by a workflow.
            </summary>
            <param name="vault">The vault in which the workflow resides.</param>
            <param name="workflow">A reference to the workflow</param>
            <returns>The ID of the first workflow state defined in the passed workflow.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFUtils.GetStateAdmin(MFilesAPI.Vault,MFiles.VAF.Configuration.MFIdentifier)">
            <summary>
            Retrieves the StateAdmin object for a state.
            </summary>
            <param name="vault">The vault in which the state resides</param>
            <param name="state">A reference to the state.</param>
            <returns>The StateAdmin object of the passed state.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFUtils.GetStateActionSetPropertyValue(MFilesAPI.StateAdmin,System.Int32)">
            <summary>
            Retrieves the Property value of a State action for specific property if it 
            exists. Returns null if property or action set properties not found.
            </summary>
            <param name="state">StateAdmin object of the specific state</param>
            <param name="propID">ID of the property definition as an integer</param>
            <returns>TypedValue object of the value. If nothing found, returns null.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFUtils.SetTransactionVariable(MFilesAPI.Vault,MFilesAPI.MFNamedValueType,System.String,System.String,System.Object)">
            <summary>
            Sets a value to the named value storage.
            </summary>
            <param name="vault">Target vault.</param>
            <param name="confValue">Named value type.</param>
            <param name="confNamespace">Named value namespace.</param>
            <param name="name">Value key.</param>
            <param name="value">Value content.</param>
        </member>
        <member name="M:MFiles.VAF.Common.MFUtils.TryGetTransactionVariable(MFilesAPI.Vault,MFilesAPI.MFNamedValueType,System.String,System.String,System.Object@)">
            <summary>
            Gets a specific value from the named value storage.
            </summary>
            <param name="vault">Target vault.</param>
            <param name="confValue">Named value type.</param>
            <param name="confNamespace">Named value namespace.</param>
            <param name="name">Value key.</param>
            <param name="value">Value content.</param>
            <returns>Indication if value was found.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFUtils.GetTransactionVariables(MFilesAPI.Vault,MFilesAPI.MFNamedValueType,System.String)">
            <summary>
            Gets all values from a specific named value storage namespace.
            </summary>
            <param name="vault">Target vault.</param>
            <param name="confValue">Named value type.</param>
            <param name="confNamespace">Named value namespace.</param>
            <returns>Indication if value was found.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFUtils.ClearTransactionVariable(MFilesAPI.Vault,MFilesAPI.MFNamedValueType,System.String,System.String)">
            <summary>
            Removes a key from the named value storage.
            </summary>
            <param name="vault">Target vault.</param>
            <param name="confValue">Named value type.</param>
            <param name="confNamespace">Named value namespace.</param>
            <param name="name">Value key.</param>
        </member>
        <member name="M:MFiles.VAF.Common.MFUtils.IsMFilesNotFoundError(System.Exception)">
            <summary>
            Checks if the exception is a 'not found' error.
            </summary>
            <param name="exception">The exception that should be checked.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFUtils.IsMFilesAlreadyExistsError(System.Exception)">
            <summary>
            Checks if the Exception is a M-Files 'already exists' error.
            </summary>
            <param name="exception">The COMException that should be checked.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFUtils.IsMFilesObjectLockedError(System.Exception)">
            <summary>
            Checks if the COMException is an 'Object Locked' error.
            </summary>
            <param name="exception">The COMException that should be checked.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFUtils.IsMFilesAccessDeniedError(System.Exception)">
            <summary>
            Checks if the COMException is an 'Object Locked' error.
            </summary>
            <param name="exception">The COMException that should be checked.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFUtils.IsAlreadyCheckedOutError(System.Exception)">
            <summary>
            Checks if the Exception is an 'Already checked out' error.
            </summary>
            <param name="exception">The Exception that should be checked.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFUtils.IsRetryableMFilesLockError(System.Exception)">
            <summary>
            Resolves if the error is a locking error that may be resolved by retrying the operation.
            </summary>
            <param name="exception">The exception to check.</param>
            <returns>True if the error represents an error that may be prevented by retrying the M-Files operation.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFUtils.ConvertToLocalVault(MFilesAPI.Vault,System.Boolean)">
            <summary>
            Converts the vault object to locally used and possibly stored vault object. This method allows the
            implementations to improve the performance by using in-process vault. 
            </summary>
            <param name="vault">The vault object.</param>
            <param name="prepareForPersisting">True to enable keep-alive timer.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFUtils.IsMSSQLServerErrorCode(System.String,System.Int32)">
            <summary>
             Resolves if the error string represents certain SQL server error.
            </summary>
            <param name="errors">The error as string.</param>
            <param name="codeToTest">The SQL server error code to test.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFUtils.RemoveWhitespace(System.String)">
            <summary>
            Removes all white spaces from the given string.
            </summary>
            <param name="input">The input string.</param>
            <returns>The string without the whitespace characters.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFUtils.AddWeekDays(System.DateTime,System.Int32)">
            <summary>
            Adds number of requested week days to current day and returns it.
            </summary>
            <param name="startDate">The period start date.</param>
            <param name="interval">The number of business days to add to the start date.</param>
            <returns>The period end date.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFUtils.IsAtleast(MFilesAPI.MFilesVersion,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Return true if this version is at least the given separate version number
            in branch-specific manner (requires major and minor to match exactly).
            </summary>
            <param name="version">Version to check and compare.</param>
            <param name="major">Major version, exact match.</param>
            <param name="minor">Minor version, exact match.</param>
            <param name="build">Build version, >= comparison.</param>
            <param name="patch">Patch version, >= comparison.</param>
            <returns>The version is at least the given numbers version.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFUtils.IsValidLicenseStatus(MFilesAPI.MFApplicationLicenseStatus)">
            <summary>
            Return true if given license status is for valid license.
            </summary>
            <param name="status">Status to check.</param>
            <returns>True for valid, trial and grace.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFUtils.ToAliasArray(MFilesAPI.SemanticAliases)">
            <summary>
            Helper used for parsing the semantic aliases string into an string array of aliases.
            </summary>
            <param name="aliases">The semantic alias string to parse.</param>
            <returns>A string array of aliases.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFUtils.GetLoadableTypes(System.Reflection.Assembly)">
            <summary>
            Get all loadable types from an assembly.
            </summary>
            <param name="assembly">Assembly</param>
            <returns>Gets all loadable types in the assembly.</returns>
        </member>
        <member name="T:MFiles.VAF.Common.ObjIDExtensionMethods">
            <summary>
            Extension methods for the ObjID object.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.ObjIDExtensionMethods.ToString(MFilesAPI.ObjID)">
            <summary>
            Converts an ObjID into human readable, and code-parseable string.
            </summary>
            <param name="objID">The source ObjID object.</param>
            <returns>A string represenation of the ObjID.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjIDExtensionMethods.ToTuple(MFilesAPI.ObjID)">
            <summary>
            Converts an ObjID into a tuple that can be compared.
            </summary>
            <param name="objID"></param>
            <returns></returns>
        </member>
        <member name="T:MFiles.VAF.Common.ObjVerChanges">
            <summary>
            Resolves the property changes between an object, and its previous version.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerChanges.#ctor(MFiles.VAF.Common.ObjVerEx)">
            <summary>
            Constructor. Creates a new instance of this class.
            </summary>
            <param name="currentVersion">The latest version of an object, whose properties will be checked for changes.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerChanges.#ctor(MFiles.VAF.Common.ObjVerEx,MFiles.VAF.Common.ObjVerEx)">
            <summary>
            Constructor. Creates a new instance of this class.
            </summary>
            <param name="laterVersion">The newer version of an object, whose properties will be checked for changes.</param>
            <param name="olderVersion">The older version of the object.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerChanges.HasChanged(System.Object[])">
            <summary>
            Indicates whether the passed any of the passed properties 
            have changed since the previous version.
            </summary>
            <param name="props">The propertyDefs whose values should be checked for changes.</param>
            <returns>True if any of the passed property values has changed.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerChanges.detectPropertyChanges">
            <summary>
            Classifies all property changes since the previous version.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerChanges.NewVersion">
            <summary>
            The current version of the object.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerChanges.Vault">
            <summary>
            The vault in which this object and it's versions reside.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerChanges.OldVersion">
            <summary>
            The previous version of the object (if it exists).
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerChanges.Changed">
            <summary>
            Properties that have changed between versions.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.ObjVerEx">
            <summary>
            Wraps an ObjVer object and vault, and provides convenience methods.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.#ctor">
            <summary>
            Default constructor which is used in ObjVerEx spoofing.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.#ctor(MFilesAPI.Vault,MFilesAPI.Lookup)">
            <summary>
            Creates a new ObjVerEx Object from a Lookup.
            </summary>
            <param name="vault">The vault where the M-Files object exists.</param>
            <param name="lookup">Lookup representing the M-Files object.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.#ctor(MFilesAPI.Vault,MFilesAPI.ObjectVersion)">
            <summary>
            Creates a new ObjVerEx Object from an ObjectVersion.
            </summary>
            <param name="vault">The vault where the M-Files object exists.</param>
            <param name="versionInfo">ObjectVersion representing the M-Files object.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.#ctor(MFilesAPI.Vault,MFilesAPI.ObjectVersion,MFilesAPI.PropertyValues)">
            <summary>
            Creates a new ObjVerEx Object from an ObjectVersion.
            </summary>
            <param name="vault">The vault where the M-Files object exists.</param>
            <param name="versionInfo">The object version details.</param>
            <param name="properties">The properties for the object version.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.#ctor(MFilesAPI.Vault,MFilesAPI.ObjectVersionAndProperties)">
            <summary>
            Creates a new ObjVerEx Object from an ObjectVersionAndProperties object.
            </summary>
            <param name="vault">The vault where the M-Files object exists.</param>
            <param name="ovap">ObjectVersionAndProperties representing the M-Files object.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.#ctor(MFilesAPI.Vault,MFilesAPI.ObjVer)">
            <summary>
            Creates a new ObjVerEx Object from an ObjVer.
            </summary>
            <param name="vault">The vault where the M-Files object exists.</param>
            <param name="objVer">ObjVer representing the M-Files object.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.#ctor(MFilesAPI.Vault,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new ObjVerEx Object.
            </summary>
            <param name="vault">The vault where the M-Files object exists.</param>
            <param name="objType">The object type of the M-Files object.</param>
            <param name="id">The id of the M-Files object.</param>
            <param name="version">The version of the M-Files object.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.Relationships(MFilesAPI.MFRelationshipsMode)">
            <summary>
            Returns related object references.
            </summary>
            <param name="mode"><see cref="T:MFilesAPI.MFRelationshipsMode"/> - Default = MFRelationshipsModeAll</param>
            <returns>Collection of <see cref="T:MFiles.VAF.Common.ObjVerEx"/></returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.RelationshipsAsLookups(MFilesAPI.MFRelationshipsMode)">
            <summary>
            Returns related object references as <see cref="T:MFilesAPI.Lookups"/>.
            </summary>
            <param name="mode"><see cref="T:MFilesAPI.MFRelationshipsMode"/> - Default = MFRelationshipsModeAll</param>
            <returns><see cref="T:MFilesAPI.Lookups"/></returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.MFilesURL(System.Boolean,MFilesAPI.MFilesURLType,MFiles.VAF.Common.UrlTargetPlatform)">
            <summary>
            Generates an M-Files URL via the given params.
            </summary>
            <param name="specificVersion">Indicates whether the link should point to the specific version or the latest.</param>
            <param name="urlType">The URL behavior.</param>
            <param name="platform">The platform for which the URL should be created.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.IsType(System.Object)">
            <summary>
            Checks if the passed object type reference matches this object.
            </summary>
            <param name="objType">A reference to an objType.</param>
            <returns>True, if the object is of the type passed.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.HasClass(System.Object)">
            <summary>
            Checks if the passed class reference matches this object.
            </summary>
            <param name="classRef">A reference to a class.</param>
            <returns>True, if the object is of the class passed.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.HasProperty(System.Object)">
            <summary>
            Checks whether an object has a specific property.
            </summary>
            <param name="prop">A reference to the PropertyDef to look for.</param>
            <returns>Returns true if the property was found.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.HasValue(System.Object)">
            <summary>
            Checks whether an object has a specific property and it's value is not null.
            </summary>
            <param name="prop">A reference to the PropertyDef to look for.</param>
            <returns>Returns true if the property was found.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.HasPropertyFlag(System.Object,System.Boolean)">
            <summary>
            Checks whether an object has a specific boolean property and it is true.
            </summary>
            <param name="prop">A reference to the PropertyDef.</param>
            <param name="defaultValue">The value to return, if no value is explicitly set.</param>
            <returns>
             Returns the defaultValue if the property was not found, 
             if it was not boolean, or was not set to true.
            </returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.GetProperty(System.Object)">
            <summary>
            Returns the specified object property if found.
            </summary>
            <param name="prop">The PropertyDef id of the property to look for.</param>
            <returns>Returns null if not found.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.GetPropertyText(System.Object)">
            <summary>
            Returns the text representation of the property value.
            </summary>
            <param name="prop">The PropertyDef id of the property to look for.</param>
            <returns>Returns null if not found.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.GetLookupID(System.Object)">
            <summary>
            Returns the lookup id of a Lookup propertyValue in the PropertyValue collection.
            </summary>
            <param name="prop">A reference to the property whose lookup should be returned.</param>
            <returns>The id of the lookup if found, -1 otherwise.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.GetLookups(System.Object)">
            <summary>
            Returns the property's value as a lookups collection.
            </summary>
            <param name="prop">A reference to a Lookup based property.</param>
            <returns>The lookups value of the property. Empty lookups object if property was not found.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.TryGetProperty(System.Object,MFilesAPI.PropertyValue@)">
            <summary>
            Attempts to retrieve the specified PropertyValue in the PropertyValue collection.
            </summary>
            <param name="prop">A reference to the property.</param>
            <param name="propVal">The property value if found.</param>
            <returns>True if a property value was found, and the propVal value was set.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.SetProperty(System.Object,MFilesAPI.MFDataType,System.Object)">
            <summary>
            Adds or updates the specified PropertyValue in the PropertyValue collection.
            </summary>
            <param name="prop">A reference to the property.</param>
            <param name="dataType">Datatype of the value/property.</param>
            <param name="value">The value to set for the property.</param>
            <returns>The ProperyValue added to the object.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.SetProperty(MFilesAPI.PropertyValue)">
            <summary>
            Adds or updates the specified PropertyValue in the PropertyValue collection.
            </summary>
            <param name="propVal">The property value to add to the object.</param>
            <returns>The actual ProperyValue added to the object.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.RemoveProperty(System.Object)">
            <summary>
            Removes the specified PropertyValue from the PropertyValue collection. 
            </summary>
            <param name="prop">A reference to the property to remove.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.SetLookup(System.Object,System.Object)">
            <summary>
            Sets the passed lookup item as the only value of  specified property in the PropertyValue collection. 
            </summary>
            <param name="prop">The propertyValue to set the lookup to.</param>
            <param name="item">A value reference to set the lookup value to.</param>
            <returns>The updated PropertyValue.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.HasLookup(System.Object,System.Object)">
            <summary>
            Determines if the referenced item is present in the referenced property.
            </summary>
            <param name="prop">The propertyValue to check for the lookup.</param>
            <param name="item">A value reference to the lookup.</param>
            <returns>True if the item is present in the property's lookups.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.AddLookup(System.Object,System.Object)">
            <summary>
            Adds a lookup item to the specified property in the PropertyValue collection. 
            Adding the property to the object if it doesn't already exist.
            </summary>
            <param name="prop">The propertyValue to add the lookup to.</param>
            <param name="item">A value reference to set the lookup value to.</param>
            <returns>True if the PropertyValue was updated.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.AddLookup(System.Object,MFilesAPI.ObjVer,System.Boolean)">
            <summary>
            Adds a lookup to the passed <see cref="T:MFilesAPI.PropertyValue"/>. Creating it if it doesn't already exist.
            </summary>
            <param name="prop">The propertyValue to add the lookup to</param>
            <param name="item">The objVer to set the lookup to</param>
            <param name="exactVersion">Indicates whether the exact version info should be used from the ObVer object.</param>
            <returns>True if the PropertyValue was updated.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.RemoveLookup(System.Object,System.Object)">
            <summary>
            Removes a lookup item from the specified property in the PropertyValue collection.
            </summary>
            <param name="prop">A reference to a lookup based property.</param>
            <param name="item">The item to remove from the PropertyValue lookups.</param>
            <returns>True if the item was removed from the properties lookups. False if the property or item was not found.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.SetWorkflowState(System.Object,System.Object)">
            <summary>
            Sets workflow and state values for the object.
            </summary>
            <param name="workflow">A reference to the workflow to set.</param>
            <param name="state">A reference to the state to set.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.SetWorkflowStateTransition(System.Object,System.String)">
            <summary>
            Sets the workflow state transition for the object. Requires that the object already has a workflow.
            </summary>
            <param name="transition">A reference to the transition to set.</param>
            <param name="comment">A version comment to set.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.GetDirectReference(System.Object)">
            <summary>
            Returns the first non-deleted and non-destroyed object reference found in the given lookup based property.
            </summary>
            <param name="prop">A reference to the property that holds a certain object reference.</param>
            <returns>An ObjVerEx wrapped reference to existing object resolved via the passed property.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.GetDirectReferences(System.Object)">
            <summary>
            Returns the all references to non-deleted and non-destroyed objects found in the given lookup based property.
            </summary>
            <param name="prop">A reference to the property that holds a certain object references.</param>
            <returns>An ObjVerEx wrapped list of existing objects resolved via the passed property.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.GetAllDirectReferences(System.Object)">
            <summary>
            Gets all the direct references found in the given lookup-based property.
            </summary>
            <param name="prop"></param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.GetDirectReferences(System.Object,System.Boolean,System.Boolean)">
            <summary>
            Gets all the direct references found in the given lookup-based property.
            </summary>
            <param name="prop"></param>
            <param name="includeDeletedItems">True to include deleted items.</param>
            <param name="preLoad">
             Indicates whether the returned objects should be preloaded 
             with the ObjectVersion and Properties.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.GetLookupsFromProperty(System.Object)">
            <summary>
            Gets all the object lookups from a lookup based property.
            </summary>
            <param name="prop"></param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.GetIndirectReferences(MFiles.VAF.Configuration.MFIdentifier,MFiles.VAF.Configuration.MFIdentifier,MFiles.VAF.Configuration.MFIdentifier)">
            <summary>
            Returns a set of objects that reference this one.
            </summary>
            <param name="prop">
            The property through which items must reference this objVer. If not passed the related items can
            reference the target objVer via any property.
            </param>
            <param name="objType"> The object type of the indirect references to return </param>
            <param name="objClass"> The class of the indirect references to return </param>
            <returns> </returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.SaveProperty(System.Object,MFilesAPI.MFDataType,System.Object)">
            <summary>
            Saves the specific property immediately.
            </summary>
            <param name="prop">A reference to the property</param>
            <param name="dataType">The datatype of the value.</param>
            <param name="value">The value to save for the property.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.SaveProperty(MFilesAPI.PropertyValue)">
            <summary>
            Saves the specific property immediately.
            </summary>
            <param name="value">The saved property value</param>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.SaveProperties(MFilesAPI.PropertyValues)">
            <summary>
            Saves all properties as they currently are set, or the ones passed.
            </summary>
            <param name="properties">
            Specific property values to set on the object (optional).
            If set, all updates to the internal propertyValues will be overwritten.
            If not set, updates to the internal propertyValues will be saved.
            </param>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.HasMatchingValues(MFilesAPI.PropertyValues,System.Object[])">
            <summary>
            Indicates whether the specified properties in the passed PropertyValue collection have values
            that match in this object. If any of the property values cannot be resolved for either object
            there is never a match.
            
            When comparing lookups, versions in a lookup and the order of the lookups are meaningful.
            </summary>
            <param name="propVals">A set of property values to compare.</param>
            <param name="props">References to properties whose value should be compared.</param>
            <returns>True if all the passed properties have values that match those in this object.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.CheckOut">
            <summary>
            Checks out the object. 
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.CheckIn(System.String,System.Int32)">
            <summary>
            Checks in the object. 
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.AssertCheckedOut">
            <summary>
            Asserts that the object is checked out. Throws an exception if it isn't. 
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.StartRequireCheckedOut">
            <summary>
            Checks out the object if it isn't already.
            
            Should be paired with the EndRequireCheckedOut() call when an operation
            requiring the object to be checked out is complete.  The return value of this
            method should be the first parameter of EndRequireCheckedOut().
            
            </summary>
            <returns>True, if object was not previously checked out, but is now.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.EndRequireCheckedOut(System.Boolean,System.Int32)">
            <summary>
            Checks in the object if it was previously checked out by StartRequireCheckedOut().
            </summary>
            <param name="start">The value obtained from StartRequireCheckedOut(). If true, the object will be checked in.</param>
            <param name="user">The modified by user to be set when checking in the object.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.Rollback(System.Int32,System.String)">
            <summary>
            Rolls back the object to a previous version, adding optional comment.
            </summary>
            <param name="version">The version to rollback to.</param>
            <param name="comment">The version comment for the rollback.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.Delete">
            <summary>
            Deletes the underlying M-Files object.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.Destroy">
            <summary>
            Destroys the underlying M-Files object.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.ForceUndoCheckout">
            <summary>
            Forces the undo CheckOut operation.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.SetModifiedBy(System.Int32)">
            <summary>
            Updates the last modified by property for the object.
            (Assumes the object is checked out)
            </summary>
            <param name="userID">The id of the user who will appear as the modifier.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.SetCreatedBy(System.Int32)">
            <summary>
            Updates the created by property for the object.
            (Assumes the object is checked out)
            </summary>
            <param name="userID">The id of the user who will appear as the creator.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.CanCurrentUserRead(MFilesAPI.SessionInfo)">
            <summary>
            Indicates whether the passed user can see the object.
            </summary>
            <param name="sessionInfo"></param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.CanCurrentUserDelete(MFilesAPI.SessionInfo)">
            <summary>
            Indicates whether the passed user can delete this object version.
            </summary>
            <param name="sessionInfo"></param>
            <returns>True if the user can delete this version, otherwise.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.CanCurrentUserEdit(MFilesAPI.SessionInfo)">
            <summary>
            Indicates whether the passed user can edit this object version.
            </summary>
            <param name="sessionInfo"></param>
            <returns>True if the user can edit this version, otherwise.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.ReplaceFiles(MFilesAPI.SourceObjectFiles)">
            <summary>
            Replaces the object's existing files with the ones passed.
            Does not change the objects single file value.
            </summary>
            <param name="files">The new files.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.ExpandPlaceholders(System.String,MFiles.VAF.Placeholders.PlaceholderTemplateSettings)">
            <summary>
            Expands a placeholder template text with this object as the context.
            </summary>
            <param name="text">A string containing placeholders that should be replaced.</param>
            <param name="settings">The settings that control parse and expansion behavior.</param>
            <returns>The results of the expansion</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.ExpandPlaceholderText(System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns a string with M-Files placeholders replaced with values.
            Supports ReferenceTree Syntax.
            </summary>
            <param name="text">A string containing placeholders that should be replaced.</param>
            <param name="hideMissingValues">
            Indicates whether placeholders should be left as they are if the object doesn't have a
            property referenced by a placeholder, instead of being replaced by an empty string.
            If set to false, format string can be passed to multiple objects.
            </param>
            <param name="useClientNumberFormat">When true, any custom defined number format will be used.</param>
            <returns>Expanded Text</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.ExpandReferenceTree(System.String,System.Boolean)">
            <summary>
            Returns a list of <see cref="T:MFiles.VAF.Common.ObjVerEx"/> from M-Files placeholders referencing Real Objects.
            Supports: id number and {alias} referencing.
            </summary>
            <param name="text">A string containing placeholders that should be used to resolve an object reference.</param>
            <param name="hideMissingValues">
            Indicates whether placeholders should be left as they are if the object doesn't have a
            property referenced by a placeholder, instead of being replaced by an empty string.
            If set to false, format string can be passed to multiple objects.
            </param>
            <returns><see cref="T:MFilesAPI.Lookups"/> Collection</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.ExpandReferenceTreesAsLookup(System.String,System.Boolean)">
            <summary>
            Returns a <see cref="T:MFiles.VAF.Common.ObjVerEx"/> from an M-Files placeholder.
            Supports: id number and {alias} referencing.
            </summary>
            <param name="text">A string containing placeholders that should be used to resolve reference(s) in a vault.</param>
            <param name="hideMissingValues">
            Indicates whether placeholders should be left as they are if the object doesn't have a
            property referenced by a placeholder, instead of being replaced by an empty string.
            If set to false, format string can be passed to multiple objects.
            </param>
            <returns><see cref="T:MFilesAPI.Lookup"/></returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.ToLookup">
            <summary>
            Returns a <see cref="T:MFilesAPI.Lookup"/> representation of this <see cref="T:MFiles.VAF.Common.ObjVerEx"/>.
            </summary>
            <returns><see cref="T:MFilesAPI.Lookup"/> representation of this <see cref="T:MFiles.VAF.Common.ObjVerEx"/></returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.ToString">
            <summary>
            Returns a string representation of the object version.
            </summary>
            <returns>String representation of the object "(ObjType-ID-Version)"</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.ToString(System.Boolean)">
            <summary>
            Returns a string representation of the object version.
            </summary>
            <param name="humanReadable">If true, it will add the object title to the output.</param>
            <returns>String representation of the object "(ObjType-ID-Version)"</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.GetHashCode">
            <summary>
            Overrides hash code method for efficient use in HashSets.
            </summary>
            <returns>The id of the object.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.Equals(System.Object)">
            <summary>
            Overrides generic equals function.
            </summary>
            <returns>Return true if object is an ObjVerEx and the type, id, and version match.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.Equals(MFiles.VAF.Common.ObjVerEx)">
            <summary>
            Overrides type specific equals function.
            </summary>
            <returns>Return true if object type, id, and version match.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.Equals(MFiles.VAF.Common.ObjVerEx,System.Boolean)">
            <summary>
            Compares to the other ObjVerEx with the option of leaving the
            version information out of the comparison.
            </summary>
            <param name="other">Compared ObjVerEx.</param>
            <param name="ignoreVersion">Flag indicating whether version should be not used when comparing.</param>
            <returns>True if the objects are a match respect to the arguments.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.EnsureLoaded">
            <summary>
            Fetches the object data and properties from server if they are not fetched yet.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.LoadFullHistory">
            <summary>
            Loads the objects full history enusuring each version has its properties and history loaded
            and is properly previous-version chained.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.Refresh">
            <summary>
            Updates the ObjVerEx to the latest version on the server.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.Latest(MFilesAPI.Vault,MFilesAPI.ObjID)">
            <summary>
            Returns an ObjVerEx object pointing to the latest version of the M-Files object.
            </summary>
            <param name="vault">The vault in which the object exists.</param>
            <param name="objID">The ObjID of the object.</param>
            <returns>The new ObjVerEx object.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.Latest(MFilesAPI.Vault,System.Guid)">
            <summary>
            Returns an ObjVerEx object pointing to the latest version of the M-Files object.
            </summary>
            <param name="vault">The vault in which the object exists.</param>
            <param name="guid">The GUID of the object.</param>
            <returns>The new ObjVerEx object.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.Parse(MFilesAPI.Vault,System.String)">
            <summary>
            Loads an ObjVerEx object based on a ObjID or ObjVer string representation
            </summary>
            <param name="vault">The vault in which the object exists.</param>
            <param name="s">The string to be parsed.</param>
            <returns>The new ObjVerEx object.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.TryParse(MFilesAPI.Vault,System.String,MFiles.VAF.Common.ObjVerEx@)">
            <summary>
            Tries to loads an ObjVerEx object based on a ObjID or ObjVer string representation
            </summary>
            <param name="vault">The vault in which the object exists.</param>
            <param name="s">The string to be parsed.</param>
            <param name="objVerEx">Set to the ObjVerEx object if successful.</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.RefreshAll(System.Collections.Generic.IEnumerable{MFiles.VAF.Common.ObjVerEx})">
            <summary>
            Efficiently refreshes multiple objVerExs at one time.
            </summary>
            <param name="objVerExs"></param>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.EnsureAllLoaded(System.Collections.Generic.IEnumerable{MFiles.VAF.Common.ObjVerEx},System.Boolean)">
            <summary>
            Loads or reloads the Info (ObjectVersion) and Properties of multiple ObjVerExs with a single server call.
            </summary>
            <param name="objVerExs">The objVerExs to refresh.</param>
            <param name="allowMissing">Indicates whether missing object versions will cause an error, or simply not load.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.Update(MFilesAPI.ObjectVersionAndProperties)">
            <summary>
            Updates some cached data within this object.
            </summary>
            <param name="ovap">New object version details.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.Update(MFilesAPI.ObjectVersion)">
            <summary>
            Updates some cached data within this object.
            </summary>
            <param name="versionInfo">New object version details.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.GetLookupText(MFilesAPI.PropertyDef,MFilesAPI.Lookup)">
            <summary>
            Resolves hidden text in a lookup item.
            </summary>
            <param name="propDef">The property def in which the lookup is stored.</param>
            <param name="lookup">The lookup to resolve the text for.</param>
            <returns>The text value of the lookup.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerEx.GetValueListPropertyDef(System.Object)">
            <summary>
            Returns a PropertyDef that matches the given object. Throws ArgumentExceptions if property id was not resolved
            or the property definition was not based on a value list.
            </summary>
            <param name="prop">Resolvable object</param>
            <returns>PropertyDef</returns>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerEx.Vault">
            <summary>
            Returns the vault in which this object resides.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerEx.ObjVer">
            <summary>
            Returns the ObjVer of this object.
            </summary>
            <remarks>
            Accessing this property will automatically resolve the latest version from the server
            if the value was initialized as -1.  Use the SpecificVersion property to determine,
            if Version is set to -1 without making a server call.
            If the version is -1, SpecificVersion will be false.
            </remarks>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerEx.ObjID">
            <summary>
            Returns the ObjID of this object.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerEx.Type">
            <summary>
            Returns the Type of this object.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerEx.ID">
            <summary>
            Returns the ID of this object.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerEx.Version">
            <summary>
            Returns the Version of this object.
            </summary>
            <remarks>
            Accessing this property will automatically resolve the latest version from the server
            if the value was initialized as -1.  Use the SpecificVersion property to determine,
            if Version is set to -1 without making a server call.
            If the version is -1, SpecificVersion will be false.
            </remarks>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerEx.SpecificVersion">
            <summary>
            Returns whether specific version information is available, or if this ObjVerEx refers to the latest.
            Note: Accessing the Version property will automatically lookup the latest version.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerEx.Title">
            <summary>
            The title of this object version.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerEx.Info">
            <summary>
            Returns the version information associated with this ObjVer.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerEx.Properties">
            <summary>
            Returns the properties associated with this ObjVer.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerEx.Class">
            <summary>
            Returns the object's class ID.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerEx.Workflow">
            <summary>
            Returns the object's workflow. -1 if not set.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerEx.State">
            <summary>
            Returns the object's state. -1 if not set.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerEx.IsEnteringState">
            <summary>
            Determines if the object is entering the current state... IE. it is unique from the previous state.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerEx.IsTemplate">
            <summary>
            Indicates whether this object is an M-Files template.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerEx.IsPromoted">
            <summary>
            Indicates wheter this object is promoted from external source.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerEx.IsRecord">
            <summary>
            Indicates whether this object is a M-Files Record.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerEx.IsDeleted">
            <summary>
            Indicates whether the object is deleted.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerEx.IsDestroyed">
            <summary>
            Indicates whether the object version has been destroyed.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerEx.History">
            <summary>
            Retrieves the history of this object, with each version wrapped as an ObjVerEx object.
            Also ensures the order of the object is from newest to oldest.
            Includes all versions, including the called instance.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerEx.PreviousVersion">
            <summary>
            The previous version of this object.
            Will fetch the properties and info of the previous version, as well.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerEx.CanModify">
            <summary>
            Determines if this version can be modified.
            Specifically determines if this is the latest
            version, and is not checked out, or is checked out to this user.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerEx.IsFirstVersion">
            <summary>
            Determines whether this object version is the first of the object.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerEx.Permissions">
            <summary>
            Returns this object version's permissions.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerEx.ACL">
            <summary>
            Returns this object version's ACL.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerEx.IsLatestVersion">
            <summary>
            Returns a boolean indicating whether the object is of the
            latest version.
            </summary>
            <remarks>
            This method always makes a call to the server to verify if the latest version on 
            the server matches this version.
            </remarks>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerEx.Exists">
            <summary>
            Determines if the object exists in the vault (not deleted, destroyed, nor unresolvable).
            Tries to be more efficient and safe than calling IsDeleted and IsDestroyed separately.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerEx.IsLoaded">
            <summary>
            Indicates whether both the Info (ObjectVersion) and Properties have been loaded in this wrapper.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ObjVerEx.VersionComment">
            <summary>
            The version comment.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.ObjVerExCollectionExtensionMethods">
            <summary>
            Provides extension methods for collections of ObjVerExs.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerExCollectionExtensionMethods.EnsureAllLoaded(System.Collections.Generic.IEnumerable{MFiles.VAF.Common.ObjVerEx},System.Boolean)">
            <summary>
            Loads or reloads the Info (ObjectVersion) and Properties of multiple ObjVerExs with a single server call.
            </summary>
            <param name="objVerExs">The objVerExs which should be loaded.</param>
            <param name="allowMissing">Indicates whether missing object versions will cause an error, or simply not load.</param>
        </member>
        <member name="M:MFiles.VAF.Common.ObjVerExCollectionExtensionMethods.RefreshAll(System.Collections.Generic.IEnumerable{MFiles.VAF.Common.ObjVerEx})">
            <summary>
            Efficiently refreshes multiple objVerExs at one time.
            </summary>
            <param name="objVerExs">The objVerExs to refresh.</param>
        </member>
        <member name="T:MFiles.VAF.Common.PropertyValueChangeType">
            <summary>
            Indicates the type of property change between versions of an object.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.PropertyValueChangeType.None">
            <summary>
            No property change.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.PropertyValueChangeType.Added">
            <summary>
            The property value was added.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.PropertyValueChangeType.Modified">
            <summary>
            The property value was modified.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.PropertyValueChangeType.Removed">
            <summary>
            The property value was removed.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.PropertyValueChange">
            <summary>
            Defines a changed property value between object versions.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.PropertyValueChange.#ctor(MFilesAPI.PropertyValue,MFilesAPI.PropertyValue)">
            <summary>
            Constructor. Creates a new instance of this class.
            </summary>
            <param name="oldValue">The previous property value, if any.</param>
            <param name="newValue">The current value, if any.</param>
        </member>
        <member name="P:MFiles.VAF.Common.PropertyValueChange.OldValue">
            <summary>
            The previous version's property value (if there was one).
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.PropertyValueChange.NewValue">
            <summary>
            The current version's property value (if there is one).
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.PropertyValueChange.PropertyDef">
            <summary>
            The PropertyDef ID of the property Value(s).
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.PropertyValueChange.DataType">
            <summary>
            The data type of the propertyValue(s)
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.PropertyValueChange.ChangeType">
            <summary>
            The type of property change between versions.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.PropertyValueExtensionMethods">
            <summary>
            Provides convenience extension methods for the PropertyValue objects.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.PropertyValueExtensionMethods.ExpandPlaceholderText(MFilesAPI.PropertyValues,MFilesAPI.Vault,MFilesAPI.ObjVer,System.String,System.Boolean)">
            <summary>
            Returns a string with M-Files placeholders replaced with values.
            </summary>
            <param name="targetObjVer"></param>
            <param name="format">A string containing placeholders that should be replaced.</param>
            <param name="hideMissingValues">
            Indicates whether placeholders should be left as they are if the object doesn't have a
            property referenced by a placeholder, instead of being replaced by an empty string.
            If set to false, format string can be passed to multiple objects.
            </param>
            <param name="propertyValues"></param>
            <param name="vault"></param>
            <returns>Expanded Text</returns>
        </member>
        <member name="M:MFiles.VAF.Common.PropertyValueExtensionMethods.GetValue``1(MFilesAPI.PropertyValue,``0)">
            <summary>
            Get the value of property value and cast it to the specified type.
            </summary>
            <typeparam name="T">Type to cast value to.</typeparam>
            <param name="pv">Property value to get value from.</param>
            <param name="defaultValue">Allows a default value to be specified to avoid throwing exception.</param>
            <returns>Property value's typed value as type T</returns>
        </member>
        <member name="M:MFiles.VAF.Common.PropertyValueExtensionMethods.GetValue``1(MFilesAPI.PropertyValue)">
            <summary>
            Get the value of property value and cast it to the specified type.
            </summary>
            <typeparam name="T">Type to cast value to.</typeparam>
            <param name="pv">Property value to get value from.</param>
            <returns>Property value's typed value as type T</returns>
        </member>
        <member name="M:MFiles.VAF.Common.PropertyValueExtensionMethods.IsEqual(MFilesAPI.PropertyValue,MFilesAPI.PropertyValue,MFiles.VAF.Common.EqualityCompareOptions)">
            <summary>
            Checks if the property values are equal.
            
            If either of the property values is null, the values are
            treated as they were different.
            </summary>
            <param name="left">The first property value.</param>
            <param name="right">The second property value.</param>
            <param name="options">The equality comparison options.</param>
            <returns>Boolean indicating whether the property values were the same.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.PropertyValueExtensionMethods.AddLookup(MFilesAPI.PropertyValue,System.Int32,System.Int32)">
            <summary>
            Adds a single lookup to a lookup property.
            </summary>
            <param name="prop">PropertyValue</param>
            <param name="item">Item</param>
            <param name="version">Version</param>
            <returns>A flag indicating a change</returns>
        </member>
        <member name="M:MFiles.VAF.Common.PropertyValueExtensionMethods.RemoveLookup(MFilesAPI.PropertyValue,System.Int32)">
            <summary>
            Removes the item from the specified lookup property.
            </summary>
            <param name="prop">Property value</param>
            <param name="item">Removed item</param>
            <returns>Flag indicating the change</returns>
        </member>
        <member name="T:MFiles.VAF.Common.PropertyValuesExtensionMethods">
            <summary>
            Provides convenience extension methods for the PropertyValues collection.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.PropertyValuesExtensionMethods.Exists(MFilesAPI.PropertyValues,System.Int32)">
            <summary>
            Checks whether an object has a specific property.
            </summary>
            <param name="props">The property values collection.</param>
            <param name="propID">The PropertyDef ID.</param>
            <returns>Returns true if the property was found.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.PropertyValuesExtensionMethods.HasValue(MFilesAPI.PropertyValues,System.Int32)">
            <summary>
            Checks whether an object has a specific property and its value is not null.
            </summary>
            <param name="props">The property values collection.</param>
            <param name="propID">The PropertyDef ID.</param>
            <returns>Returns true if the property was found and has a value.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.PropertyValuesExtensionMethods.HasFlag(MFilesAPI.PropertyValues,System.Int32,System.Boolean)">
            <summary>
            Checks whether an object has a specific boolean property and it is true.
            </summary>
            <param name="props">The property values collection.</param>
            <param name="propID">The PropertyDef ID.</param>
            <param name="defaultValue">The default value to use in case where the property is missing or it doesn't have a value.</param>
            <returns>
             Returns defaultValue if the property was not found, 
             if it was not boolean, or was not set to true.
            </returns>
        </member>
        <member name="M:MFiles.VAF.Common.PropertyValuesExtensionMethods.GetProperty(MFilesAPI.PropertyValues,System.Int32)">
            <summary>
            Returns the specified object property if found.
            </summary>
            <param name="props">The property values collection.</param>
            <param name="propID">The PropertyDef id of the property to look for.</param>
            <returns>Returns null if not found.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.PropertyValuesExtensionMethods.TryGetProperty(MFilesAPI.PropertyValues,System.Int32,MFilesAPI.PropertyValue@)">
            <summary>
            Tries to retreive the specified property value from the collection.
            </summary>
            <param name="props">Source property values</param>
            <param name="propID">PropertyDef ID</param>
            <param name="propVal">The value to populate if the value is found.</param>
            <returns>Return true if the propVal parameter was set successfully.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.PropertyValuesExtensionMethods.SetProperty(MFilesAPI.PropertyValues,System.Int32,MFilesAPI.MFDataType,System.Object)">
            <summary>
            Adds or updates the specificed property in the property values collection with the passed value.
            </summary>
            <param name="props">The source property values in which to set the property.</param>
            <param name="propID">The propertyDef of the PropertyValue</param>
            <param name="dataType">The datatype of the PropertyValue</param>
            <param name="value">The value of the PropertyValue</param>
            <returns>The actual PropertyValue created/added to the propertyValues collection.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.PropertyValuesExtensionMethods.SetProperty(MFilesAPI.PropertyValues,System.Int32,MFilesAPI.TypedValue)">
            <summary>
            Adds or updates the specificed property in the property values collection with the passed value
            </summary>
            <param name="props">The source property values in which to set the property.</param>
            <param name="propID">The propertyDef of the PropertyValue</param>
            <param name="value">The typedvalue of the PropertyValue</param>
            <returns>The actual PropertyValue created/added to the propertyValues collection.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.PropertyValuesExtensionMethods.SetProperty(MFilesAPI.PropertyValues,MFilesAPI.PropertyValue)">
            <summary>
            Adds or updates the specificed property in the property values collection.
            </summary>
            <param name="props">The source property values in which to set the property.</param>
            <param name="propVal">The property value to add to the collection.</param>
            <returns>The actual PropertyValue created/added to the propertyValues collection.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.PropertyValuesExtensionMethods.RemoveProperty(MFilesAPI.PropertyValues,System.Int32)">
            <summary>
            Removes the specified property from the property values collection.
            </summary>
            <param name="props">The source property values from which to remove the property.</param>
            <param name="propID">The property to be removed.</param>
            <returns>The removed propertyValue (if any).</returns>
        </member>
        <member name="M:MFiles.VAF.Common.PropertyValuesExtensionMethods.AddLookup(MFilesAPI.PropertyValues,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds the item to the specified multiselectlookup property.
            </summary>
            <param name="props">The source property values from which to remove the property.</param>
            <param name="propID">The property which to add the lookup to.</param>
            <param name="item">The item to be added as a lookup</param>
            <param name="version">The specific version of the item for the lookup to reference.</param>
            <returns>True if the property value was created or changed.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.PropertyValuesExtensionMethods.InsertLookup(MFilesAPI.PropertyValues,System.Int32,System.Int32,System.Int32)">
            <summary>
            Inserts the item into the specified multi-select lookup property.
            Preserving existing lookups in that property.
            </summary>
            <param name="props">The source property values from which to remove the property.</param>
            <param name="propID">The property which to add the lookup to.</param>
            <param name="item">The item to be added as a lookup</param>
            <param name="version">The specific version of the item for the lookup to reference.</param>
            <returns>True if the property value was created or changed.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.PropertyValuesExtensionMethods.AddLookup(MFilesAPI.PropertyValues,System.Int32,MFilesAPI.ObjVer,System.Boolean)">
            <summary>
            Adds the item to the specified multiselectlookup property.
            </summary>
            <param name="props">The source property values from which to add the property.</param>
            <param name="propID">The property which to add the lookup to.</param>
            <param name="item">The item to be added as a lookup</param>
            <param name="exactVersion">Indicates whether the exact or latest version should be used.</param>
            <returns>True if the property value was created or changed.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.PropertyValuesExtensionMethods.RemoveLookup(MFilesAPI.PropertyValues,System.Int32,System.Int32)">
            <summary>
            Removes the item from the specified multiselectlookup property.
            </summary>
            <param name="props">The source property values from which to remove the property.</param>
            <param name="propID">The property from which the lookup should be removed.</param>
            <param name="item">The item to remove from the lookups.</param>
            <returns>Returns true if the property value was altered.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.PropertyValuesExtensionMethods.ToStringEx(MFilesAPI.PropertyValues)">
            <summary>
            Returns a string representation of the property values. For debugging.
            </summary>
            <param name="propVals">The source property values from which to create the string.</param>
            <returns>A string representation of the propertyValues.</returns>
        </member>
        <member name="T:MFiles.VAF.Common.SearchConditionsExtender">
            <summary>
            Convenience methods for SearchConditions objects.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.SearchConditionsExtender.excludeDeleted(MFilesAPI.SearchConditions)">
            <summary>
            Add a condtion that excludes deleted objects.
            </summary>
            <param name="search">Source SearchConditions object to change.</param>
            <returns>The source SeachConditions object for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.SearchConditionsExtender.AddStatusCondition(MFilesAPI.SearchConditions,MFilesAPI.MFStatusType,MFilesAPI.MFConditionType,MFilesAPI.MFDataType,System.Object)">
            <summary>
            Adds a status condition.
            </summary>
            <param name="search">Source SearchConditions object to change.</param>
            <param name="sType">The object status to search.</param>
            <param name="cType">The condition for the search.</param>
            <param name="dType">The data type of the search value</param>
            <param name="v">The search value.</param>
            <returns>The source SeachConditions object for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.SearchConditionsExtender.AddPropertyCondition(MFilesAPI.SearchConditions,System.Int32,MFilesAPI.MFConditionType,MFilesAPI.MFDataType,System.Object)">
            <summary>
            Adds a property based condition.
            </summary>
            <param name="search">Source SearchConditions object to change.</param>
            <param name="propID">A reference to the property to search.</param>
            <param name="cType">The condition for the search.</param>
            <param name="dType">The data type of the search value</param>
            <param name="v">The search value.</param>
            <returns>The source SeachConditions object for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.SearchConditionsExtender.AddPropertyCondition(MFilesAPI.SearchConditions,System.Int32,MFilesAPI.MFConditionType,MFilesAPI.TypedValue)">
            <summary>
            Adds a property based condition.
            </summary>
            <param name="search">Source SearchConditions object to change.</param>
            <param name="propID">A reference to the property to search.</param>
            <param name="cType">The condition for the search.</param>
            <param name="tv">The search value.</param>
            <returns>The source SeachConditions object for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.SearchConditionsExtender.AddAnyPropertyCondition(MFilesAPI.SearchConditions,System.Int32,MFilesAPI.MFConditionType,MFilesAPI.TypedValue)">
            <summary>
            Adds a 'any property' based condition.
            </summary>
            <param name="search">Source SearchConditions object to change.</param>
            <param name="objType">A object type/value list id that is pointed by the lookup.</param>
            <param name="cType">The condition for the search.</param>
            <param name="tv">The search value.</param>
            <returns>The source SeachConditions object for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.SearchConditionsExtender.ObjectTypeID(MFilesAPI.SearchConditions,System.Int32)">
            <summary>
            Adds an ObjectType condition.
            </summary>
            <param name="search">Source SearchConditions object to change.</param>
            <param name="objTypeID">The object type to search for.</param>
            <returns>The source SeachConditions object for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.SearchConditionsExtender.ObjectID(MFilesAPI.SearchConditions,System.Int32)">
            <summary>
            Adds an Object ID condition.
            </summary>
            <param name="search">Source SearchConditions object to change.</param>
            <param name="objID">The object id to search for.</param>
            <returns>The source SeachConditions object for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.SearchConditionsExtender.NotObjectID(MFilesAPI.SearchConditions,System.Int32)">
            <summary>
            Adds a condition to exclude a certain object ID.
            </summary>
            <param name="search">Source SearchConditions object to change.</param>
            <param name="objID">The object ID to exclude.</param>
            <returns>The source SeachConditions object for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.SearchConditionsExtender.ObjectClassID(MFilesAPI.SearchConditions,System.Int32)">
            <summary>
            Adds a condition for objects with a specific class id.
            </summary>
            <param name="search">Source SearchConditions object to change.</param>
            <param name="classID">Class ID to search for.</param>
            <returns>The source SeachConditions object for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.SearchConditionsExtender.ObjectClassID(MFilesAPI.SearchConditions,System.Int32[])">
            <summary>
            Adds a condition for objects with any of the specified class ids.
            </summary>
            <param name="search">Source SearchConditions object to change.</param>
            <param name="classIDs">Class IDs) to search for.</param>
            <returns>The source SeachConditions object for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.SearchConditionsExtender.NameOrTitle(MFilesAPI.SearchConditions,System.String)">
            <summary>
            Adds a condition for the name/title of an object.
            </summary>
            <param name="search">Source SearchConditions object to change.</param>
            <param name="name">Title to search for.</param>
            <returns>The source SeachConditions object for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.SearchConditionsExtender.BetweenDates(MFilesAPI.SearchConditions,System.Int32,System.DateTime,System.DateTime)">
            <summary>
            Adds a condition to search for objects between a certain date range.
            </summary>
            <param name="search">Source SearchConditions object to change.</param>
            <param name="propId">Reference to a date property.</param>
            <param name="startDate">Start of date range</param>
            <param name="endDate">End of date range.</param>
            <returns>The source SeachConditions object for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.SearchConditionsExtender.DateRangeIntersects(MFilesAPI.SearchConditions,System.Int32,System.Int32,System.DateTime,System.DateTime)">
            <summary>
            Adds a condition to search for objects intersecting a certain date range.
            </summary>
            <param name="search">Source SearchConditions object to change.</param>
            <param name="startDatePropId">Reference to a start date property.</param>
            <param name="endDatePropId">Reference to an end date property.</param>
            <param name="startDate">Start of date range.</param>
            <param name="endDate">End of date range.</param>
            <returns>The source SeachConditions object for chaining.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.SearchConditionsExtender.IsMatch(MFiles.VAF.Configuration.JsonAdaptor.SearchConditionsJA,MFiles.VAF.Common.ObjVerEx,System.Boolean,System.Int32)">
            <summary>
            Return true if there is conditions and they all match. 
            </summary>
            <param name="scja">The search conditions object that is used as "this".</param>
            <param name="objVerEx">Object whose properties are checked</param>
            <param name="equalsNullIsMissing">true for matching Equal == Null to also when the property is missing.</param>
            <param name="userID">UserID of the current user.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Common.SearchConditionsExtender.Validate(MFiles.VAF.Configuration.JsonAdaptor.SearchConditionsJA,MFilesAPI.Vault,MFiles.VAF.Configuration.ValidationResultBase,MFiles.VAF.Configuration.IConfiguration,System.String,System.String)">
            <summary>
            Perform configuration/validation sanity checks on the search conditions.
            </summary>
            <param name="scja">The search conditions object that is used as "this".</param>
            <param name="vault">The vault.</param>
            <param name="validationResult">Validation object used to report the errors.</param>
            <param name="configuration">Configuration object used with the report.</param>
            <param name="itemType">Element key used with the report.</param>
            <param name="item">Element value used with the report</param>
            <returns>True on all passed, false on validation error.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.SearchConditionsExtender.GetSubstitutedUsers(MFilesAPI.Vault,System.Int32)">
            <summary>
            Private helper to return users substituted by the specific user.
            The GetUsersBySubstituteUser call is encapsulated here to better avoid problems when it's not found.
            (i.e. with an older server)
            </summary>
            <param name="vault">Vault</param>
            <param name="userID">User id</param>
            <returns>Collection of users being substituted by the specific user.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.SearchConditionsExtender.AddUsersToLookups(MFilesAPI.UserOrUserGroupIDs,MFilesAPI.Lookups)">
            <summary>
            Adds users to lookups.
            </summary>
            <param name="users">Collection of users.</param>
            <param name="lookups">Lookups to append with the provided users.</param>
        </member>
        <member name="T:MFiles.VAF.Common.IStateTransitionEnvironment">
            <summary>
            The state execution environment.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.IEnvironment">
            <summary>
            The execution environment interface. 
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.IEnvironment.GetObjectClass">
            <summary>
            The object class for current event. Might need to fetch the id from MFServer.
            </summary>
            <returns>The class id.</returns>
        </member>
        <member name="P:MFiles.VAF.Common.IEnvironment.Vault">
            <summary>
            Current vault object. This vault object is bound with current DB transaction.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.IEnvironment.CurrentTransactionID">
            <summary>
            The current transaction id. Represents either real transaction or enlisting DB transaction.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.IEnvironment.ParentTransactionID">
            <summary>
            Parent transaction id. Set with enlisting transaction only.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.IEnvironment.MasterTransactionID">
            <summary>
            The master (real) DB transaction id.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.IEnvironment.ActivityID">
            <summary>
            The activity ID for the current event call. Can be used with event tracking framework.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.IEnvironment.ObjVer">
            <summary>
            Object version identifier for current event. Set if the event is associated with an object version.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.IEnvironment.CurrentUserID">
            <summary>
            The current (author) user id for the current event.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.IEnvironment.DisplayID">
            <summary>
            The handled object or value list item display id. Relevant only for events that handle objects of value list items.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.IEnvironment.CurrentUserSessionInfo">
            <summary>
            The session info that represents the current (invoker) user session.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.IEnvironment.VaultSharedVariables">
            <summary>
            Accessor for the shared variabled.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.IEnvironment.TransactionCache">
            <summary>
            Accessor for the transaction cache.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.IStateTransitionEnvironment.StateID">
            <summary>
            The current state ID.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.IStateTransitionEnvironment.StateTransitionID">
            <summary>
            The current state transition ID.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.IStateTransitionEnvironment.InitialNextStateID">
            <summary>
            The initial next state ID.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.IStateTransitionEnvironment.PropertyValues">
            <summary>
            Accessor for the property values object. Clones the object to local process on first call.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.StateTransitionEnvironment">
            <summary>
            An object that contains variables available to a script.
            </summary>
            <remarks>
            Compare to EventHandlerEnvironment which can be used via COM with dynamic types.
            </remarks>
        </member>
        <member name="T:MFiles.VAF.Common.EnvironmentBase">
            <summary>
            An object that contains variables available to a script.
            </summary>
            <remarks>
            Compare to EventHandlerEnvironment which can be used via COM with dynamic types.
            </remarks>
        </member>
        <member name="F:MFiles.VAF.Common.EnvironmentBase.objVerEx">
            <summary>
            The object version details for the target object.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.EnvironmentBase.objVerLocalClone">
            <summary>
            Local object version identifier object. The object is cloned to this process.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.EnvironmentBase.currentTransactionIDLocalClone">
            <summary>
            Local transaction identifier object. The object is cloned to this process.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.EnvironmentBase.parentTransactionIDLocalClone">
            <summary>
            Local parent transaction identifier object. The object is cloned to this process.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.EnvironmentBase.masterTransactionIDLocalClone">
            <summary>
            Local master transaction identifier object. The object is cloned to this process.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.EnvironmentBase.activityIDLocalClone">
            <summary>
            Local activity identifier object. The object is cloned to this process.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.EnvironmentBase.transactionCacheLocal">
            <summary>
            Local transaction cache proxy object. The real object cannot be cloned and it lives in remote process.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.EnvironmentBase.vaultSharedVariablesLocal">
            <summary>
            Local shared variables cache proxy object. The real object cannot be cloned and it lives in remote process.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.EnvironmentBase.currentUserSessionInfoLocalClone">
            <summary>
            The session info that represents the original (invoking) user session. The object is cloned to this process.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.EnvironmentBase.GetObjectClass">
            <summary>
            Resolves the class of the target object.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.EnvironmentBase.ReturnLocalCopy(System.Object,MFilesAPI.TypedValue@)">
            <summary>
            Makes a local copy of the typed value.
            </summary>        
            <param name="source">The source object.</param>
            <param name="localCopy">Reference to the local copy.</param>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Common.EnvironmentBase.ObjVerExternal">
            <summary>
            Original object identifier object. The object may be physically located in other process.
            </summary> 
        </member>
        <member name="P:MFiles.VAF.Common.EnvironmentBase.CurrentTransactionIDExternal">
            <summary>
            Original transaction identifier object. The object may be physically located in other process.
            </summary> 
        </member>
        <member name="P:MFiles.VAF.Common.EnvironmentBase.ParentTransactionIDExternal">
            <summary>
            Original parent transaction identifier object. The object may be physically located in other process.
            </summary> 
        </member>
        <member name="P:MFiles.VAF.Common.EnvironmentBase.MasterTransactionIDExternal">
            <summary>
            Original master transaction identifier object. The object may be physically located in other process.
            </summary> 
        </member>
        <member name="P:MFiles.VAF.Common.EnvironmentBase.ActivityIDExternal">
            <summary>
            Original activity identifier object. The object may be physically located in other process.
            </summary> 
        </member>
        <member name="P:MFiles.VAF.Common.EnvironmentBase.TransactionCacheExternal">
            <summary>
            Original transaction cache object. The object may be physically located in other process.
            </summary> 
        </member>
        <member name="P:MFiles.VAF.Common.EnvironmentBase.VaultSharedVariablesExternal">
            <summary>
            Original vault shared variables object. The object may be physically located in other process.
            </summary> 
        </member>
        <member name="P:MFiles.VAF.Common.EnvironmentBase.CurrentUserSessionInfoExternal">
            <summary>
            The session info that represents the original (invoking) user session.
            </summary> 
        </member>
        <member name="P:MFiles.VAF.Common.EnvironmentBase.CurrentUserID">
            <summary>
            The user id who caused the event handler call.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.EnvironmentBase.DisplayID">
            <summary>
            The handled object or value list item display id. Relevant only for events that handle objects of value list items.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.EnvironmentBase.Vault">
            <summary>
            The vault object. The vault object session is bound with the ongoing database transaction.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.EnvironmentBase.TransactionCache">
            <summary>
            Accessor for the transaction cache.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.EnvironmentBase.VaultSharedVariables">
            <summary>
            Accessor for the shared variabled.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.EnvironmentBase.ObjVer">
            <summary>
            Accessor for the object version identifier object. Clones the object to local process on first call.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.EnvironmentBase.CurrentTransactionID">
            <summary>
            Accessor for the transaction id object. Clones the object to local process on first call.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.EnvironmentBase.ParentTransactionID">
            <summary>
            Accessor for the parent transaction id object. Clones the object to local process on first call.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.EnvironmentBase.MasterTransactionID">
            <summary>
            Accessor for the master transaction id object. Clones the object to local process on first call.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.EnvironmentBase.ActivityID">
            <summary>
            Accessor for the activity id object. Clones the object to local process on first call.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.EnvironmentBase.ObjVerEx">
            <summary>
            Returns an ObjVerEx for the current environment's ObjVer, if it exists.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.EnvironmentBase.CurrentUserSessionInfo">
            <summary>
            Returns the original user SessionInfo if it exists in the current context.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.StateTransitionEnvironment.propertyValuesLocalClone">
            <summary>
            Local property values object. The object is cloned to this process.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.StateTransitionEnvironment.PropertyValuesExternal">
            <summary>
            Original property values object. The object may be physically located in other process.
            </summary> 
        </member>
        <member name="P:MFiles.VAF.Common.StateTransitionEnvironment.PropertyValues">
            <summary>
            Accessor for the property values object. Clones the object to local process on first call.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.StateTransitionEnvironment.StateID">
            <summary>
            The id of the state that acts as an execution context.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.StateTransitionEnvironment.StateTransitionID">
            <summary>
            The id of the state transition that acts as an execution context.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.StateTransitionEnvironment.InitialNextStateID">
            <summary>
            The initial next state ID.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.SysUtils">
            <summary>
            Provides some common utility methods for system operations.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.SysUtils.CreateTempFolder">
            <summary>
            Creates a temporary folder.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.SysUtils.GetTempFileName(System.String)">
            <summary>
            Returns a temporary file name.
            </summary>
            <returns>Temp file name with extension.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.SysUtils.DeleteFromDisk(System.String)">
            <summary>
            Deletes a file or directory from the disk. In a case of directory the sub-folders and files are deleted recursively.
            </summary>
            <param name="path">Path to the target file.</param>
        </member>
        <member name="M:MFiles.VAF.Common.SysUtils.ReportToEventLog(System.String,System.String,System.Diagnostics.EventLogEntryType)">
            <summary>
            Reports a message to the windows event log.
            </summary>
            <param name="eventSource">The event source string. Needs to exist in order to successfully write to the event log.</param>
            <param name="message">The message to write.</param>
            <param name="type">The message type.</param>
        </member>
        <member name="M:MFiles.VAF.Common.SysUtils.ReportToEventLog(System.String,System.Diagnostics.EventLogEntryType)">
            <summary>
            Reports a message to the windows event log.
            </summary>
            <param name="message">The message to write.</param>
            <param name="type">The message type.</param>
        </member>
        <member name="M:MFiles.VAF.Common.SysUtils.ReportInfoToEventLog(System.String,System.String)">
            <summary>
            Reports an informational message to the windows event log. 
            </summary>
            <param name="eventSource">The event source string. Needs to exist in order to successfully write to the event log.</param>
            <param name="message">The information message to report.</param>
        </member>
        <member name="M:MFiles.VAF.Common.SysUtils.ReportInfoToEventLog(System.String)">
            <summary>
            Reports an informational message to the windows event log. 
            </summary>
            <param name="message">The information message to report.</param>
        </member>
        <member name="M:MFiles.VAF.Common.SysUtils.ReportErrorToEventLog(System.String,System.String)">
            <summary>
            Reports an error message to the windows event log. 
            </summary>
            <param name="eventSource">The event source string. Needs to exist in order to successfully write to the event log.</param>
            <param name="message">The information message to report.</param>
        </member>
        <member name="M:MFiles.VAF.Common.SysUtils.ReportErrorToEventLog(System.String)">
            <summary>
            Reports an error message to the windows event log. 
            </summary>
            <param name="message">The information message to report.</param>
        </member>
        <member name="M:MFiles.VAF.Common.SysUtils.ReportErrorMessageToEventLog(System.String,System.String,System.Exception,System.Diagnostics.EventLogEntryType)">
            <summary>
            Reports the exception with a prefix message to the windows event log.
            </summary>
            <param name="eventSource">The event source string. Needs to exist in order to successfully write to the event log.</param>
            <param name="addedMessage">The additional text that will prefix the error message.</param>
            <param name="exception">The exception object from which the error message is generated.</param>
            <param name="type">The event log entry type.</param>
        </member>
        <member name="M:MFiles.VAF.Common.SysUtils.ReportErrorToEventLog(System.String,System.String,System.Exception)">
            <summary>
            Reports the exception with a prefix message to the windows event log.
            </summary>
            <param name="eventSource">The event source string. Needs to exist in order to successfully write to the event log.</param>
            <param name="addedMessage">The additional text that will prefix the error message.</param>
            <param name="exception">The exception object from which the error message is generated.</param>
        </member>
        <member name="M:MFiles.VAF.Common.SysUtils.ReportErrorMessageToEventLog(System.String,System.Exception)">
            <summary>
            Reports the exception with a prefix message to the windows event log.
            </summary>
            <param name="addedMessage">The additional text that will prefix the error message.</param>
            <param name="exception">The exception object from which the error message is generated.</param>
        </member>
        <member name="M:MFiles.VAF.Common.SysUtils.ReportErrorToEventLog(System.String,System.Exception)">
            <summary>
            Reports an exception to the windows event log. 
            </summary>
            <param name="eventSource">The event source string. Needs to exist in order to successfully write to the event log.</param>
            <param name="ex">The exception object from which the error message is generated.</param>
        </member>
        <member name="M:MFiles.VAF.Common.SysUtils.ReportWarningToEventLog(System.String,System.String,System.Exception)">
            <summary>
            Reports an exception to the windows event log as warning. 
            </summary>
            <param name="eventSource">The event source string. Needs to exist in order to successfully write to the event log.</param>
            <param name="addedMessage">The additional text that will prefix the error message.</param>
            <param name="ex">The exception object from which the error message is generated.</param>
        </member>
        <member name="M:MFiles.VAF.Common.SysUtils.ReportErrorToEventLog(System.Exception)">
            <summary>
            Reports an exception to the windows event log. 
            </summary>
            <param name="ex">The exception object from which the error message is generated.</param>
        </member>
        <member name="M:MFiles.VAF.Common.SysUtils.AddExceptionTypeSpecificInformation(System.String,System.Exception)">
            <summary>
            For certain exception types, adds useful type specific information to the
            message.
            </summary>
            <param name="message">The original message to add information to.</param>
            <param name="exception">The exception to extract extra information from.</param>
            <returns>A potentially enriched error message.</returns>
        </member>
        <member name="F:MFiles.VAF.Common.SysUtils.rand">
            <summary>
            Random number generator for temporary file names.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.SysUtils.DefaultEventSourceIdentifier">
            <summary>
            Returns the vault application event source identifier that is used when logging to Windows event log.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.TypedValueExtensionMethods">
            <summary>
            TypedValue extension methods.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.TypedValueExtensionMethods.IsEqual(MFilesAPI.TypedValue,MFilesAPI.TypedValue,MFiles.VAF.Common.EqualityCompareOptions)">
            <summary>
            Checks whether the typed values are equal based on the given options.
            
            If either of the objects are null, they are treated as not equal.
            </summary>
            <param name="left">Left TypedValue.</param>
            <param name="right">Right TypedValue.</param>
            <param name="options">Equality comparison options used.</param>
            <returns></returns>
        </member>
        <member name="T:MFiles.VAF.Common.ExtensionMethods">
            <summary>
            Convenience methods for Vault objects.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.ExtensionMethods.ResolveID(MFilesAPI.Vault,System.Type,System.Object)">
            <summary>
            Resolves the id of a vault element by reference.
            </summary>
            <param name="vault">The vault in which the element is defined.</param>
            <param name="type">M-Files API type of the element to resolve.</param>
            <param name="reference">
             Identifier can be:
            	- int (ID of the element)
            	- string (GUID, ID or Alias of the element)
            	- GUID (GUID of the element)
            	- enum (ID of the element)
            </param>
            <returns>The id of the element, the int value of the reference, or -1 if reference not resolved.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.ExtensionMethods.ResolveItem(MFilesAPI.Vault,System.Object)">
            <summary>
            Resolves the object/valuelist item id for the passed reference
            </summary>
            <param name="vault"></param>
            <param name="reference"></param>
            <returns></returns>
        </member>
        <member name="T:MFiles.VAF.Common.ExtensionMethods.LookupID">
            <summary>
            Delegate to lookup an id with an alias or guid.
            </summary>
            <param name="vault">The vault object.</param>
            <param name="alias">The alias that should be resolved into the id.</param>
            <returns>The id of the metadata structure element.</returns>
        </member>
        <member name="T:MFiles.VAF.Common.ExtensionMethods.LookupIDID">
            <summary>
            Delegate to lookup an id with an id. 
            </summary>
            <param name="vault">The vault object.</param>
            <param name="id">The id that should be resolved into the id.</param>
            <returns>The id of the metadata structure element.</returns>
        </member>
        <member name="P:MFiles.VAF.Common.ExtensionMethods.VaultElementFinder.FromAlias">
            <summary>
            A delegate that will lookup an element by alias.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ExtensionMethods.VaultElementFinder.FromGuid">
            <summary>
            A delegate that will lookup an element by GUID.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.ExtensionMethods.VaultElementFinder.FromID">
            <summary>
            A delegate that will lookup/verify an element by ID.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.VaultObjectOperationsExtensionMethods">
            <summary>
            Vault ObjectOperations Extension Methods.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.VaultObjectOperationsExtensionMethods.GetObjectVersionAndPropertiesOfMultipleObjectsInBatches(MFilesAPI.VaultObjectOperations,MFilesAPI.ObjVers,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Resolves the <see cref="T:MFilesAPI.ObjectVersionAndPropertiesOfMultipleObjects"/> in batches.
            </summary>
            <param name="ops">This.</param>
            <param name="objVers">The object version identifiers of the object versions for which the information is requested.</param>
            <param name="latestVersion">True to return the latest available versions of the objects. If 'AllowCheckedOut' is false, the latest checked in version is returned.</param>
            <param name="allowCheckedOut">If true, a checked out object version can be returned. If false, only checked in version are allowed.</param>
            <param name="allowMissing">True if the method is allowed to return less results than what is requested. This can happen if all object versions could not be found or if the user does not have access to them. If false, the method raises an error if all object versions were not found.</param>
            <param name="updateFromServer">True if the information should always be updated from the server. If false, the client local cache may be used. This flag is relevant only when M-Files API is used in client mode.</param>
            <param name="maxBatchSize">Batch size limit per GetObjectVersionAndPropertiesOfMultipleObjects () call.</param>
            <returns><see cref="T:MFilesAPI.ObjectVersionAndPropertiesOfMultipleObjects"/></returns>
        </member>
        <member name="T:MFiles.VAF.LicenseManagerBase`1">
            <summary>
            License Manager used by the VaultApplicationBase.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MFiles.VAF.IApplicationLicense">
            <summary>
            Interface for the applications license utilized by the VaultApplicationBase.
            The actual content class shall be stored in member and accessed via Content().
            Clone shall return a duplicate that can be used to load/check new license content.
            </summary>
        </member>
        <member name="M:MFiles.VAF.IApplicationLicense.Load(System.String,MFilesAPI.Vault,System.Boolean)">
            <summary>
            Load in and evaluate the license content.
            </summary>
            <param name="license">The license content.</param>
            <param name="vault">Current vault, if known, CanBeNull.</param>
            <param name="evaluateAsync">True to not wait for evaluation completion.</param>
        </member>
        <member name="M:MFiles.VAF.IApplicationLicense.ToString">
            <summary>
            Get the details text status of the license.
            </summary>
        </member>
        <member name="M:MFiles.VAF.IApplicationLicense.Evaluate(MFilesAPI.Vault,System.Boolean)">
            <summary>
            Method used to (re)evaluate the license.
            After Evaluate() the license should have content, if no errors had occured. Note that the Load() will also calls Evaluate().
            This method may get called multiple times.
            Vault instance may not be always available and can be given as null.
            </summary>
            <param name="vault">The current vault instance, CanBeNull.</param>
            <param name="redo">Re-evaluate the license, false to accept previous evaluation.</param>
        </member>
        <member name="M:MFiles.VAF.IApplicationLicense.Content``1">
            <summary>
            Access the license content class. 
            </summary>
            <typeparam name="X">Class of the license.</typeparam>
        </member>
        <member name="P:MFiles.VAF.IApplicationLicense.LicenseIsOptional">
            <summary>
            True to operate (to some extent) without a license.
            False to always require a license.
            </summary>
        </member>
        <member name="P:MFiles.VAF.IApplicationLicense.LicenseStatus">
            <summary>
            Get the License Status enumeration value.
            </summary>
        </member>
        <member name="P:MFiles.VAF.IApplicationLicense.HasContent">
            <summary>
            Whether the content is constructed.
            </summary>
        </member>
        <member name="P:MFiles.VAF.IApplicationLicense.ServerLicense">
            <summary>
            The current server license, used for reference.
            </summary>
        </member>
        <member name="M:MFiles.VAF.LicenseManagerBase`1.#ctor">
            <summary>
            Construct without parameters.
            </summary>
        </member>
        <member name="M:MFiles.VAF.LicenseManagerBase`1.#ctor(MFiles.VAF.Configuration.ILicenseDecoder)">
            <summary>
            Construct with defined decoder.
            </summary>
            <param name="decoder">Decoder to use.</param>
        </member>
        <member name="M:MFiles.VAF.LicenseManagerBase`1.Clone">
            <summary>
            Return a copy of us, Without content class!
            </summary>
        </member>
        <member name="M:MFiles.VAF.LicenseManagerBase`1.Load(System.String,MFilesAPI.Vault,System.Boolean)">
            <summary>
            Set the license json-content.
            </summary>
            <param name="license">Content</param>
            <param name="vault">Current vault if known, CanBeNull.</param>
            <param name="evaluateAsync">True to not wait for evaluation completion.</param>
        </member>
        <member name="M:MFiles.VAF.LicenseManagerBase`1.ToString">
            <summary>
            Get the details text status of the license.
            </summary>
        </member>
        <member name="M:MFiles.VAF.LicenseManagerBase`1.Evaluate(MFilesAPI.Vault,System.Boolean)">
            <summary>
            Method used to evaluate the license.
            This may get called multiple times.
            Vault instance may not be always available and can be given as null.
            </summary>
            <param name="vault">The current vault instance, CanBeNull.</param>
            <param name="redo">Re-evaluate the license, false to accept previous evaluation.</param>
        </member>
        <member name="M:MFiles.VAF.LicenseManagerBase`1.Content``1">
            <summary>
            Access the license as the class user expects it. 
            </summary>
            <typeparam name="X">Class of the license.</typeparam>
        </member>
        <member name="M:MFiles.VAF.LicenseManagerBase`1.AccessContent">
            <summary>
            Access the license class as our template class. 
            </summary>
        </member>
        <member name="F:MFiles.VAF.LicenseManagerBase`1.bom">
            <summary>
            Background threader used in evaluation.
            </summary>
        </member>
        <member name="F:MFiles.VAF.LicenseManagerBase`1.isContructed">
            <summary>
            Whether the content is constructed.
            </summary>
        </member>
        <member name="F:MFiles.VAF.LicenseManagerBase`1.isEvaluated">
            <summary>
            Whether the content is once fully evaluated.
            </summary>
        </member>
        <member name="F:MFiles.VAF.LicenseManagerBase`1.formatError">
            <summary>
            Format error during deserialize.
            </summary>
        </member>
        <member name="F:MFiles.VAF.LicenseManagerBase`1.errors">
            <summary>
            Internal containers for errors and infos from deserialization etc.
            </summary>
        </member>
        <member name="F:MFiles.VAF.LicenseManagerBase`1.infos">
            <summary>
            Internal containers for errors and infos from deserialization etc.
            </summary>
        </member>
        <member name="M:MFiles.VAF.LicenseManagerBase`1.Deserialize(System.String,System.Boolean)">
            <summary>
            Deserialize json into our content object.
            </summary>
            <param name="json">Source json.</param>
            <param name="throwOnError">Throw on error, or only return null.</param>
            <returns></returns>
        </member>
        <member name="F:MFiles.VAF.LicenseManagerBase`1.rawLicense">
            <summary>
            The original text version of the license.
            </summary>
        </member>
        <member name="F:MFiles.VAF.LicenseManagerBase`1.license">
            <summary>
            License content field.
            </summary>
        </member>
        <member name="P:MFiles.VAF.LicenseManagerBase`1.ApplicationBuildDate">
            <summary>
            The date of the application.
            </summary>
        </member>
        <member name="P:MFiles.VAF.LicenseManagerBase`1.LicenseIsOptional">
            <summary>
            True to operate (to some extent) without license.
            False to require.
            </summary>
        </member>
        <member name="P:MFiles.VAF.LicenseManagerBase`1.LicenseStatus">
            <summary>
            License status getter.
            </summary>
        </member>
        <member name="P:MFiles.VAF.LicenseManagerBase`1.HasContent">
            <summary>
            Whether the content is constructed.
            </summary>
        </member>
        <member name="P:MFiles.VAF.LicenseManagerBase`1.ServerLicense">
            <summary>
            Servers license status used for reference.
            </summary>
        </member>
        <member name="P:MFiles.VAF.LicenseManagerBase`1.Decoder">
            <summary>
            Decoder to use.
            </summary>
        </member>
        <member name="T:MFiles.VAF.ILicensedVaultApplication">
            <summary>
            Interface methods to implement by a license enabled application.
            Application does not need to inherit this interface but it will need to
            implement the methods defined in this.
            </summary>
        </member>
        <member name="M:MFiles.VAF.ILicensedVaultApplication.SetApplicationLicense(System.String)">
            <summary>
            Setting in new license content.
            Gets called after application instantiation before Initialize(), 
            and also when a new license is applyed from MF-Admin.
            </summary>
            <param name="license">The license content.</param>
        </member>
        <member name="M:MFiles.VAF.ILicensedVaultApplication.GetApplicationLicenseStatus(System.Boolean,System.String)">
            <summary>
            Called by platform, at any time, to request the license status, 
            either currently set license or the one given as argument.
            Returning the value MFApplicationLicenseStatusFormatError for a new license will prevent 
            the user from saving that license into the database.
            Make this method as fast as possible.
            </summary>
            <param name="newlicense">Use given license content instead of currently loaded.</param>
            <param name="license">If newlicense=true, return status of this license content.</param>
            <returns>Enumeration status</returns>
        </member>
        <member name="M:MFiles.VAF.ILicensedVaultApplication.GetApplicationLicenseDetails(System.Boolean,System.String)">
            <summary>
            Called by platform, at any time, to request the license details text, 
            either currenly set license or the one given as argument.
            Make this method as fast as possible.
            </summary>
            <param name="newlicense">Use given license content instead of currently loaded.</param>
            <param name="license">If newlicense=true, return status of this license content.</param>
            <returns>Details text</returns>
        </member>
        <member name="T:MFiles.VAF.AssemblyLocator">
            <summary>
            AssemblyLocator contains the implementation of the assembly resolve event for an AppDomain.
            </summary>
        </member>
        <member name="M:MFiles.VAF.AssemblyLocator.#ctor(System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="allowLoadingAssembliesForProbing">Specifies whether the assembly resolving event can load assemblies into the AppDomain.</param>
        </member>
        <member name="M:MFiles.VAF.AssemblyLocator.CurrentDomain_AssemblyResolve(System.Object,System.ResolveEventArgs)">
            <summary>
            Handler for the appdomain's assembly resolve event which is fired if the system can't locate an assembly.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="args">The event arguments.</param>
            <returns>The found assembly or null if it is not found.</returns>
        </member>
        <member name="M:MFiles.VAF.AssemblyLocator.IsCompatibleAssembly(System.Reflection.AssemblyName,System.Reflection.Assembly)">
            <summary>
            Checks if the loaded assembly assemblyToCheck is compatible with the requestedAssembly.
            </summary>
            <param name="requestedAssembly">The name of the assembly that the system is trying to resolve.</param>
            <param name="assemblyToCheck">The already loaded assembly that is checked.</param>
            <returns>True if the assemblies are compatible.</returns>
        </member>
        <member name="P:MFiles.VAF.AssemblyLocator.AllowLoadingAssembliesForProbing">
            <summary>
            Specifies whether the assembly resolving event can load assemblies into the AppDomain.
            </summary>
        </member>
        <member name="T:MFiles.VAF.AssemblyProxy">
            <summary>
            AssemblyProxy is an object that can be instantiated in a separate AppDomain and called from the primary AppDomain.
            </summary>
        </member>
        <member name="F:MFiles.VAF.AssemblyProxy.locator">
            <summary>
            The assembly locator object.
            </summary>
        </member>
        <member name="M:MFiles.VAF.AssemblyProxy.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.AssemblyProxy.AssemblyImplementsInterface(System.String,System.String)">
            <summary>
            Examines if the specified assembly contains a type that implements an interface with the given name.
            </summary>
            <param name="assemblyPath">The assembly file.</param>
            <param name="moduleTypeInterface">The interface name.</param>
            <returns>True if the assembly contains a type that implements an interface with the specified name.</returns>
        </member>
        <member name="T:MFiles.VAF.DynamicModuleLoader">
            <summary>
            The module loader that seeks and dynamically loads assemblies from assembly file locations.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Module.IModuleLoader">
            <summary>
            Interface for the module loader component.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Module.IModuleLoader.LoadModules(MFilesAPI.Vault,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Loads the modules. Creates an instance of each available class that implements IModule.
            </summary>
            <param name="vault">The vault object.</param>
            <param name="initializeModules">True if the modules should be also initialized.</param>
            <param name="disableInfoMessageLogging">True if the loader should not write informational messages to the event log.</param>
            <param name="throwExceptions">True if exceptions should be leaked through if retry-able errors are encountered in module initialization.</param>
            <returns>Collection of loaded modules.</returns>
        </member>
        <member name="M:MFiles.VAF.Module.IModuleLoader.LoadModule(System.Type,MFilesAPI.Vault,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Loads the module. Creates an instance of the module class that implements IModule.
            </summary>
            <param name="moduleType">Type of the module to locate.</param>
            <param name="vault">The vault object.</param>
            <param name="initializeModule">True if the module should be also initialized.</param>
            <param name="disableInfoMessageLogging">True if the loader should not write informational messages to the event log.</param>
            <param name="throwExceptions">True if exceptions should be leaked through if retry-able errors are encountered in module initialization.</param>
            <returns>IModule.</returns>
        </member>
        <member name="F:MFiles.VAF.DynamicModuleLoader.assemblyFolder">
            <summary>
            Path to the subfolder that contains the additional module assemblies.
            </summary>
        </member>
        <member name="F:MFiles.VAF.DynamicModuleLoader.manager">
            <summary>
            The module manager object that is given to the loaded modules.
            </summary>
        </member>
        <member name="F:MFiles.VAF.DynamicModuleLoader.mainAssembly">
            <summary>
            The application main assembly.
            </summary>
        </member>
        <member name="F:MFiles.VAF.DynamicModuleLoader.locator">
            <summary>
            The assembly locator object.
            </summary>
        </member>
        <member name="M:MFiles.VAF.DynamicModuleLoader.#ctor(MFiles.VAF.Module.IModuleManager,System.String,System.Reflection.Assembly)">
            <summary>
            Constructor.
            </summary>
            <param name="manager">The IModuleManager that is needed when initializing the created modules.</param>
            <param name="assemblyFolder">Name of the subfolder that contains the module assemblies.</param>
            <param name="mainAssembly">The application's main assembly. Modules are searched also from there. Can be null.</param>
        </member>
        <member name="M:MFiles.VAF.DynamicModuleLoader.LoadModules(MFilesAPI.Vault,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Loads the modules. Creates an instance of each available class that implements IModule.
            </summary>
            <param name="vault">The vault object.</param>
            <param name="initializeModules">Specifies whether the loaded modules should also load their configurations. Defaults to true.</param>
            <param name="disableInfoMessageLogging">True if the loader should not write informational messages to the event log.</param>
            <param name="throwExceptions">True if exceptions should be leaked through if retry-able errors are encountered in module initialization.</param>
            <returns>Collection of loaded modules.</returns>
        </member>
        <member name="M:MFiles.VAF.DynamicModuleLoader.LoadModule(System.Type,MFilesAPI.Vault,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Loads the specified module.
            </summary>
            <param name="moduleType">Type of the module to locate.</param>
            <param name="vault">The vault object.</param>
            <param name="initializeModule">Specifies whether the loaded module should also load its configuration. Defaults to true.</param>
            <param name="disableInfoMessageLogging">True if the loader should not write informational messages to the event log.</param>
            <param name="throwExceptions">True if exceptions should be leaked through if retry-able errors are encountered in module initialization.</param>
            <returns>Collection of loaded modules.</returns>
        </member>
        <member name="M:MFiles.VAF.DynamicModuleLoader.LoadSingleModule(System.Type)">
            <summary>
            
            </summary>
            <param name="moduleType">Type of the module to locate.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.DynamicModuleLoader.InitializeModule(MFilesAPI.Vault,MFiles.VAF.Module.IModule,System.Boolean)">
            <summary>
            Initializes a module.
            </summary>
            <param name="vault">Vault</param>
            <param name="module">IModule</param>
            <param name="throwExceptions">Throw exceptions flag.</param>
        </member>
        <member name="M:MFiles.VAF.DynamicModuleLoader.CreateModulesFromAssembly(System.Reflection.Assembly)">
            <summary>
            Creates instances of assembly's all classes that implement IModule.
            </summary>
            <param name="assembly">The assembly from which the modules are created.</param>
            <returns>Collection of modules.</returns>
        </member>
        <member name="M:MFiles.VAF.DynamicModuleLoader.CreateModuleFromAssembly(System.Type,System.Reflection.Assembly)">
            <summary>
            Tries to create instance of the specified module from the given assembly.
            </summary>
            <param name="moduleType">Type of the module to locate.</param>
            <param name="assembly">The assembly from which the module is created.</param>
            <returns>The created module or null.</returns>
        </member>
        <member name="T:MFiles.VAF.EventTracingForWindowsImpl">
            <summary>
            Class that implements the Event Source for Event Tracing for Windows framework.
            </summary>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindowsImpl.TraceBeforeEvent(System.String,System.String)">
            <summary>
            Sends the Before Event notification for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
            <param name="Name">The event handler name. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindowsImpl.TraceAfterEvent(System.String,System.String,System.String)">
            <summary>
            Sends the After Event notification for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
            <param name="Name">The event handler name. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
            <param name="Error">The error message, if the operation terminated with an error. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindowsImpl.TraceBeforeExtensionMethod(System.String,System.String)">
            <summary>
            Sends the Before Extension Method notification for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The extension method name.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindowsImpl.TraceAfterExtensionMethod(System.String,System.String,System.String)">
            <summary>
            Sends the After Extension Method notification for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The extension method name.</param>
            <param name="Error">The error message, if the operation terminated with an error. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindowsImpl.TraceBeforePropertyCustomizedAutomaticNumbering(System.String,System.String)">
            <summary>
            Sends the notification of property customized automatic numbering for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindowsImpl.TraceAfterPropertyCustomizedAutomaticNumbering(System.String,System.String,System.String)">
            <summary>
            Sends the notification of property customized automatic numbering for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
            <param name="Error">The error message, if the operation terminated with an error. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindowsImpl.TraceBeforePropertyCustomValueCalculation(System.String,System.String)">
            <summary>
            Sends the notification of property custom value calculation for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindowsImpl.TraceAfterPropertyCustomValueCalculation(System.String,System.String,System.String)">
            <summary>
            Sends the notification of property custom value calculation for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
            <param name="Error">The error message, if the operation terminated with an error. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindowsImpl.TraceBeforePropertyValueValidation(System.String,System.String)">
            <summary>
            Sends the notification of property value validation for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindowsImpl.TraceAfterPropertyValueValidation(System.String,System.String,System.String)">
            <summary>
            Sends the notification of property value validation for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
            <param name="Error">The error message, if the operation terminated with an error. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindowsImpl.TraceBeforeStateRunAction(System.String,System.String)">
            <summary>
            Sends the notification of state run action for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindowsImpl.TraceAfterStateRunAction(System.String,System.String,System.String)">
            <summary>
            Sends the notification of state run action for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
            <param name="Error">The error message, if the operation terminated with an error. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindowsImpl.TraceBeforeAutomaticStateTransitionTrigger(System.String,System.String)">
            <summary>
            Sends the notification of automatic state transition conditions evaluation for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindowsImpl.TraceAfterAutomaticStateTransitionTrigger(System.String,System.String,System.String)">
            <summary>
            Sends the notification of automatic state transition conditions evaluation for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
            <param name="Error">The error message, if the operation terminated with an error. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindowsImpl.TraceBeforeStatePostConditions(System.String,System.String)">
            <summary>
            Sends the notification of state postconditions evaluation for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindowsImpl.TraceAfterStatePostConditions(System.String,System.String,System.String)">
            <summary>
            Sends the notification of state postconditions evaluation for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
            <param name="Error">The error message, if the operation terminated with an error. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindowsImpl.TraceBeforeStatePreConditions(System.String,System.String)">
            <summary>
            Sends the notification of state preconditions evaluation for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindowsImpl.TraceAfterStatePreConditions(System.String,System.String,System.String)">
            <summary>
            Sends the notification of state preconditions evaluation for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
            <param name="Error">The error message, if the operation terminated with an error. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
        </member>
        <member name="T:MFiles.VAF.EventTracingForWindows">
            <summary>
            Wrapper class for the EventTracingForWindowsImpl class. This is needed because the classes that inherit from EventSource can't implement interfaces.
            The possibility to implement interfaces is added to .NET 4.6.
            </summary>
        </member>
        <member name="T:MFiles.VAF.IExecutionTrace">
            <summary>
            Interface for tracking the handler executions.
            </summary>
        </member>
        <member name="M:MFiles.VAF.IExecutionTrace.TraceBeforeEvent(System.String,System.String)">
            <summary>
            Sends the Before Event notification for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
            <param name="Name">The event handler name. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
        </member>
        <member name="M:MFiles.VAF.IExecutionTrace.TraceAfterEvent(System.String,System.String,System.String)">
            <summary>
            Sends the After Event notification for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
            <param name="Name">The event handler name. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
            <param name="Error">The error message, if the operation terminated with an error. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
        </member>
        <member name="M:MFiles.VAF.IExecutionTrace.TraceBeforeExtensionMethod(System.String,System.String)">
            <summary>
            Sends the Before Extension Method notification for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The extension method name.</param>
        </member>
        <member name="M:MFiles.VAF.IExecutionTrace.TraceAfterExtensionMethod(System.String,System.String,System.String)">
            <summary>
            Sends the After Extension Method notification for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The extension method name.</param>
            <param name="Error">The error message, if the operation terminated with an error. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
        </member>
        <member name="M:MFiles.VAF.IExecutionTrace.TraceBeforePropertyCustomizedAutomaticNumbering(System.String,System.String)">
            <summary>
            Sends the notification of property customized automatic numbering for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
        </member>
        <member name="M:MFiles.VAF.IExecutionTrace.TraceAfterPropertyCustomizedAutomaticNumbering(System.String,System.String,System.String)">
            <summary>
            Sends the notification of property customized automatic numbering for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
            <param name="Error">The error message, if the operation terminated with an error. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
        </member>
        <member name="M:MFiles.VAF.IExecutionTrace.TraceBeforePropertyCustomValueCalculation(System.String,System.String)">
            <summary>
            Sends the notification of property custom value calculation for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
        </member>
        <member name="M:MFiles.VAF.IExecutionTrace.TraceAfterPropertyCustomValueCalculation(System.String,System.String,System.String)">
            <summary>
            Sends the notification of property custom value calculation for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
            <param name="Error">The error message, if the operation terminated with an error. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
        </member>
        <member name="M:MFiles.VAF.IExecutionTrace.TraceBeforePropertyValueValidation(System.String,System.String)">
            <summary>
            Sends the notification of property value validation for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
        </member>
        <member name="M:MFiles.VAF.IExecutionTrace.TraceAfterPropertyValueValidation(System.String,System.String,System.String)">
            <summary>
            Sends the notification of property value validation for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
            <param name="Error">The error message, if the operation terminated with an error. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
        </member>
        <member name="M:MFiles.VAF.IExecutionTrace.TraceBeforeStateRunAction(System.String,System.String)">
            <summary>
            Sends the notification of state run action for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
        </member>
        <member name="M:MFiles.VAF.IExecutionTrace.TraceAfterStateRunAction(System.String,System.String,System.String)">
            <summary>
            Sends the notification of state run action for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
            <param name="Error">The error message, if the operation terminated with an error. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
        </member>
        <member name="M:MFiles.VAF.IExecutionTrace.TraceBeforeAutomaticStateTransitionTrigger(System.String,System.String)">
            <summary>
            Sends the notification of automatic state transition conditions evaluation for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
        </member>
        <member name="M:MFiles.VAF.IExecutionTrace.TraceAfterAutomaticStateTransitionTrigger(System.String,System.String,System.String)">
            <summary>
            Sends the notification of automatic state transition conditions evaluation for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
            <param name="Error">The error message, if the operation terminated with an error. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
        </member>
        <member name="M:MFiles.VAF.IExecutionTrace.TraceBeforeStatePostConditions(System.String,System.String)">
            <summary>
            Sends the notification of state postconditions evaluation for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
        </member>
        <member name="M:MFiles.VAF.IExecutionTrace.TraceAfterStatePostConditions(System.String,System.String,System.String)">
            <summary>
            Sends the notification of state postconditions evaluation for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
            <param name="Error">The error message, if the operation terminated with an error. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
        </member>
        <member name="M:MFiles.VAF.IExecutionTrace.TraceBeforeStatePreConditions(System.String,System.String)">
            <summary>
            Sends the notification of state preconditions evaluation for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
        </member>
        <member name="M:MFiles.VAF.IExecutionTrace.TraceAfterStatePreConditions(System.String,System.String,System.String)">
            <summary>
            Sends the notification of state preconditions evaluation for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
            <param name="Error">The error message, if the operation terminated with an error. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
        </member>
        <member name="F:MFiles.VAF.EventTracingForWindows.impl">
            <summary>
            The actual EventSource object.
            </summary>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindows.TraceBeforeEvent(System.String,System.String)">
            <summary>
            Sends the Before Event notification for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
            <param name="Name">The event handler name. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindows.TraceAfterEvent(System.String,System.String,System.String)">
            <summary>
            Sends the After Event notification for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
            <param name="Name">The event handler name. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
            <param name="Error">The error message, if the operation terminated with an error. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindows.TraceBeforeExtensionMethod(System.String,System.String)">
            <summary>
            Sends the Before Extension Method notification for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The extension method name.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindows.TraceAfterExtensionMethod(System.String,System.String,System.String)">
            <summary>
            Sends the After Extension Method notification for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The extension method name.</param>
            <param name="Error">The error message, if the operation terminated with an error. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindows.TraceBeforePropertyCustomizedAutomaticNumbering(System.String,System.String)">
            <summary>
            Sends the notification of property customized automatic numbering for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindows.TraceAfterPropertyCustomizedAutomaticNumbering(System.String,System.String,System.String)">
            <summary>
            Sends the notification of property customized automatic numbering for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
            <param name="Error">The error message, if the operation terminated with an error. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindows.TraceBeforePropertyCustomValueCalculation(System.String,System.String)">
            <summary>
            Sends the notification of property custom value calculation for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindows.TraceAfterPropertyCustomValueCalculation(System.String,System.String,System.String)">
            <summary>
            Sends the notification of property custom value calculation for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
            <param name="Error">The error message, if the operation terminated with an error. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindows.TraceBeforePropertyValueValidation(System.String,System.String)">
            <summary>
            Sends the notification of property value validation for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindows.TraceAfterPropertyValueValidation(System.String,System.String,System.String)">
            <summary>
            Sends the notification of property value validation for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
            <param name="Error">The error message, if the operation terminated with an error. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindows.TraceBeforeStateRunAction(System.String,System.String)">
            <summary>
            Sends the notification of state run action for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindows.TraceAfterStateRunAction(System.String,System.String,System.String)">
            <summary>
            Sends the notification of state run action for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
            <param name="Error">The error message, if the operation terminated with an error. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindows.TraceBeforeAutomaticStateTransitionTrigger(System.String,System.String)">
            <summary>
            Sends the notification of automatic state transition conditions evaluation for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindows.TraceAfterAutomaticStateTransitionTrigger(System.String,System.String,System.String)">
            <summary>
            Sends the notification of automatic state transition conditions evaluation for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
            <param name="Error">The error message, if the operation terminated with an error. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindows.TraceBeforeStatePostConditions(System.String,System.String)">
            <summary>
            Sends the notification of state postconditions evaluation for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindows.TraceAfterStatePostConditions(System.String,System.String,System.String)">
            <summary>
            Sends the notification of state postconditions evaluation for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
            <param name="Error">The error message, if the operation terminated with an error. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindows.TraceBeforeStatePreConditions(System.String,System.String)">
            <summary>
            Sends the notification of state preconditions evaluation for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
        </member>
        <member name="M:MFiles.VAF.EventTracingForWindows.TraceAfterStatePreConditions(System.String,System.String,System.String)">
            <summary>
            Sends the notification of state preconditions evaluation for Event Tracing for Windows framework. This can be used e.g. to produce performance logs.
            </summary>
            <param name="ActivityID">The current activity ID. Identifies the execution context.</param>
            <param name="Name">The handler method name.</param>
            <param name="Error">The error message, if the operation terminated with an error. Note: do not change the parameter name, because it appears as it is in the event log record.</param>
        </member>
        <member name="T:MFiles.VAF.ModularVaultApplicationBase">
            <summary>
            Common base class for application that was to use separate modules in the implementation.
            </summary>
        </member>
        <member name="T:MFiles.VAF.VaultApplicationBase">
            <summary>
            Vault application entry point
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.MethodSource">
            <summary>
            Implements method source for the inheriting class.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.IMethodSource">
            <summary>
            Interface for accessing methods decorated with the given attribute.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.IMethodSource.GetMethodsByAttribute``1(System.Boolean)">
            <summary>
            Returns a collection of methods decorated with the given attribute.
            </summary>
            <param name="unused">True to return unused handlers, false to return current used handlers.</param>
        </member>
        <member name="M:MFiles.VAF.Common.MethodSource.GetMethodsByAttribute``1(System.Boolean)">
            <summary>
            Returns a collection of the methods decorated with the given attribute.
            </summary>
            <param name="unused">True to return unused handlers, false to return current used handlers.</param>
            <returns>A collection of methods or an empty collection.</returns>
        </member>
        <member name="T:MFiles.VAF.IVaultApplication">
            <summary>
            Common interface for the vault applications.
            </summary>
        </member>
        <member name="M:MFiles.VAF.IVaultApplication.Install(MFilesAPI.Vault)">
            <summary>
            Called when the vault application is installed to the target vault. Called only once in the application lifetime.
            </summary>
            <param name="vault">The vault object.</param>
        </member>
        <member name="M:MFiles.VAF.IVaultApplication.Uninstall(MFilesAPI.Vault)">
            <summary>
            Called when the vault application is uninstalled from the target vault. Called only once in the application lifetime.
            </summary>
            <param name="vault">The vault object.</param>
        </member>
        <member name="M:MFiles.VAF.IVaultApplication.Initialize(MFilesAPI.Vault)">
            <summary>
            Called when the vault is brought online.
            </summary>
            <param name="vault">The vault object.</param>
        </member>
        <member name="M:MFiles.VAF.IVaultApplication.StartOperations(MFilesAPI.Vault)">
            <summary>
            Called when the vault operations are started.
            </summary>
            <param name="vault">The persistent vault object.</param>
        </member>
        <member name="M:MFiles.VAF.IVaultApplication.Uninitialize(MFilesAPI.Vault)">
            <summary>
            Called when the vault is put offline.
            </summary>
            <param name="vault">The vault object.</param>
        </member>
        <member name="P:MFiles.VAF.IVaultApplication.PermanentVault">
            <summary>
            The permanent vault object, runs as MFServer user.
            </summary>
        </member>
        <member name="P:MFiles.VAF.IVaultApplication.MetadataStructureValidator">
            <summary>
            The metadata structure validator object.
            </summary>
        </member>
        <member name="P:MFiles.VAF.IVaultApplication.ConfigurationStorage">
            <summary>
            The configuration storage object.
            </summary>
        </member>
        <member name="P:MFiles.VAF.IVaultApplication.ExecutionTracer">
            <summary>
            The execution tracer object.
            </summary>
        </member>
        <member name="P:MFiles.VAF.IVaultApplication.ApplicationDefinition">
            <summary>
            The application definition information.
            </summary>
        </member>
        <member name="P:MFiles.VAF.IVaultApplication.EventSourceIdentifier">
            <summary>
            Returns the vault application event source identifier that is used when logging to Windows event log.
            </summary>
        </member>
        <member name="P:MFiles.VAF.IVaultApplication.ApplicationRunningStatus">
            <summary>
            Returns the application running status. Indicates if the application is starting, stopping or running normally.
            </summary>
        </member>
        <member name="F:MFiles.VAF.VaultApplicationBase.eventSourceIdentifier">
            <summary>
            The application event source identifier that is used in conjunction with the Windows event log.
            </summary>
        </member>
        <member name="F:MFiles.VAF.VaultApplicationBase.applicationRunningStatus">
            <summary>
            Indicates the application running status. This is volatile because the value can be accessed from multiple threads to avoid caching delays -- the enumeration read and write itself is atomic.
            </summary>
        </member>
        <member name="F:MFiles.VAF.VaultApplicationBase.cacheEventSink">
            <summary>
            The vault listeners registered to update the metadatastructurecache backing vault instances.
            </summary>
        </member>
        <member name="F:MFiles.VAF.VaultApplicationBase.eventHandlerMethods">
            <summary>
            Collections of the event handling methods.
            </summary>
            <remarks>Found through reflection for the IEventHandlerAttribute.</remarks>
        </member>
        <member name="F:MFiles.VAF.VaultApplicationBase.vaultExtensionMethods">
            <summary>
            Collection of vault extension methods by name.
            </summary>
        </member>
        <member name="F:MFiles.VAF.VaultApplicationBase.unusedVaultExtensionNames">
            <summary>
            List of vault extension method names which are known but not used.
            </summary>
        </member>
        <member name="F:MFiles.VAF.VaultApplicationBase.stateMethods">
            <summary>
            Collection of state extension methods by state.
            </summary>
        </member>
        <member name="F:MFiles.VAF.VaultApplicationBase.stateTransitionMethods">
            <summary>
            Collection of state transition extension methods by state.
            </summary>
        </member>
        <member name="F:MFiles.VAF.VaultApplicationBase.propertyMethods">
            <summary>
            Collection of property extension methods by property.
            </summary>
        </member>
        <member name="F:MFiles.VAF.VaultApplicationBase.MaxTimeToWaitBackgroundOperationsAtUninitialization">
            <summary>
            Defines how long the background operations can be waited at uninitialization.
            </summary>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.NewEnvironment">
            <summary>
            Returns a new Event Handler environment, to be populated in the event handler script.
            </summary>
            <returns>A new environment object.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.SetCallingThreadCulture(MFilesAPI.Vault,MFilesAPI.SessionInfo)">
            <summary>
            Sets the current thread culture according to the current user's culture.
            </summary>
            <param name="vault">The vault object.</param>
            <param name="info">The current user session info.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.Run(MFiles.VAF.ScriptEnvironment)">
            <summary>
            Invokes all methods that have the MFEventHandlerAttribute and are applicable to this event.
            </summary>
            <param name="environment">The event and environment that the assembly should process.</param>
            <returns>The result object.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.ExecuteVaultExtensionMethod(MFiles.VAF.ScriptEnvironment)">
            <summary>
            Executes the defined vault extension method.
            </summary>
            <param name="environment">The environment that the assembly should process.</param>
            <returns>The return value as string.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.RunStateAction(MFiles.VAF.ScriptEnvironment)">
            <summary>
            Invokes the state run action handlers.
            </summary>
            <param name="environment">The environment that the assembly should process.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.EvaluateAutomaticStateTransitionTrigger(MFiles.VAF.ScriptEnvironment)">
            <summary>
            Invokes the registered automatic state transition condition handlers.
            </summary>
            <param name="environment">The environment that the assembly should process.</param>
            <returns>The result object that contains the condition evaluation result and possible error message for the user.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.EvaluateStatePreConditions(MFiles.VAF.ScriptEnvironment)">
            <summary>
            Invokes all the state precondition evaluation handlers.
            </summary>
            <param name="environment">The environment that the assembly should process.</param>
            <returns>The result object that contains the condition evaluation result and possible error message for the user.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.EvaluateStatePostConditions(MFiles.VAF.ScriptEnvironment)">
            <summary>
            Invokes all the state postcondition evaluation handlers.
            </summary>
            <param name="environment">The environment that the assembly should process.</param>
            <returns>The result object that contains the condition evaluation result and possible error message for the user.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.ValidatePropertyValue(MFiles.VAF.ScriptEnvironment)">
            <summary>
            Invokes all property validation handlers.
            </summary>
            <param name="environment">The environment that the assembly should process.</param>
            <returns>The result object that contains the validation result and possible error message for the user.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.GetPropertyAutomaticNumber(MFiles.VAF.ScriptEnvironment)">
            <summary>
            Invokes the property customized automatic numbering handler.
            </summary>
            <param name="environment">The environment that the assembly should process.</param>
            <returns>The calculated automatic number.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.GetPropertyCustomValue(MFiles.VAF.ScriptEnvironment)">
            <summary>
            Invokes the property custom value calculation handler.
            </summary>
            <param name="environment">The environment that the assembly should process.</param>
            <returns>The calculated custom value.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase._DebugRun(MFiles.VAF.Common.EventHandlerEnvironment,System.String,System.String,System.String)">
            <summary>
            The event handler implementation wrapper method for debug applications. This provides assistance for Vault Application Event Stack 
            Visual Studio extension.
            The Visual Studio plugin seeks this method name ("_DebugRun") and its parameter with their names. Parameter names and their
            order must not change.
            </summary>
            <param name="env">The environment object.</param>
            <param name="currentTransactionID">The transaction id for the current transaction.</param>
            <param name="parentTransactionID">The transaction id for the parent transaction.</param>
            <param name="eventHandlerName">The current event handler name.</param>
            <returns>The result object.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase._Run(MFiles.VAF.Common.EventHandlerEnvironment)">
            <summary>
            The event handler implementation.
            </summary>
            <param name="env">The environment object.</param>
            <returns>The result object.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.Install(MFilesAPI.Vault)">
            <summary>
            Installs the application.
            </summary>
            <param name="vault">The vault in which the application should be installed.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.Uninstall(MFilesAPI.Vault)">
            <summary>
            Uninstall the application.
            </summary>
            <param name="vault">The vault in which the application should be uninstalled.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.SetApplicationLicense(System.String)">
            <summary>
            Setting in new license content.
            Gets called after application instantiation before Initialize(), 
            and also when a new license is applyed from MF-Admin.
            </summary>
            <param name="license">The license content.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.GetApplicationLicenseDetails(System.Boolean,System.String)">
            <summary>
            Called by platform to request the license details text, either currenly loaded or the given license.
            </summary>
            <param name="newlicense">Use given license content instead of currently loaded</param>
            <param name="license">If newlicense=true, use this license content.</param>
            <returns>Details text</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.GetApplicationLicenseStatus(System.Boolean,System.String)">
            <summary>
            Called to request the status information of the application.
            </summary>
            <param name="newlicense"></param>
            <param name="license"></param>
            <returns>Enumeration status</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.TryNewLicense(System.String)">
            <summary>
            Return (temporary) license object from given new license content.
            </summary>
            <param name="license">New license content</param>
        </member>
        <member name="F:MFiles.VAF.VaultApplicationBase.trialLicenseSource">
            <summary>
            The source of current trialLicense.
            </summary>
        </member>
        <member name="F:MFiles.VAF.VaultApplicationBase.trialLicense">
            <summary>
            Cached trial license.
            </summary>
        </member>
        <member name="F:MFiles.VAF.VaultApplicationBase.hasVaultExtensionMethodEventHandlerProxy">
            <summary>
            A flag to remember, if a event handler for Vault Extension Methods is placed.
            Will be set to false, if the event handler is not needed.
            </summary>
        </member>
        <member name="F:MFiles.VAF.VaultApplicationBase.adminConfigurationsManager">
            <summary>
            Admin Configuration Manager to handle the wire-up between M-Files Admin and Dashboard Nodes.
            </summary>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.GetAndSetServerLicense(MFilesAPI.Vault)">
            <summary>
            Backward compatible way to request of the serverlicense info and give to the License.
            </summary>
            <param name="vault"></param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.Initialize(MFilesAPI.Vault)">
            <summary>
            Initializes the vault application in the specified vault. The method e.g. installs required event delegating scripts in the vault.
            </summary>
            <param name="vaultSrc">The target vault.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.PopulateConfigurationObjectsAndValidate(MFilesAPI.Vault)">
            <summary>
            Populates and validates objects marked with MFConfiguration attribute.
            </summary>
            <param name="vault">M-Files Vault.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.ValidateMetadataStructure(MFilesAPI.Vault)">
            <summary>
            Validates the application and all types in the same assembly.
            </summary>
            <param name="vault">The vault object.</param>
            <returns>The validation result.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.StartOperations(MFilesAPI.Vault)">
            <summary>
            Starts the vault operations in the specified vault. The method e.g. begins to use the vault in a background job.
            </summary>
            <param name="vaultPersistent">The persistable target vault.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.InstallApplication(MFilesAPI.Vault)">
            <summary>
            Protected overridable for the child classes to override instead of Install.
            InstallApplication can be used to prevent installation of the application.
            InstallApplication should also install any additional required components.
            InstallApplication cannot make changes to the vault structure.
            </summary>
            <param name="vault">A transactional vault, that has been cloned to this process.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.InitializeApplication(MFilesAPI.Vault)">
            <summary>
            Protected overridable for the child classes to override instead of Initialize.
            InitializeApplication can be used to make changes to the vault structure.
            </summary>
            <param name="vault">A transactional vault, that has been cloned to this process.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.StartApplication">
            <summary>
            Protected overridable for the child classes to override instead of StartOperations. PermanentVault is initialized and should be used as the vault connection.
            StartApplication should be used to start recurring background operations.
            </summary>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.UninitializeApplication(MFilesAPI.Vault)">
            <summary>
            Protected overridable for the child classes to override instead of Uninitialize.
            UninitializeApplication can be used make changes in the vault structure.
            </summary>
            <param name="vault">A transactional vault, that has been cloned to this process.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.UninstallApplication(MFilesAPI.Vault)">
            <summary>
            Protected overridable for the child classes to override instead of Uninitialize.
            UninstallApplication can be used to prevent uninstallation of the application.
            UninstallApplication should also uninstall any additional required components, that were installed by the InstallApplication-method.
            UninstallApplication cannot make changes to the vault structure.
            </summary>
            <param name="vault">A transactional vault, that has been cloned to this process.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.Uninitialize(MFilesAPI.Vault)">
            <summary>
            Uninitializes the vault application in the specified vault.
            </summary>
            <param name="vault">The target vault.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.UninitializeImpl(MFilesAPI.Vault)">
            <summary>
            Uninitializes the vault application in the specified vault.
            </summary>
            <param name="vault">The target vault.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.InitializeImpl(MFilesAPI.Vault)">
            <summary>
            Reload clear the internal data structures and loads the modules and their eventhandlers.
            </summary>
            <param name="vault">The target vault.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.PopulateConfigurationObjects(MFilesAPI.Vault)">
            <summary>
            Searches the vault application for marked configuration objects (MFConfiguration attribute) and loads and validates them.
            </summary>
            <param name="vault">The vault object.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.ReportMetadataStructureValidationErrors(MFilesAPI.Vault,MFiles.VAF.Configuration.ValidationResultBase)">
            <summary>
            Handles the validation results. By default only outputs errors to event log.
            </summary>
            <param name="vault">The vault object.</param>
            <param name="result">The configuration object validation results.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.PopulateConfigurationObjects(MFilesAPI.Vault,System.Object)">
            <summary>
            Populates a configuration objects from single host object.
            </summary>
            <param name="vault">The vault object.</param>
            <param name="hostObject">The host object that is being searched for the configuration objects.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.InstallHandlerDelegateScripts(MFilesAPI.Vault)">
            <summary>
            Generates and installs the VBScript delegate scripts for all handlers that are defined in the application.
            </summary>
            <param name="vault">The vault object.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.InstallEventHandlerAndVaultExtensionMethodDelegateScripts(MFilesAPI.Vault)">
            <summary>
            Generates and installs the VBScript delegate scripts for event handlers defined in the application.
            </summary>
            <param name="vault">The vault object.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.GetVaultExtensionMethodEventHandlerProxyName">
            <summary>
            Returns the name for the vault extension method event handler proxy of this Vault Application.
            </summary>
            <returns>The name of the Vault Extension method event handler proxy.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.InstallStateAndStateTransitionHandlerDelegateScripts(MFilesAPI.Vault)">
            <summary>
            Generates and installs the VBScript delegate scripts for state handlers defined in the application.
            </summary>
            <param name="vault">The vault object.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.InstallPropertyHandlerDelegateScripts(MFilesAPI.Vault)">
            <summary>
            Generates and installs the VBScript delegate scripts for property handlers defined in the application.
            </summary>
            <param name="vault">The vault object.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.ShouldUpdateScript(System.String,System.String,System.String)">
            <summary>
            Checks if the script should be updated. The script should be updated only if the old script was automatically generated
            and the new script differs from the old one.
            </summary>
            <param name="oldScript">The old, installed script.</param>
            <param name="newScript">The new script.</param>
            <param name="warningMessage">A warning message which will be written to the event log if it seems that the new script can be installed even though it should.</param>
            <returns>True if the script should be updated.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.IsGeneratedAutomatically(System.String)">
            <summary>
            Checks if the given script is generated automatically. This is decided by the existence of a line with certain content.
            </summary>
            <param name="script">The script to check.</param>
            <returns>True if the script is decided to be automatically generated.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.ClearAutomaticallyGeneratedScripts(MFilesAPI.Vault)">
            <summary>
            Clears the automatically generated scripts that are no longer used from the metadata structure (from property definitions and workflow states).
            </summary>
            <param name="vault">The vault object.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.IsHandlerDefinedForProperty(System.Int32,MFiles.VAF.Common.PropertyAttribute.AttributeType)">
            <summary>
            Checks if the  has handler(s) of the given type.
            </summary>
            <param name="propertyDef">The id of the property whose handlers should be checked.</param>
            <param name="type">The handler type to check.</param>
            <returns>True if the specified property has handler(s) of the defined type.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.IsHandlerDefinedForState(System.Int32,MFiles.VAF.Common.StateAttribute.AttributeType)">
            <summary>
            Checks if the state has handler(s) of the given type.
            </summary>
            <param name="state">The id of the state whose handlers should be checked.</param>
            <param name="type">The handler type to check.</param>
            <returns>True if the specified state has handler(s) of the defined type.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.IsHandlerDefinedForStateTransition(System.Int32)">
            <summary>
            Checks if the state has handler(s) of the given type.
            </summary>
            <param name="stateTransition">The id of the state transition whose handlers should be checked.</param>
            <returns>True if the specified state transition has handler(s).</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.LoadHandlerMethods(MFilesAPI.Vault)">
            <summary>
            Finds and caches all event handler methods and vault extension methods in the assembly. The methods are decorated with specific attributes.
            </summary>
            <param name="vault">The vault in which to operate.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.RegisterMethodsFromSource(MFiles.VAF.Common.IMethodSource,MFilesAPI.Vault)">
            <summary>
            Registers all methods from the specified source.
            </summary>
            <param name="source">The method source.</param>
            <param name="vault">The vault object.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.RegisterEventHandlers(System.Reflection.MethodInfo,System.Object,MFilesAPI.Vault)">
            <summary>
            Registers the specified event handler method.
            </summary>
            <param name="method">Method that is being registered.</param>
            <param name="instance">The object that hosts this particular method.</param>
            <param name="vault">The vault object.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.RegisterVaultExtensionMethodHandler(System.Reflection.MethodInfo,System.Object,MFilesAPI.Vault)">
            <summary>
            Registers the specified vault extension method.
            </summary>
            <param name="method">Method that is being registered.</param>
            <param name="instance">The object that hosts this particular method.</param>
            <param name="vault">The vault object.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.RegisterStateHandler(System.Reflection.MethodInfo,System.Object,MFilesAPI.Vault)">
            <summary>
            Registers the specified state handler method.
            </summary>
            <param name="method">Method that is being registered.</param>
            <param name="instance">The object that hosts this particular method.</param>
            <param name="vault">The vault object.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.RegisterStateTransitionHandler(System.Reflection.MethodInfo,System.Object,MFilesAPI.Vault)">
            <summary>
            Registers the specified state transition handler method.
            </summary>
            <param name="method">Method that is being registered.</param>
            <param name="instance">The object that hosts this particular method.</param>
            <param name="vault">The vault object.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.RegisterPropertyHandler(System.Reflection.MethodInfo,System.Object,MFilesAPI.Vault)">
            <summary>
            Registers the specified property handler method.
            </summary>
            <param name="method">Method that is being registered.</param>
            <param name="instance">The object that hosts this particular method.</param>
            <param name="vault">The vault object.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.RegisterHandlers``1(MFiles.VAF.Common.IMethodSource,System.Action{System.Reflection.MethodInfo,System.Object,MFilesAPI.Vault},MFilesAPI.Vault)">
            <summary>
            Generic method for collecting all methods from the given source that are decorated with the specified attribute type.
            </summary>
            <typeparam name="T">The attribute type that is being searched.</typeparam>
            <param name="source">The object that is being searched for the methods.</param>
            <param name="registerAction">The action that is executed for all the found methods.</param>
            <param name="vault">The vault object.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.CollectUnusedHandlers(MFiles.VAF.Common.IMethodSource)">
            <summary>
            Method for collecting extension method names which are unused.
            </summary>
            <param name="source">The object that is being searched for the methods.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.GetDelegateScriptTemplate(System.String)">
            <summary>
            Method for reading the VBScript template from the resources.
            </summary>
            <param name="templateName">The VBScript resource name.</param>
            <returns>The found VBScript template as string.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.GetEventHandlerDelegateScript(MFilesAPI.MFEventHandlerType)">
            <summary>
            Method for retrieving the VBScript delegation code for the certain event type.
            </summary>
            <param name="eventType">The event handler type for which the script is queried for.</param>
            <returns>The script as string.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.GetVaultExtensionMethodDelegateScript(System.String)">
            <summary>
            Method for retrieving the VBScript delegation code for the certain vault extension method.
            </summary>
            <param name="methodName">The vault extension method name for which the script is queried for.</param>
            <returns>The script as string.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.GetStateHandlerDelegateScript(MFiles.VAF.Common.StateAttribute.AttributeType)">
            <summary>
            Method for retrieving the VBScript delegation code for the certain state.
            </summary>
            <param name="type">The state handler type for which the script is queried for.</param>
            <returns>The script as string.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.GetStateTransitionHandlerDelegateScript">
            <summary>
            Method for retrieving the VBScript delegation code for a certain state transition.
            </summary>
            <returns>The script as string.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.GetPropertyHandlerDelegateScript(MFiles.VAF.Common.PropertyAttribute.AttributeType)">
            <summary>
            Method for retrieving the VBScript delegation code for the certain state.
            </summary>
            <param name="type">The property handler type for which the script is queried for.</param>
            <returns>The script as string.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.CreateConfigurationStorage">
            <summary>
            Overridable factory method to create the configuration storage object.
            </summary>
            <returns>The created configuration storage object.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.CreateMetadataStructureValidator">
            <summary>
            Overridable factory method to create the metadata structure validator component.
            </summary>
            <returns>The instantiated metadata structure validator object.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.CreateExecutionTracer">
            <summary>
            Overridable factory method to create the execution tracer object.
            </summary>
            <returns>The instantiated execution tracer object.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.CreateBackgroundOperationsManager(System.String)">
            <summary>
            Overridable factory method to create the background operations manager.
            </summary>
            <param name="vaultName">The name of the vault.</param>
            <returns>The instantiated background operations manager object.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.CreateEventHandlerMethodInfo(System.Reflection.MethodInfo,System.Object,MFiles.VAF.Common.EventHandlerAttribute)">
            <summary>
            Overridable factory method to create the event handler method info.
            </summary>
            <returns>The created method info object.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.CreateVaultExtensionMethodInfo(System.Reflection.MethodInfo,System.Object,MFiles.VAF.Common.VaultExtensionMethodAttribute)">
            <summary>
            Overridable factory method to create the vault extension method info.
            </summary>
            <returns>The created method info object.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.CreateStateMethodInfo(System.Reflection.MethodInfo,System.Object,MFiles.VAF.Common.StateAttribute)">
            <summary>
            Overridable factory method to create the state method info.
            </summary>
            <returns>The created method info object.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.CreateStateTransitionMethodInfo(System.Reflection.MethodInfo,System.Object,MFiles.VAF.Common.StateTransitionAttribute)">
            <summary>
            Overridable factory method to create the state transition method info.
            </summary>
            <returns>The created method info object.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.CreatePropertyMethodInfo(System.Reflection.MethodInfo,System.Object,MFiles.VAF.Common.PropertyAttribute)">
            <summary>
            Overridable factory method to create the property method info.
            </summary>
            <returns>The created method info object.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.ConvertToLocalVault(MFilesAPI.Vault,System.Boolean)">
            <summary>
            Overridable factory method for local vault objects. Converts the vault object to locally used and possibly 
            stored vault object. This method allows the implementations to improve the performance by using
            in-process vault. Overriding functionality may e.g. implement local caching features to the vault.
            </summary>
            <param name="vault">The original vault object.</param>
            <param name="prepareForPersisting">True if the vault object should be prepared for persisting.</param>
            <returns>The converted vault object.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.GetMetadataStructureCache(MFilesAPI.Vault,System.Boolean)">
            <summary>
            Creates the metadata structure cache for the given vault. If the caching is not desired then
            this method should be overridden and it should return null.
            </summary>
            <param name="vault">The vault object.</param>
            <param name="refresh">Tells if the cache should be refreshed or re-created before returning it.</param>
            <returns>The metadata structure cache object for the given vault or null is cache is not used.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.CreateMetadataStructureCacheEventSink(MFilesAPI.Vault,MFiles.VAF.MetadataCache.IMetadataStructureCacheUpdate)">
            <summary>
            Creates the metadata structure cache event sink that can be used to update the cache based on events. Currently
            only updating the users, user groups and logins is supported. If one does not want to register the event handlers
            and update the cache then this method should be overridden and it should return null.
            </summary>
            <param name="vault">The vault object.</param>
            <param name="cache">The updatable cache pobject that should be the target of the updates.</param>
            <returns>The created cache updater object or null if cache updating is not wanted.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.GetEventHandlerEnvironment(MFiles.VAF.ScriptEnvironment)">
            <summary>
            Creates the local event handler environment.
            </summary>
            <param name="scriptEnv">The environment object from foreign platform (e.g. VBScript).</param>
            <returns>The local event handler environment.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.GetPropertyEnvironment(MFiles.VAF.ScriptEnvironment)">
            <summary>
            Creates the local property environment.
            </summary>
            <param name="scriptEnv">The environment object from foreign platform (e.g. VBScript).</param>
            <returns>The local property environment.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.GetStateEnvironment(MFiles.VAF.ScriptEnvironment)">
            <summary>
            Creates the local state environment.
            </summary>
            <param name="scriptEnv">The environment object from foreign platform (e.g. VBScript).</param>
            <returns>The local state environment.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.GetStateTransitionEnvironment(MFiles.VAF.ScriptEnvironment)">
            <summary>
            Creates the local state environment.
            </summary>
            <param name="scriptEnv">The environment object from foreign platform (e.g. VBScript).</param>
            <returns>The local state environment.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.GetPrivateMethodSources">
            <summary>
            Gets private method sources
            </summary>
            <returns>Method sources.</returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.AssertApplicationInStableState(MFiles.VAF.Common.EnvironmentBase)">
            <summary>
            Throws an exception if the application is in a state where it 
            cannot properly handle server events.
            </summary>
            <param name="env">Currently running environment, CanBeNull.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.ReinitializeMetadataStructureCache(MFilesAPI.Vault)">
            <summary>
            Reinitialize the metadata structure cache.
            </summary>
            <param name="vault">The vault object to use.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.AddVaultExtensionMethod(System.String,MFiles.VAF.VaultExtensionMethodInfo)">
            <summary>
            Adds a vault extension method that does not have a separate event handler proxy.
            </summary>
            <param name="methodIdentifier">The identifier that is used to call the vault extension method.</param>
            <param name="methodInfo">The Vault Extension Method details. Also contains the actual method to call when the Vault Extension Method is executed.</param>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.RemoveVaultExtensionMethod(System.String)">
            <summary>
            Removes a vault extension method that does not have a separate event handler proxy.
            </summary>
            <param name="methodIdentifier"></param>
        </member>
        <member name="P:MFiles.VAF.VaultApplicationBase.PermanentVault">
            <summary>
            The permanent vault object, runs as MFServer user.
            </summary>
        </member>
        <member name="P:MFiles.VAF.VaultApplicationBase.ConfigurationStorage">
            <summary>
            The configuration storage object.
            </summary>
        </member>
        <member name="P:MFiles.VAF.VaultApplicationBase.MetadataStructureValidator">
            <summary>
            The metadata structure validator object.
            </summary>
        </member>
        <member name="P:MFiles.VAF.VaultApplicationBase.ExecutionTracer">
            <summary>
            The execution tracer object.
            </summary>
        </member>
        <member name="P:MFiles.VAF.VaultApplicationBase.BackgroundOperations">
            <summary>
            A manager for creating background operations.
            </summary>
        </member>
        <member name="P:MFiles.VAF.VaultApplicationBase.MetadataStructureValidationResult">
            <summary>
            The results from the metadata structure validation.
            </summary>
        </member>
        <member name="P:MFiles.VAF.VaultApplicationBase.ApplicationDefinition">
            <summary>
            The application definition information.
            </summary>
        </member>
        <member name="P:MFiles.VAF.VaultApplicationBase.EventSourceIdentifier">
            <summary>
            Returns the vault application event source identifier that is used when logging to Windows event log.
            </summary>
        </member>
        <member name="P:MFiles.VAF.VaultApplicationBase.License">
            <summary>
            The optional license of the application.
            Set this in inherited class constructor to get license.
            </summary>
        </member>
        <member name="P:MFiles.VAF.VaultApplicationBase.ApplicationRunningStatus">
            <summary>
            Returns the application running status. Indicates if the application is starting, stopping or running normally.
            </summary>
        </member>
        <member name="T:MFiles.VAF.VaultApplicationBase.MethodInfoPriorityComparer`1">
            <summary>
            Priority comparer for event handler infos.
            </summary>
        </member>
        <member name="M:MFiles.VAF.VaultApplicationBase.MethodInfoPriorityComparer`1.Compare(`0,`0)">
            <summary>
            Compare by priority.
            </summary>
            <param name="l">The left operand for compare operation.</param>
            <param name="r">The right operand for compare operation.</param>
            <returns>The comparison result.</returns>
        </member>
        <member name="T:MFiles.VAF.Module.IModuleManager">
            <summary>
            The interface that represents the module container for all modules of the application.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Module.IModuleManager.GetModule(System.String)">
            <summary>
            Gets a module reference from the module manager.
            </summary>
            <param name="moduleName">The module name.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Module.IModuleManager.AllowLoadOfModule(MFiles.VAF.Module.IModule)">
            <summary>
            Return whether this module should be loaded or not.
            </summary>
            <param name="module">The module in question.</param>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Module.IModuleManager.ModuleLoader">
            <summary>
            The module loader object.
            </summary>
        </member>
        <member name="M:MFiles.VAF.ModularVaultApplicationBase.IsModuleOperational(MFiles.VAF.Module.IModule,System.Boolean)">
            <summary>
            Checks whether the module is enabled. To be enabled,
            there is no need for configuration, or the configuration
            is enabled.
            </summary>
            <param name="module">The module to be checked</param>
            <param name="checkValidity">Whether to check if the module is also valid</param>
            <returns>Boolean indicating whether the module is enabled</returns>
        </member>
        <member name="F:MFiles.VAF.ModularVaultApplicationBase.modulesInError">
            <summary>
            Flag identifying if any of the enabled loaded modules is in error state.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ModularVaultApplicationBase.modules">
            <summary>
            Loaded modules.
            </summary>
        </member>
        <member name="M:MFiles.VAF.ModularVaultApplicationBase.GetModule(System.String)">
            <summary>
            Returns the loaded module instance based on the given configuration key.
            </summary>
            <param name="moduleName">Configuration configuration key of the wanted module.</param>
            <returns>IModule object of the wanted module, or null if not found.</returns>
        </member>
        <member name="M:MFiles.VAF.ModularVaultApplicationBase.GetAppModule(System.String)">
            <summary>
            Returns the loaded module instance based on the given configuration key.
            </summary>
            <param name="moduleName">Configuration configuration key of the wanted module.</param>
            <returns>IModule object of the wanted module, or null if not found.</returns>
        </member>
        <member name="M:MFiles.VAF.ModularVaultApplicationBase.Install(MFilesAPI.Vault)">
            <summary>
            Installs the application.
            </summary>
            <param name="vault">The vault in which the application should be installed.</param>
        </member>
        <member name="M:MFiles.VAF.ModularVaultApplicationBase.Initialize(MFilesAPI.Vault)">
            <summary>
            Initializes the vault application in the specified vault. The method e.g. installs required event delegating scripts in the vault.
            </summary>
            <param name="vaultSrc">The target vault.</param>
        </member>
        <member name="M:MFiles.VAF.ModularVaultApplicationBase.CreateModuleLoader">
            <summary>
            Overridable factory method to create the module loader component.
            </summary>
            <returns>The instantiated module loader.</returns>
        </member>
        <member name="M:MFiles.VAF.ModularVaultApplicationBase.CreateMetadataStructureValidator">
            <summary>
            Overridable factory method to create the metadata structure validator component.
            </summary>
            <returns>The instantiated metadata structure validator object.</returns>
        </member>
        <member name="M:MFiles.VAF.ModularVaultApplicationBase.AllowLoadOfModule(MFiles.VAF.Module.IModule)">
            <summary>
            Return whether this module should be loaded or not.
            </summary>
            <param name="module">The module in question.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.ModularVaultApplicationBase.LoadModules(MFilesAPI.Vault)">
            <summary>
            Create and add instance of each available IModule class into modules collection.
            </summary>
            <param name="vault">The vault object.</param>
        </member>
        <member name="M:MFiles.VAF.ModularVaultApplicationBase.LoadHandlerMethods(MFilesAPI.Vault)">
            <summary>
            Finds and caches all event handler methods and vault extension methods in the assembly. The methods are decorated with specific attributes.
            </summary>
            <param name="vault">The vault in which to operate.</param>
        </member>
        <member name="M:MFiles.VAF.ModularVaultApplicationBase.StartApplication">
            <summary>
            Starts the modules.
            </summary>
        </member>
        <member name="M:MFiles.VAF.ModularVaultApplicationBase.InitializeImpl(MFilesAPI.Vault)">
            <summary>
            Reload clears the internal data structures and loads the modules and their eventhandlers.
            </summary>
            <param name="vault">The target vault.</param>
        </member>
        <member name="M:MFiles.VAF.ModularVaultApplicationBase.UninitializeImpl(MFilesAPI.Vault)">
            <summary>
            Uninitializes the vault application in the specified vault.
            </summary>
            <param name="vault">The target vault.</param>
        </member>
        <member name="M:MFiles.VAF.ModularVaultApplicationBase.ValidateModuleMetadataStructure(MFilesAPI.Vault)">
            <summary>
            Override for validating the module assemblies.
            </summary>
            <param name="vault">The vault object.</param>
            <returns>The result of the validation.</returns>
        </member>
        <member name="M:MFiles.VAF.ModularVaultApplicationBase.PopulateModuleConfigurationObjects(MFilesAPI.Vault)">
            <summary>
            Searches the modules for marked configuration objects (MFConfiguration attribute) and loads and validates them.
            </summary>
            <param name="vault">The vault object.</param>
        </member>
        <member name="M:MFiles.VAF.ModularVaultApplicationBase.ReportModuleMetadataStructureValidationErrors(MFilesAPI.Vault,MFiles.VAF.Configuration.ValidationResultBase)">
            <summary>
            Handles the validation results. By default only outputs errors to event log.
            </summary>
            <param name="vault">The vault object.</param>
            <param name="result">The configuration object validation results.</param>
        </member>
        <member name="M:MFiles.VAF.ModularVaultApplicationBase.Reload(MFilesAPI.Vault)">
            <summary>
            Reload clear the internal data structures and loads the modules and their eventhandlers.
            </summary>
            <param name="vault">The target vault.</param>
        </member>
        <member name="M:MFiles.VAF.ModularVaultApplicationBase.AssertApplicationInStableState(MFiles.VAF.Common.EnvironmentBase)">
            <summary>
            Throws an exception if the application is in a state where it 
            cannot properly handle server events.
            </summary>
            <param name="env">Currently running environment, CanBeNull.</param>
        </member>
        <member name="P:MFiles.VAF.ModularVaultApplicationBase.ModuleLoader">
            <summary>
            The module loader object.
            </summary>
        </member>
        <member name="T:MFiles.VAF.ScriptCancellationException">
            <summary>
            Exception of which only the message part is displayed to the user.
            </summary>
        </member>
        <member name="M:MFiles.VAF.ScriptCancellationException.#ctor(System.String)">
            <summary>
            Initializes new exception.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:MFiles.VAF.ScriptEnvironment">
            <summary>
            A COM-Visible object that contains variables available to a script.
            </summary>
            <remarks>
            This should only be used via COM in the VBScript delegation.
            </remarks>
        </member>
        <member name="F:MFiles.VAF.ScriptEnvironment.Type">
            <summary>
            The event handler type. Set by the calling VBScript event handler.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ScriptEnvironment.CurrentUserID">
            <summary>
            The current user id. Set by the calling VBScript event handler.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ScriptEnvironment.CurrentUserSessionInfo">
            <summary>
            The session info that represents the current (invoker) user session.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ScriptEnvironment.DisplayID">
            <summary>
            The display id of the target object or value list item. Set by the calling VBScript event handler.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ScriptEnvironment.StateID">
            <summary>
            The state id. Set by the calling VBScript event handler.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ScriptEnvironment.StateTransitionID">
            <summary>
            The state transition id. Set by the calling VBScript event handler.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ScriptEnvironment.InitialNextStateID">
            <summary>
            The initial next state id. Set by the calling VBScript event handler.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ScriptEnvironment.FileTransferSessionID">
            <summary>
            The file transfer session id. Set by the calling VBScript event handler.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ScriptEnvironment.FileVer">
            <summary>
            File version identifier. Set by the calling VBScript event handler.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ScriptEnvironment.LoggedOutUserID">
            <summary>
            The logged out user id. Set by the calling VBScript event handler.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ScriptEnvironment.LoginAccount">
            <summary>
            The login account. Set by the calling VBScript event handler.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ScriptEnvironment.ObjectAccessControlList">
            <summary>
            Object ACL. Set by the calling VBScript event handler.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ScriptEnvironment.ObjVer">
            <summary>
            Object version identifier. Set by the calling VBScript event handler.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ScriptEnvironment.PropertyValues">
            <summary>
            Property values. Set by the calling VBScript event handler.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ScriptEnvironment.ValueListItem">
            <summary>
            The value list item. Set by the calling VBScript event handler.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ScriptEnvironment.Vault">
            <summary>
            The vault object. Set by the calling VBScript event handler.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ScriptEnvironment.VaultSharedVariables">
            <summary>
            Vault shared variables. Set by the calling VBScript event handler.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ScriptEnvironment.UserAccount">
            <summary>
            User accout object. Set by the calling VBScript event handler.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ScriptEnvironment.UserGroupAdmin">
            <summary>
            User group admin object. Set by the calling VBScript event handler.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ScriptEnvironment.Input">
            <summary>
            The input string. Set by the calling VBScript event handler.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ScriptEnvironment.CurrentTransactionID">
            <summary>
            Current transaction id object. Set by the calling VBScript event handler.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ScriptEnvironment.ParentTransactionID">
            <summary>
            Parent transaction id object. Set by the calling VBScript event handler.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ScriptEnvironment.MasterTransactionID">
            <summary>
            Master transaction id object. Set by the calling VBScript event handler.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ScriptEnvironment.ActivityID">
            <summary>
            Activity id object. Set by the calling VBScript event handler.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ScriptEnvironment.TransactionCache">
            <summary>
            Transaction cache object. Set by the calling VBScript event handler.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ScriptEnvironment.PropertyDefinition">
            <summary>
            Property definition object. Set by the calling VBScript event handler.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ScriptEnvironment.PropertyValue">
            <summary>
            Property value object. Set by the calling VBScript event handler.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ScriptEnvironment.LastUsed">
            <summary>
            The last used automatic number. Is used only with automatic numbering. Set by the calling VBScript event handler.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ScriptEnvironment.VaultExtensionMethodName">
            <summary>
            The vault extension method to call.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ScriptEnvironment.View">
            <summary>
            View object. Set by the calling VBScript event handler.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ScriptEnvironment.IsCancellable">
            <summary>
            Tells if the operation can be cancelled by throwing an error.
            </summary>
        </member>
        <member name="M:MFiles.VAF.ScriptEnvironment.#ctor">
            <summary>
            Argumentless constructor required for COM Interop.
            </summary>
        </member>
        <member name="M:MFiles.VAF.ScriptEnvironment.GetEventHandlerEnvironment(MFiles.VAF.ScriptEnvironment)">
            <summary>
            Implicitly converts a ScriptEnvironment object to a EventHandlerEnvironment.
            </summary>
            <param name="env">The environment object containing untyped parameters.</param>
            <returns>The created typed environment object.</returns>
        </member>
        <member name="M:MFiles.VAF.ScriptEnvironment.GetStateEnvironment(MFiles.VAF.ScriptEnvironment)">
            <summary>
            Implicitly converts a ScriptEnvironment object to a StateEnvironment.
            </summary>
            <param name="env">The environment object containing untyped parameters.</param>
            <returns>The created typed environment object.</returns>
        </member>
        <member name="M:MFiles.VAF.ScriptEnvironment.GetStateTransitionEnvironment(MFiles.VAF.ScriptEnvironment)">
            <summary>
            Implicitly converts a ScriptEnvironment object to a StateTransitionEnvironment.
            </summary>
            <param name="env">The environment object containing untyped parameters.</param>
            <returns>The created typed environment object.</returns>
        </member>
        <member name="M:MFiles.VAF.ScriptEnvironment.GetPropertyEnvironment(MFiles.VAF.ScriptEnvironment)">
            <summary>
            Implicitly converts a ScriptEnvironment object to a PropertyEnvironment.
            </summary>
            <param name="env">The environment object containing untyped parameters.</param>
            <returns>The created typed environment object.</returns>
        </member>
        <member name="T:MFiles.VAF.ScriptResult">
            <summary>
            Represents the results of a Compliance Kit handler execution.
            </summary>
        </member>
        <member name="M:MFiles.VAF.ScriptResult.#ctor">
            <summary>
            Argumentless constructor required for COM Interop.
            </summary>
        </member>
        <member name="P:MFiles.VAF.ScriptResult.Error">
            <summary>
            Indicates whether an error has occured.
            </summary>
        </member>
        <member name="P:MFiles.VAF.ScriptResult.ErrorMessage">
            <summary>
            Provides an error message if an error has occured.
            </summary>
        </member>
        <member name="P:MFiles.VAF.ScriptResult.Exception">
            <summary>
            The last exception to occur (if any).
            </summary>
        </member>
        <member name="P:MFiles.VAF.ScriptResult.VaultExtensionMethodOutput">
            <summary>
            Any output value that was set during the event.
            </summary>
        </member>
        <member name="P:MFiles.VAF.ScriptResult.AllowAutomaticStateTransition">
            <summary>
            An output value that tells whether the automatic state transition is allowed.
            </summary>
        </member>
        <member name="P:MFiles.VAF.ScriptResult.NextStateID">
            <summary>
            If automatic state transition is allowed then this output value contains the ID of the next state.
            </summary>
        </member>
        <member name="P:MFiles.VAF.ScriptResult.ConditionsOK">
            <summary>
            True if the state pre- or post conditions are met.
            </summary>
        </member>
        <member name="P:MFiles.VAF.ScriptResult.ValidationOK">
            <summary>
            True if the propery validation was successfull.
            </summary>
        </member>
        <member name="P:MFiles.VAF.ScriptResult.ScriptCancelled">
            <summary>
            True if the execution of the script was cancelled.
            </summary>
        </member>
        <member name="P:MFiles.VAF.ScriptResult.Message">
            <summary>
            Message that is passed to the scripting engine for MFScriptCancel.
            </summary>
        </member>
        <member name="T:MFiles.VAF.ApplicationRunningStatus">
            <summary>
            The application running statuses.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ApplicationRunningStatus.Uninitialized">
            <summary>
            Application running status is not set.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ApplicationRunningStatus.Initializing">
            <summary>
            Application is starting.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ApplicationRunningStatus.Running">
            <summary>
            Application is running.
            </summary>
        </member>
        <member name="F:MFiles.VAF.ApplicationRunningStatus.Uninitializing">
            <summary>
            Application is stopping.
            </summary>
        </member>
        <member name="T:MFiles.VAF.IMethodInfoBase">
            <summary>
            IMethodInfoBase is a base interface for method info interface that can be ordered according to the priority.
            </summary>
        </member>
        <member name="P:MFiles.VAF.IMethodInfoBase.LogString">
            <summary>
            Returns a string for logging that contains the method name and declaring type.
            </summary>
        </member>
        <member name="P:MFiles.VAF.IMethodInfoBase.Priority">
            <summary>
            The method call priority. Calls with higher priority should be executed before calls with lower priority.
            </summary>
        </member>
        <member name="T:MFiles.VAF.IEventHandlerMethodInfo">
            <summary>
            Interface for executing the event handler methods.
            </summary>
        </member>
        <member name="M:MFiles.VAF.IEventHandlerMethodInfo.Execute(MFiles.VAF.Common.EventHandlerEnvironment,MFiles.VAF.IExecutionTrace)">
            <summary>
            Conditionally executes the event handler method. The event handler is tested against the environment and if the filters allow
            then the event handler is actually executed.
            </summary>
            <param name="environment">The environment parameters.</param>
            <param name="trace">The execution tracer object for recording the operation starting end ending.</param>
        </member>
        <member name="T:MFiles.VAF.IVaultExtensionMethodInfo">
            <summary>
            Interface for executing the vault extension methods.
            </summary>
        </member>
        <member name="M:MFiles.VAF.IVaultExtensionMethodInfo.Execute(MFiles.VAF.Common.EventHandlerEnvironment,MFiles.VAF.IExecutionTrace)">
            <summary>
            Executes the vault extension method.
            </summary>
            <param name="environment">The environment parameters.</param>
            <param name="trace">The execution tracer object for recording the operation starting end ending.</param>
            <returns>The vault extension method return value.</returns>
        </member>
        <member name="P:MFiles.VAF.IVaultExtensionMethodInfo.HasSeparateEventHandlerProxy">
            <summary>
            Returns if this extension method has a separate event handler proxy.
            </summary>
        </member>
        <member name="T:MFiles.VAF.IStateMethodInfo">
            <summary>
            Interface for executing state action and condition evaluation methods.
            </summary>
        </member>
        <member name="M:MFiles.VAF.IStateMethodInfo.RunAction(MFiles.VAF.Common.StateEnvironment,MFiles.VAF.IExecutionTrace)">
            <summary>
            Executes a state action.
            </summary>
            <param name="environment">The environment parameters.</param>
            /// <param name="trace">The execution tracer object for recording the operation starting end ending.</param>
            <returns>True if the method was really executed.</returns>
        </member>
        <member name="M:MFiles.VAF.IStateMethodInfo.EvaluatePreConditions(MFiles.VAF.Common.StateEnvironment,MFiles.VAF.IExecutionTrace,System.Boolean@,System.String@)">
            <summary>
            Evaluates the state pre-conditions.
            </summary>
            <param name="environment">The environment parameters.</param>
            <param name="trace">The execution tracer object for recording the operation starting end ending.</param>
            <param name="conditionsOk">Output parameter for the condition evaluation result. True if the conditions were met.</param>
            <param name="message">Output parameter for the error message if the conditions were not met.</param>
            <returns>True if the method was really executed.</returns>
        </member>
        <member name="M:MFiles.VAF.IStateMethodInfo.EvaluatePostConditions(MFiles.VAF.Common.StateEnvironment,MFiles.VAF.IExecutionTrace,System.Boolean@,System.String@)">
            <summary>
            Executes the state post-conditions.
            </summary>
            <param name="environment">The environment parameters.</param>
            <param name="trace">The execution tracer object for recording the operation starting end ending.</param>
            <param name="conditionsOk">Output parameter for the condition evaluation result. True if the conditions were met.</param>
            <param name="message">Output parameter for the error message if the conditions were not met.</param>
            <returns>True if the method was really executed.</returns>
        </member>
        <member name="T:MFiles.VAF.IStateTransitionMethodInfo">
            <summary>
            Interface for executing state action and condition evaluation methods.
            </summary>
        </member>
        <member name="M:MFiles.VAF.IStateTransitionMethodInfo.EvaluateAutomaticStateTransitionTrigger(MFiles.VAF.Common.StateTransitionEnvironment,MFiles.VAF.IExecutionTrace,System.Boolean@,System.Int32@)">
            <summary>
            Evaluates whether an automatic state transition should be triggered.
            </summary>
            <param name="environment">The environment parameters.</param>
            <param name="trace">The execution tracer object for recording the operation starting end ending.</param>
            <param name="allowTransition">Output value for the evaluation result. True means that the transition will be executed.</param>
            <param name="nextState">Output parameter for the next state id.</param>
            <returns>True if the method was really executed.</returns>
        </member>
        <member name="T:MFiles.VAF.IPropertyMethodInfo">
            <summary>
            Interface for executing property validation and automatic calculation methods.
            </summary>
        </member>
        <member name="M:MFiles.VAF.IPropertyMethodInfo.GetAutomaticNumber(MFiles.VAF.Common.PropertyEnvironment,MFiles.VAF.IExecutionTrace,MFilesAPI.TypedValue@)">
            <summary>
            Calculates an automatic number for the given property.
            </summary>
            <param name="environment">The environment parameters.</param>
            <param name="trace">The execution tracer object for recording the operation starting end ending.</param>
            <param name="newValue">Output parameter for the new value.</param>
            <returns>True if the method was really executed.</returns>
        </member>
        <member name="M:MFiles.VAF.IPropertyMethodInfo.GetCustomValue(MFiles.VAF.Common.PropertyEnvironment,MFiles.VAF.IExecutionTrace,MFilesAPI.TypedValue@)">
            <summary>
            Calculates an automatic number for the given property.
            </summary>
            <param name="environment">The environment parameters.</param>
            <param name="trace">The execution tracer object for recording the operation starting end ending.</param>
            <param name="newValue">Output parameter for the new value.</param>
            <returns>True if the method was really executed.</returns>
        </member>
        <member name="M:MFiles.VAF.IPropertyMethodInfo.Validate(MFiles.VAF.Common.PropertyEnvironment,MFiles.VAF.IExecutionTrace,System.Boolean@,System.String@)">
            <summary>
            Validates the given property value.
            </summary>
            <param name="environment">The environment parameters.</param>
            <param name="trace">The execution tracer object for recording the operation starting end ending.</param>
            <param name="validationResult">Output parameter for the validation result. True if the value was valid.</param>
            <param name="message">Output parameter for the error message if the value was not valid.</param>
            <returns>True if the method was really executed.</returns>
        </member>
        <member name="T:MFiles.VAF.EventHandlerMethodInfo">
            <summary>
            EventHandlerMethodInfo encapsulates an event handling method.
            </summary>
        </member>
        <member name="F:MFiles.VAF.EventHandlerMethodInfo.attribute">
            <summary>
            The attributes of an event handler.
            </summary>
        </member>
        <member name="F:MFiles.VAF.EventHandlerMethodInfo.eventHandlerMethod">
            <summary>
            The event handler method.
            </summary>
        </member>
        <member name="M:MFiles.VAF.EventHandlerMethodInfo.#ctor(System.Reflection.MethodInfo,System.Object,MFiles.VAF.Common.EventHandlerAttribute)">
            <summary>
            Constructor.
            </summary>
            <param name="methodInfo">The reflected event handler method info.</param>
            <param name="instance">The instance of the class with the method.</param>
            <param name="attribute">The event call attribute to use in the call.</param>
        </member>
        <member name="M:MFiles.VAF.EventHandlerMethodInfo.Execute(MFiles.VAF.Common.EventHandlerEnvironment,MFiles.VAF.IExecutionTrace)">
            <summary>
            Conditionally executes the event handler method.
            </summary>
            <param name="environment">The environment parameters.</param>
            <param name="trace">The execution tracer object for recording the operation starting end ending.</param>
        </member>
        <member name="P:MFiles.VAF.EventHandlerMethodInfo.Priority">
            <summary>
            The event handler method call priority. Calls with higher priority should be executed before calls with lower priority.
            </summary>
        </member>
        <member name="P:MFiles.VAF.EventHandlerMethodInfo.LogString">
            <summary>
            Returns the event handler method info into a string that contains the method name and declaring type.
            </summary>
        </member>
        <member name="T:MFiles.VAF.EventHandlerMethodInfo.EventHandlerMethod">
            <summary>
            Delegate declaration for the event handler methods. Invoking the handlers through delegates
            is much faster than invoking from the MethodInfo. 
            </summary>
        </member>
        <member name="T:MFiles.VAF.VaultExtensionMethodInfo">
            <summary>
            VaultExtensionMethodInfo encapsulates an vault extension method call.
            </summary>
        </member>
        <member name="F:MFiles.VAF.VaultExtensionMethodInfo.vaultExtensionMethod">
            <summary>
            The method to call.
            </summary>
        </member>
        <member name="F:MFiles.VAF.VaultExtensionMethodInfo.requiredVaultAccess">
            <summary>
            The vault access level that is required from the caller to perform this call.
            </summary>
        </member>
        <member name="M:MFiles.VAF.VaultExtensionMethodInfo.#ctor(System.Reflection.MethodInfo,System.Object,MFilesAPI.MFVaultAccess,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="methodInfo">The reflected event handler method info.</param>
            <param name="instance">The host object that contains the method.</param>
            <param name="requiredVaultAccess">The vault access level that is required from the caller to perform this call.</param>
            <param name="hasSeparateEventHandlerProxy">True, if this method has a separate event handler proxy.</param>
        </member>
        <member name="M:MFiles.VAF.VaultExtensionMethodInfo.#ctor(MFiles.VAF.VaultExtensionMethodInfo.VaultExtensionMethod,System.Object,MFilesAPI.MFVaultAccess)">
            <summary>
            Constructor.
            </summary>
            <param name="method">A readily constructed vault extension method delegate.</param>
            <param name="instance">The host object that contains the method.</param>
            <param name="requiredVaultAccess">The vault access level that is required from the caller to perform this call.</param>
        </member>
        <member name="M:MFiles.VAF.VaultExtensionMethodInfo.Execute(MFiles.VAF.Common.EventHandlerEnvironment,MFiles.VAF.IExecutionTrace)">
            <summary>
            Conditionally executes the event handler method.
            </summary>
            <param name="environment">The environment parameters.</param>
            <param name="trace">The execution tracer object for recording the operation starting end ending.</param>
            <returns>The extension method result.</returns>
        </member>
        <member name="P:MFiles.VAF.VaultExtensionMethodInfo.HasSeparateEventHandlerProxy">
            <summary>
            Should the Vault Extension Method have a separate Event Handler proxy.
            </summary>
        </member>
        <member name="P:MFiles.VAF.VaultExtensionMethodInfo.Priority">
            <summary>
            The event handler method call priority. Calls with higher priority should be executed before calls with lower priority.
            </summary>
        </member>
        <member name="P:MFiles.VAF.VaultExtensionMethodInfo.LogString">
            <summary>
            Returns the vault extension method info into a string that contains the method name and declaring type.
            </summary>
        </member>
        <member name="T:MFiles.VAF.VaultExtensionMethodInfo.VaultExtensionMethod">
            <summary>
            Delegate declaration for the event handler methods. Invoking the handlers through delegates
            is much faster than invoking from the MethodInfo. 
            </summary>
        </member>
        <member name="T:MFiles.VAF.StateMethodInfo">
            <summary>
            StateMethodInfo represents a handler method that the VBScript delegates to. It can handle state run actions,
            pre- and postconditions and automatic state transitions.
            </summary>
        </member>
        <member name="F:MFiles.VAF.StateMethodInfo.runActionMethod">
            <summary>
            The run action method. This is used when the method type is StateAttribute.AttributeType.StateAction.
            </summary>
        </member>
        <member name="F:MFiles.VAF.StateMethodInfo.preConditionsMethod">
            <summary>
            The precondition evaluation method. This is used when the method type is StateAttribute.AttributeType.StatePreConditions.
            </summary>
        </member>
        <member name="F:MFiles.VAF.StateMethodInfo.postConditionsMethod">
            <summary>
            The postcondition evaluation method. This is used when the method type is StateAttribute.AttributeType.StatePostConditions.
            </summary>
        </member>
        <member name="F:MFiles.VAF.StateMethodInfo.attribute">
            <summary>
            The attribute instance that was attached to the method declaration.
            </summary>
        </member>
        <member name="M:MFiles.VAF.StateMethodInfo.#ctor(System.Reflection.MethodInfo,System.Object,MFiles.VAF.Common.StateAttribute)">
            <summary>
            Constructor.
            </summary>
            <param name="method">The .NET method info.</param>
            <param name="instance">The host object that contains the method.</param>
            <param name="attribute">The state attribute.</param>
        </member>
        <member name="M:MFiles.VAF.StateMethodInfo.RunAction(MFiles.VAF.Common.StateEnvironment,MFiles.VAF.IExecutionTrace)">
            <summary>
            Executes a state action.
            </summary>
            <param name="environment">The environment parameters.</param>
            <param name="trace">The execution tracer object for recording the operation starting end ending.</param>
            <returns>True if the method was really executed.</returns>
        </member>
        <member name="M:MFiles.VAF.StateMethodInfo.EvaluatePreConditions(MFiles.VAF.Common.StateEnvironment,MFiles.VAF.IExecutionTrace,System.Boolean@,System.String@)">
            <summary>
            Evaluates the state pre-conditions.
            </summary>
            <param name="environment">The environment parameters.</param>
            <param name="trace">The execution tracer object for recording the operation starting end ending.</param>
            <param name="conditionsOk">Output parameter for the condition evaluation result. True if the conditions were met.</param>
            <param name="message">Output parameter for the error message if the conditions were not met.</param>
            <returns>True if the method was really executed.</returns>
        </member>
        <member name="M:MFiles.VAF.StateMethodInfo.EvaluatePostConditions(MFiles.VAF.Common.StateEnvironment,MFiles.VAF.IExecutionTrace,System.Boolean@,System.String@)">
            <summary>
            Executes the state post-conditions.
            </summary>
            <param name="environment">The environment parameters.</param>
            <param name="trace">The execution tracer object for recording the operation starting end ending.</param>
            <param name="conditionsOk">Output parameter for the condition evaluation result. True if the conditions were met.</param>
            <param name="message">Output parameter for the error message if the conditions were not met.</param>
            <returns>True if the method was really executed.</returns>
        </member>
        <member name="P:MFiles.VAF.StateMethodInfo.Priority">
            <summary>
            The event handler method call priority. Calls with higher priority should be executed before calls with lower priority.
            </summary>
        </member>
        <member name="P:MFiles.VAF.StateMethodInfo.LogString">
            <summary>
            Returns a string for logging that contains the method name and declaring type.
            </summary>
        </member>
        <member name="T:MFiles.VAF.StateMethodInfo.RunActionMethod">
            <summary>
            Run action method delegate declaration. See the actual methods for information on the parameters.
            </summary>
        </member>
        <member name="T:MFiles.VAF.StateMethodInfo.PreConditionsMethod">
            <summary>
            State postconditions evaluation method delegate declaration. See the actual methods for information on the parameters.
            </summary>
        </member>
        <member name="T:MFiles.VAF.StateMethodInfo.PostConditionsMethod">
            <summary>
            State preconditions evaluation method delegate declaration. See the actual methods for information on the parameters.
            </summary>
        </member>
        <member name="T:MFiles.VAF.StateTransitionMethodInfo">
            <summary>
            StateTransitionMethodInfo represents a handler method that the VBScript delegates to. It can evaluate the automatic state transition triggers.
            </summary>
        </member>
        <member name="F:MFiles.VAF.StateTransitionMethodInfo.automaticStateTransitionConditionsMethod">
            <summary>
            The automatic state transition conditions evaluation method. This is used when the method type is StateAttribute.AttributeType.AutomaticStateTransitionTrigger.
            </summary>
        </member>
        <member name="F:MFiles.VAF.StateTransitionMethodInfo.attribute">
            <summary>
            The attribute instance that was attached to the method declaration.
            </summary>
        </member>
        <member name="M:MFiles.VAF.StateTransitionMethodInfo.#ctor(System.Reflection.MethodInfo,System.Object,MFiles.VAF.Common.StateTransitionAttribute)">
            <summary>
            Constructor.
            </summary>
            <param name="method">The .NET method info.</param>
            <param name="instance">The host object that contains the method.</param>
            <param name="attribute">The state attribute.</param>
        </member>
        <member name="M:MFiles.VAF.StateTransitionMethodInfo.EvaluateAutomaticStateTransitionTrigger(MFiles.VAF.Common.StateTransitionEnvironment,MFiles.VAF.IExecutionTrace,System.Boolean@,System.Int32@)">
            <summary>
            Evaluates whether an automatic state transition should be triggered.
            </summary>
            <param name="environment">The environment parameters.</param>
            <param name="trace">The execution tracer object for recording the operation starting end ending.</param>
            <param name="allowTransition">Output value for the evaluation result. True means that the transition will be executed.</param>
            <param name="nextState">Output parameter for the next state id.</param>
            <returns>True if the method was really executed.</returns>
        </member>
        <member name="P:MFiles.VAF.StateTransitionMethodInfo.Priority">
            <summary>
            The event handler method call priority. Calls with higher priority should be executed before calls with lower priority.
            </summary>
        </member>
        <member name="P:MFiles.VAF.StateTransitionMethodInfo.LogString">
            <summary>
            Returns a string for logging that contains the method name and declaring type.
            </summary>
        </member>
        <member name="T:MFiles.VAF.StateTransitionMethodInfo.AutomaticStateTransitionTriggerMethod">
            <summary>
            State automatic state transition conditions evaluation method delegate declaration. See the actual methods for information on the parameters.
            </summary>
        </member>
        <member name="T:MFiles.VAF.PropertyMethodInfo">
            <summary>
            PropertyMethodInfo represents a handler method that the VBScript delegates to. It can handle property value validation,
            customized automatic numbering and custom value calculation.
            </summary>
        </member>
        <member name="F:MFiles.VAF.PropertyMethodInfo.automaticNumberingMethod">
            <summary>
            The custom value calculation method. This is used when the method type is PropertyAttribute.AttributeType.PropertyAutomaticNumbering.
            </summary>
        </member>
        <member name="F:MFiles.VAF.PropertyMethodInfo.customValueMethod">
            <summary>
            The customized automatic numbering method. This is used when the method type is PropertyAttribute.AttributeType.PropertyCustomValue.
            </summary>
        </member>
        <member name="F:MFiles.VAF.PropertyMethodInfo.validationMethod">
            <summary>
            The property value validation method. This is used when the method type is PropertyAttribute.AttributeType.PropertyValueValidation.
            </summary>
        </member>
        <member name="F:MFiles.VAF.PropertyMethodInfo.attribute">
            <summary>
            The attribute instance that was attached to the method declaration.
            </summary>
        </member>
        <member name="M:MFiles.VAF.PropertyMethodInfo.#ctor(System.Reflection.MethodInfo,System.Object,MFiles.VAF.Common.PropertyAttribute)">
            <summary>
            Constructor.
            </summary>
            <param name="method">The .NET method info.</param>
            <param name="instance">The host object that contains the given method.</param>
            <param name="attribute">The property attribute.</param>
        </member>
        <member name="M:MFiles.VAF.PropertyMethodInfo.GetAutomaticNumber(MFiles.VAF.Common.PropertyEnvironment,MFiles.VAF.IExecutionTrace,MFilesAPI.TypedValue@)">
            <summary>
            Calculates an automatic number for the given property.
            </summary>
            <param name="environment">The environment parameters.</param>
            <param name="trace">The execution tracer object for recording the operation starting end ending.</param>
            <param name="newValue">Output parameter for the new value.</param>
            <returns>True if the method was really executed.</returns>
        </member>
        <member name="M:MFiles.VAF.PropertyMethodInfo.GetCustomValue(MFiles.VAF.Common.PropertyEnvironment,MFiles.VAF.IExecutionTrace,MFilesAPI.TypedValue@)">
            <summary>
            Calculates an automatic number for the given property.
            </summary>
            <param name="environment">The environment parameters.</param>
            <param name="trace">The execution tracer object for recording the operation starting end ending.</param>
            <param name="newValue">Output parameter for the new value.</param>
            <returns>True if the method was really executed.</returns>
        </member>
        <member name="M:MFiles.VAF.PropertyMethodInfo.Validate(MFiles.VAF.Common.PropertyEnvironment,MFiles.VAF.IExecutionTrace,System.Boolean@,System.String@)">
            <summary>
            Validates the given property value.
            </summary>
            <param name="environment">The environment parameters.</param>
            <param name="trace">The execution tracer object for recording the operation starting end ending.</param>
            <param name="validationResult">Output parameter for the validation result. True if the value was valid.</param>
            <param name="message">Output parameter for the error message if the value was not valid.</param>
            <returns>True if the method was really executed.</returns>
        </member>
        <member name="P:MFiles.VAF.PropertyMethodInfo.Priority">
            <summary>
            The event handler method call priority. Calls with higher priority should be executed before calls with lower priority.
            </summary>
        </member>
        <member name="P:MFiles.VAF.PropertyMethodInfo.LogString">
            <summary>
            Returns a string for logging that contains the method name and declaring type.
            </summary>
        </member>
        <member name="T:MFiles.VAF.PropertyMethodInfo.AutomaticNumberingMethod">
            <summary>
            The customized automatic numbering method delegate. See the actual methods for information on the parameters.
            </summary>
        </member>
        <member name="T:MFiles.VAF.PropertyMethodInfo.CustomValueMethod">
            <summary>
            The custom value calculation method delegate. See the actual methods for information on the parameters.
            </summary>
        </member>
        <member name="T:MFiles.VAF.PropertyMethodInfo.ValidationMethod">
            <summary>
            The property value validation method delegate. See the actual methods for information on the parameters.
            </summary>
        </member>
        <member name="T:MFiles.VAF.MetadataCache.ComInterfaceAutoImpl">
            <summary>
            Class that implements helper methods to automatically complete a implementation.
            </summary>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.ComInterfaceAutoImpl.GetCompletedType(System.Type)">
            <summary>
            Return the completed type for this
            </summary>
            <param name="abstractType"></param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.ComInterfaceAutoImpl.GetInstanceOfCompletedType``1">
            <summary>
            Creates an instance of the completed type, that is based on the abstract type.
            </summary>
            <typeparam name="ABSTRACT_TYPE"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.ComInterfaceAutoImpl.ThrowNotImplementedException">
            <summary>
            The default implementation for methods that appear in the COM interface, but are not implemented here.
            </summary>
        </member>
        <member name="F:MFiles.VAF.MetadataCache.ComInterfaceAutoImpl.dynamicAssemblyLock">
            <summary>
            The lock object to protect the singleton assembly object.
            </summary>
        </member>
        <member name="F:MFiles.VAF.MetadataCache.ComInterfaceAutoImpl.dynamicAssembly">
            <summary>
            The singleton dynamically-built assembly.
            </summary>
        </member>
        <member name="F:MFiles.VAF.MetadataCache.ComInterfaceAutoImpl.dynamicModuleLock">
            <summary>
            The lock object to protect the singleton module object.
            </summary>
        </member>
        <member name="F:MFiles.VAF.MetadataCache.ComInterfaceAutoImpl.dynamicModule">
            <summary>
            The singleton dynamically-built module
            </summary>
        </member>
        <member name="F:MFiles.VAF.MetadataCache.ComInterfaceAutoImpl.dynamicTypes">
            <summary>
            Collection of types that are completed in dynamically created type.
            </summary>
        </member>
        <member name="P:MFiles.VAF.MetadataCache.ComInterfaceAutoImpl.DynamicAssembly">
            <summary>
            Gets the dynamically-built assembly object.
            </summary>
        </member>
        <member name="P:MFiles.VAF.MetadataCache.ComInterfaceAutoImpl.DynamicModule">
            <summary>
            Gets the dynamically-built module object.
            </summary>
        </member>
        <member name="T:MFiles.VAF.MetadataCache.IMetadataStructureCache">
            <summary>
            The metadata structure cache interface.
            </summary>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.IMetadataStructureCache.GetClassIdByAlias(MFilesAPI.Vault,System.String)">
            <summary>
            Fetches the class id from the cache. Populates the cache if necessary.
            </summary>
            <param name="vault">The vault object.</param>
            <param name="alias">The alias as string.</param>
            <returns>The class id for the alias.</returns>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.IMetadataStructureCache.GetNamedACLIdByAlias(MFilesAPI.Vault,System.String)">
            <summary>
            Fetches the workflow state id from the cache. Populates the cache if necessary.
            </summary>
            <param name="vault">The vault object.</param>
            <param name="alias">The alias as string.</param>
            <returns>The named ACL id for the alias.</returns>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.IMetadataStructureCache.GetObjectTypeIdByAlias(MFilesAPI.Vault,System.String)">
            <summary>
            Fetches the object type id from the cache. Populates the cache if necessary.
            </summary>
            <param name="vault">The vault object.</param>
            <param name="alias">The alias as string.</param>
            <returns>The object type id for the alias.</returns>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.IMetadataStructureCache.GetPropertyDefIdByAlias(MFilesAPI.Vault,System.String)">
            <summary>
            Fetches the property def id from the cache. Populates the cache if necessary.
            </summary>
            <param name="vault">The vault object.</param>
            <param name="alias">The alias as string.</param>
            <returns>The property def id for the alias.</returns>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.IMetadataStructureCache.GetUserGroupIdByAlias(MFilesAPI.Vault,System.String)">
            <summary>
            Fetches the user group id from the cache. Populates the cache if necessary.
            </summary>
            <param name="vault">The vault object.</param>
            <param name="alias">The alias as string.</param>
            <returns>The user group id for the alias.</returns>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.IMetadataStructureCache.GetWorkflowIdByAlias(MFilesAPI.Vault,System.String)">
            <summary>
            Fetches the workflow id from the cache. Populates the cache if necessary.
            </summary>
            <param name="vault">The vault object.</param>
            <param name="alias">The alias as string.</param>
            <returns>The workflow id for the alias.</returns>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.IMetadataStructureCache.GetWorkflowStateIdByAlias(MFilesAPI.Vault,System.String)">
            <summary>
            Fetches the workflow state id from the cache. Populates the cache if necessary.
            </summary>
            <param name="vault">The vault object.</param>
            <param name="alias">The alias as string.</param>
            <returns>The workflow state id for the alias.</returns>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.IMetadataStructureCache.GetUserIdByGuid(MFilesAPI.Vault,System.String)">
            <summary>
            Gets the user id by guid.
            </summary>
            <param name="vault">The vault object.</param>
            <param name="guid">The user GUID as string in '{00000000-0000-0000-0000-000000000000}' format.</param>
            <returns>The user id.</returns>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.IMetadataStructureCache.GetUserGroupIdByGuid(MFilesAPI.Vault,System.String)">
            <summary>
            Gets user group id by guid.
            </summary>
            <param name="vault">The vault object.</param>
            <param name="guid">The user group GUID as string in '{00000000-0000-0000-0000-000000000000}' format.</param>
            <returns>The user group id.</returns>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.IMetadataStructureCache.GetObjIDByGuid(MFilesAPI.Vault,System.String)">
            <summary>
            Fetches the value list item or object id by guid.
            </summary>
            <param name="vault">The vault object.</param>
            <param name="objectGuid">The GUID of the object or value list item in '{00000000-0000-0000-0000-000000000000}' format.</param>
            <returns>The object or value list item id of the object with the matching GUID.</returns>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.IMetadataStructureCache.GetObjectClassAdmin(MFilesAPI.Vault,System.Int32)">
            <summary>
            Gets the full (admin) object class from the metadata structure cache.
            </summary>
            <param name="vault">The vault object. Reserved for future implementation to rebuild the cache if found not up-to-date.</param>
            <param name="classId">The object class id.</param>
            <returns>The object class data struct.</returns>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.IMetadataStructureCache.GetObjectTypeAdmin(MFilesAPI.Vault,System.Int32)">
            <summary>
            Gets the full (admin) object type from the metadata structure cache.
            </summary>
            <param name="vault">The vault object. Reserved for future implementation to rebuild the cache if found not up-to-date.</param>
            <param name="objTypeId">The object type id.</param>
            <returns>The object type data struct (full admin struct).</returns>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.IMetadataStructureCache.GetPropertyDefAdmin(MFilesAPI.Vault,System.Int32)">
            <summary>
            Gets the full (admin) property definition from the metadata structure cache.
            </summary>
            <param name="vault">The vault object. Reserved for future implementation to rebuild the cache if found not up-to-date.</param>
            <param name="propertyDefId">The property definition ID.</param>
            <returns>The property definition data struct (full admin struct).</returns>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.IMetadataStructureCache.GetWorkflowAdmin(MFilesAPI.Vault,System.Int32)">
            <summary>
            Gets the full (admin) workflow data struct.
            </summary>
            <param name="vault">The vault object. Reserved for future implementation to rebuild the cache if found not up-to-date.</param>
            <param name="workflowId">The workflow id.</param>
            <returns>The workflow data struct (full admin struct).</returns>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.IMetadataStructureCache.GetStateAdmin(MFilesAPI.Vault,System.Int32)">
            <summary>
            Gets the full (admin) workflow state data struct.
            </summary>
            <param name="vault">The vault object. Reserved for future implementation to rebuild the cache if found not up-to-date.</param>
            <param name="stateId">The state id.</param>
            <returns>The state data struct (full admin struct).</returns>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.IMetadataStructureCache.GetUser(MFilesAPI.Vault,System.Int32)">
            <summary>
            Gets the user account of the specified user from the cache.
            </summary>
            <param name="vault">The vault object.</param>
            <param name="userId">The id of the user.</param>
            <returns>The user account.</returns>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.IMetadataStructureCache.GetUserGroupAdmin(MFilesAPI.Vault,System.Int32)">
            <summary>
            Gets the specified user group from the cache.
            </summary>
            <param name="vault">The vault object.</param>
            <param name="groupId">The id of the user group.</param>
            <returns>The user group.</returns>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.IMetadataStructureCache.GetLogin(MFilesAPI.Vault,System.Int32,System.String)">
            <summary>
            Gets the specified login account from the cache.
            </summary>
            <param name="vault">The vault object.</param>
            <param name="userId">The id of the user.</param>
            <param name="accountName">Account name.</param>
            <returns>The login account.</returns>
        </member>
        <member name="T:MFiles.VAF.IMetadataStructureCacheEventSink">
            <summary>
            Interface for the event handlers that are responsible of updating the metadata structure cache.
            </summary>
        </member>
        <member name="M:MFiles.VAF.IMetadataStructureCacheEventSink.SetTargetCache(MFiles.VAF.MetadataCache.IMetadataStructureCacheUpdate)">
            <summary>
            Changes the target cache object that gets updated according to this event sink.
            </summary>
            <param name="cache">The new cache object.</param>
        </member>
        <member name="T:MFiles.VAF.MetadataCache.IMetadataStructureCacheUpdate">
            <summary>
            Interface for updating the user accounts, user groups and login accounts in the metadata structure cache.
            The cache implementation should implement this interface in order to be able to receive the notifications
            that arrive through the M-Files Server event mechanism.
            </summary>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.IMetadataStructureCacheUpdate.AddOrUpdateUserAccount(MFilesAPI.UserAccount)">
            <summary>
            Adds or updates a user account in the cache.
            </summary>
            <param name="userAccount">The user account to add or update.</param>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.IMetadataStructureCacheUpdate.RemoveUserAccount(System.Int32)">
            <summary>
            Removes the specified user account from the cache.
            </summary>
            <param name="userAccountId">The user account's id.</param>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.IMetadataStructureCacheUpdate.AddOrUpdateUserGroupAdmin(MFilesAPI.UserGroupAdmin)">
            <summary>
            Adds or updates a user group in the cache.
            </summary>
            <param name="userGroup">The user group object.</param>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.IMetadataStructureCacheUpdate.RemoveUserGroup(System.Int32)">
            <summary>
            Removes the specified user group from the cache.
            </summary>
            <param name="userGroupId">The user group's id.</param>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.IMetadataStructureCacheUpdate.AddOrUpdateLoginAccount(MFilesAPI.LoginAccount)">
            <summary>
            Adds or updates a user account in the cache.
            </summary>
            <param name="loginAccount">The login account object.</param>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.IMetadataStructureCacheUpdate.RemoveLoginAccount(System.String)">
            <summary>
            Removes the specified login account from the cache.
            </summary>
            <param name="accountName">The login accounts name.</param>
        </member>
        <member name="T:MFiles.VAF.MetadataCache.MetadataCacheVault">
            <summary>
            Wrapper class for M-Files vault object to implement a local metadata cache.
            </summary>
        </member>
        <member name="F:MFiles.VAF.MetadataCache.MetadataCacheVault.structure">
            <summary>
            The actual structure cache.
            </summary>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.MetadataCacheVault.Wrap(MFilesAPI.Vault,MFiles.VAF.MetadataCache.IMetadataStructureCache)">
            <summary>
            Wraps the passed vault with a a local metadata structure cache.
            </summary>
            <param name="vault">The vault to wrap.</param>
            <param name="metadataStructureCache">The metadata structure cache object that is shared between vault instances.</param>
            <returns>The wrapped vault object.</returns>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.MetadataCacheVault.Initialize(MFilesAPI.Vault,MFiles.VAF.MetadataCache.IMetadataStructureCache)">
            <summary>
            Initializes the cache vault.
            </summary>
            <param name="vault">The original vault to wrap.</param>
            <param name="metadataStructureCache">The metadata structure cache object that is shared between vault instances.</param>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.MetadataCacheVault.GetStateAdmin(System.Int32)">
            <summary>
            Gets the full (admin) state data struct.
            </summary>
            <param name="stateId">The state id.</param>
            <returns>The state data struct (full admin struct).</returns>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.MetadataCacheVault.GetMetadataStructureItemIDByAlias(MFilesAPI.MFMetadataStructureItem,System.String,System.Boolean)">
            <summary>
            Returns the metadata structure item id based on the given alias and type.
            </summary>
            <param name="metadataStructureItemType">The metadata structure item type.</param>
            <param name="alias">The alias to resolve.</param>
            <param name="raiseErrorIfMultipleMatchesFound">True if an error should be raised upon duplicate aliases.</param>
            <returns>The id of the metadata structure element.</returns>
        </member>
        <member name="P:MFiles.VAF.MetadataCache.MetadataCacheVault.InnerVault">
            <summary>
            The inner vault object.
            </summary>
        </member>
        <member name="P:MFiles.VAF.MetadataCache.MetadataCacheVault.ClassOperations">
            <summary>
            Accessor for class operations interface. Returns the cache wrapper interface.
            </summary>
        </member>
        <member name="P:MFiles.VAF.MetadataCache.MetadataCacheVault.ObjectTypeOperations">
            <summary>
            Accessor for object type operations interface. Returns the cache wrapper interface.
            </summary>
        </member>
        <member name="P:MFiles.VAF.MetadataCache.MetadataCacheVault.PropertyDefOperations">
            <summary>
            Accessor for property def interface. Returns the cache wrapper interface.
            </summary>
        </member>
        <member name="P:MFiles.VAF.MetadataCache.MetadataCacheVault.WorkflowOperations">
            <summary>
            Accessor for class operations interface. Returns the cache wrapper interface.
            </summary>
        </member>
        <member name="P:MFiles.VAF.MetadataCache.MetadataCacheVault.UserOperations">
            <summary>
            Accessor for user operations interface. Returns the cache wrapper interface.
            </summary>
        </member>
        <member name="P:MFiles.VAF.MetadataCache.MetadataCacheVault.ObjectOperations">
            <summary>
            Accessor for object operations interface. Returns the cache wrapper interface.
            </summary>
        </member>
        <member name="P:MFiles.VAF.MetadataCache.MetadataCacheVault.UserGroupOperations">
            <summary>
            Accessor for user group operations interface. Returns the cache wrapper interface.
            </summary>
        </member>
        <member name="T:MFiles.VAF.MetadataCache.MetadataCacheVaultClassOperations">
            <summary>
            Wrapper class for vault class operations to implement a local metadata cache.
            </summary>
        </member>
        <member name="F:MFiles.VAF.MetadataCache.MetadataCacheVaultClassOperations.vault">
            <summary>
            The contained vault object.
            </summary>
        </member>
        <member name="F:MFiles.VAF.MetadataCache.MetadataCacheVaultClassOperations.vaultClassOperations">
            <summary>
            The shortcut to the operations interface.
            </summary>
        </member>
        <member name="F:MFiles.VAF.MetadataCache.MetadataCacheVaultClassOperations.metadataStructureCache">
            <summary>
            The metadata structure cacher object.
            </summary>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.MetadataCacheVaultClassOperations.Initialize(MFilesAPI.Vault,MFiles.VAF.MetadataCache.IMetadataStructureCache)">
            <summary>
            Constructor.
            </summary>
            <param name="vault">The vault interface to wrap.</param>
            <param name="metadataStructureCache">The metadata structure cache object that is shared between vault instances.</param>
        </member>
        <member name="T:MFiles.VAF.MetadataCache.MetadataCacheVaultObjectOperations">
            <summary>
            Wrapper class for vault object operations to implement a local metadata cache.
            </summary>
        </member>
        <member name="F:MFiles.VAF.MetadataCache.MetadataCacheVaultObjectOperations.vault">
            <summary>
            The contained vault object.
            </summary>
        </member>
        <member name="F:MFiles.VAF.MetadataCache.MetadataCacheVaultObjectOperations.vaultObjectOperations">
            <summary>
            The shortcut to the operations interface.
            </summary>
        </member>
        <member name="F:MFiles.VAF.MetadataCache.MetadataCacheVaultObjectOperations.metadataStructureCache">
            <summary>
            The metadata structure cacher object.
            </summary>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.MetadataCacheVaultObjectOperations.Initialize(MFilesAPI.Vault,MFiles.VAF.MetadataCache.IMetadataStructureCache)">
            <summary>
            Constructor.
            </summary>
            <param name="vault">The main vault object.</param>
            <param name="metadataStructureCache"></param>
        </member>
        <member name="T:VAFObjectVersionAndPropertiesOfMultipleObjects">
            <summary>
            Local implementation of MFilesAPI ObjectVersionAndPropertiesOfMultipleObjects, so it can be created/modified locally.
            Should be removed when the workaround for ObjectVersionAndPropertiesOfMultipleObjects Issue: #13391 is removed.
            </summary>
        </member>
        <member name="M:VAFObjectVersionAndPropertiesOfMultipleObjects.Add(System.Int32,MFilesAPI.ObjectVersionAndProperties)">
            <summary>
            Adds an item to the collection at a specific location.
            </summary>
            <param name="index">The location to add the item. -1 will add it to the end.</param>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:VAFObjectVersionAndPropertiesOfMultipleObjects.Remove(System.Int32)">
            <summary>
            Removes an item at the specified location from the collection.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:VAFObjectVersionAndPropertiesOfMultipleObjects.Clone">
            <summary>
            Creates a clone of the current collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VAFObjectVersionAndPropertiesOfMultipleObjects.GetEnumerator">
            <summary>
            Make the list enumerable.
            </summary>
            <returns></returns>
        </member>
        <member name="P:VAFObjectVersionAndPropertiesOfMultipleObjects.Count">
            <summary>
            The item cound.
            </summary>
        </member>
        <member name="P:VAFObjectVersionAndPropertiesOfMultipleObjects.Item(System.Int32)">
            <summary>
            Item indexor.
            </summary>
            <param name="index">The item index to get/set.</param>
            <returns></returns>
        </member>
        <member name="T:MFiles.VAF.MetadataCache.MetadataCacheVaultObjectTypeOperations">
            <summary>
            Wrapper class for vault object type operations to implement a local metadata cache.
            </summary>
        </member>
        <member name="F:MFiles.VAF.MetadataCache.MetadataCacheVaultObjectTypeOperations.vault">
            <summary>
            The contained vault object.
            </summary>
        </member>
        <member name="F:MFiles.VAF.MetadataCache.MetadataCacheVaultObjectTypeOperations.vaultObjectTypeOperations">
            <summary>
            The shortcut to the operations interface.
            </summary>
        </member>
        <member name="F:MFiles.VAF.MetadataCache.MetadataCacheVaultObjectTypeOperations.metadataStructureCache">
            <summary>
            The metadata structure cacher object.
            </summary>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.MetadataCacheVaultObjectTypeOperations.Initialize(MFilesAPI.Vault,MFiles.VAF.MetadataCache.IMetadataStructureCache)">
            <summary>
            Constructor.
            </summary>
            <param name="vault">The operations interface to wrap.</param>
            <param name="metadataStructureCache">The metadata structure cache object that is shared between vault instances.</param>
        </member>
        <member name="T:MFiles.VAF.MetadataCache.MetadataCacheVaultPropertyDefOperations">
            <summary>
            Wrapper class for vault property def operations to implement a local metadata cache.
            </summary>
        </member>
        <member name="F:MFiles.VAF.MetadataCache.MetadataCacheVaultPropertyDefOperations.vault">
            <summary>
            The contained vault object.
            </summary>
        </member>
        <member name="F:MFiles.VAF.MetadataCache.MetadataCacheVaultPropertyDefOperations.vaultPropertyDefOperations">
            <summary>
            The shortcut to the operations interface.
            </summary>
        </member>
        <member name="F:MFiles.VAF.MetadataCache.MetadataCacheVaultPropertyDefOperations.metadataStructureCache">
            <summary>
            The metadata structure cacher object.
            </summary>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.MetadataCacheVaultPropertyDefOperations.Initialize(MFilesAPI.Vault,MFiles.VAF.MetadataCache.IMetadataStructureCache)">
            <summary>
            Constructor.
            </summary>
            <param name="vault">The operations interface to wrap.</param>
            <param name="metadataStructureCache">The metadata structure cache object that is shared between vault instances.</param>
        </member>
        <member name="T:MFiles.VAF.MetadataCache.MetadataCacheVaultUserOperations">
            <summary>
            Wrapper class for vault user operations to implement a local metadata cache.
            </summary>
        </member>
        <member name="F:MFiles.VAF.MetadataCache.MetadataCacheVaultUserOperations.vault">
            <summary>
            The contained vault object.
            </summary>
        </member>
        <member name="F:MFiles.VAF.MetadataCache.MetadataCacheVaultUserOperations.vaultUserOperations">
            <summary>
            The shortcut to the operations interface.
            </summary>
        </member>
        <member name="F:MFiles.VAF.MetadataCache.MetadataCacheVaultUserOperations.metadataStructureCache">
            <summary>
            The metadata structure cacher object.
            </summary>
        </member>
        <member name="F:MFiles.VAF.MetadataCache.MetadataCacheVaultUserOperations.metadataStructureCacheUpdate">
            <summary>
            The metadata structure cache updater object.
            </summary>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.MetadataCacheVaultUserOperations.Initialize(MFilesAPI.Vault,MFiles.VAF.MetadataCache.IMetadataStructureCache)">
            <summary>
            Constructor.
            </summary>
            <param name="vault">The operations interface to wrap.</param>
            <param name="metadataStructureCache">The metadata structure cache object that is shared between vault instances.</param>
        </member>
        <member name="T:MFiles.VAF.MetadataCache.MetadataCacheVaultUserGroupOperations">
            <summary>
            Wrapper class for vault user group operations to implement a local metadata cache.
            </summary>
        </member>
        <member name="F:MFiles.VAF.MetadataCache.MetadataCacheVaultUserGroupOperations.vault">
            <summary>
            The contained vault object.
            </summary>
        </member>
        <member name="F:MFiles.VAF.MetadataCache.MetadataCacheVaultUserGroupOperations.vaultUserGroupOperations">
            <summary>
            The shortcut to the operations interface.
            </summary>
        </member>
        <member name="F:MFiles.VAF.MetadataCache.MetadataCacheVaultUserGroupOperations.metadataStructureCache">
            <summary>
            The metadata structure cacher object.
            </summary>
        </member>
        <member name="F:MFiles.VAF.MetadataCache.MetadataCacheVaultUserGroupOperations.metadataStructureCacheUpdate">
            <summary>
            The metadata structure cache updater object.
            </summary>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.MetadataCacheVaultUserGroupOperations.Initialize(MFilesAPI.Vault,MFiles.VAF.MetadataCache.IMetadataStructureCache)">
            <summary>
            Constructor.
            </summary>
            <param name="vault">The operations interface to wrap.</param>
            <param name="metadataStructureCache">The metadata structure cache object that is shared between vault instances.</param>
        </member>
        <member name="T:MFiles.VAF.MetadataCache.MetadataCacheVaultWorkflowOperations">
            <summary>
            Wrapper class for vault workflow operations to implement a local metadata cache.
            </summary>
        </member>
        <member name="F:MFiles.VAF.MetadataCache.MetadataCacheVaultWorkflowOperations.vault">
            <summary>
            The contained vault object.
            </summary>
        </member>
        <member name="F:MFiles.VAF.MetadataCache.MetadataCacheVaultWorkflowOperations.vaultWorkflowOperations">
            <summary>
            The shortcut to the operations interface.
            </summary>
        </member>
        <member name="F:MFiles.VAF.MetadataCache.MetadataCacheVaultWorkflowOperations.metadataStructureCache">
            <summary>
            The metadata structure cacher object.
            </summary>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.MetadataCacheVaultWorkflowOperations.Initialize(MFilesAPI.Vault,MFiles.VAF.MetadataCache.IMetadataStructureCache)">
            <summary>
            Constructor.
            </summary>
            <param name="vault">The operations interface to wrap.</param>
            <param name="metadataStructureCache">The metadata structure cache object that is shared between vault instances.</param>
        </member>
        <member name="T:MFiles.VAF.MetadataCache.MetadataStructureCache">
            <summary>
            A class that provides thread-safe caching features for the metadata structure items. The cache lifetime and validity is controlled
            from outside of the class.
            </summary>
        </member>
        <member name="F:MFiles.VAF.MetadataCache.MetadataStructureCache.metadataStructureCollectionLock">
            <summary>
            The lock for protecting the metadata structure cache creation.
            </summary>
        </member>
        <member name="F:MFiles.VAF.MetadataCache.MetadataStructureCache.vaultCachesByVaultGuid">
            <summary>
            Collection of the metadata structure caches.
            </summary>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.MetadataStructureCache.GetVaultCache(MFilesAPI.Vault,System.Boolean)">
            <summary>
            Gets a new or existing metadata structure cache instance for a specific vault.
            </summary>
            <param name="vault">The vault of the cache instance.</param>
            <param name="refresh">Indicates weather an instance should be re-created if one already exists.</param>
            <returns></returns>
        </member>
        <member name="F:MFiles.VAF.MetadataCache.MetadataStructureCache.objectTypeAdminCache">
            <summary>
            Container for cached full (admin) object type definitions.
            </summary>
        </member>
        <member name="F:MFiles.VAF.MetadataCache.MetadataStructureCache.objectClassAdminCache">
            <summary>
            Container for cached full( admin) object class definitions.
            </summary>
        </member>
        <member name="F:MFiles.VAF.MetadataCache.MetadataStructureCache.propertyDefAdminCache">
            <summary>
            Container for cached full (admin) property definitions.
            </summary>
        </member>
        <member name="F:MFiles.VAF.MetadataCache.MetadataStructureCache.workflowAdminCache">
            <summary>
            Container for cached workflows.
            </summary>
        </member>
        <member name="F:MFiles.VAF.MetadataCache.MetadataStructureCache.stateAdminCache">
            <summary>
            Container for cached states.
            </summary>
        </member>
        <member name="F:MFiles.VAF.MetadataCache.MetadataStructureCache.usersCache">
            <summary>
            Container for cached user accounts.
            </summary>
        </member>
        <member name="F:MFiles.VAF.MetadataCache.MetadataStructureCache.userGroupAdminCache">
            <summary>
            Container for cached user groups.
            </summary>
        </member>
        <member name="F:MFiles.VAF.MetadataCache.MetadataStructureCache.loginsCache">
            <summary>
            Container for cached login accounts.
            </summary>
        </member>
        <member name="F:MFiles.VAF.MetadataCache.MetadataStructureCache.classIdByAlias">
            <summary>
            Container for cached class aliases.
            </summary>
        </member>
        <member name="F:MFiles.VAF.MetadataCache.MetadataStructureCache.objectTypeIdByAlias">
            <summary>
            Container for cached object type aliases.
            </summary>
        </member>
        <member name="F:MFiles.VAF.MetadataCache.MetadataStructureCache.propertyDefIdByAlias">
            <summary>
            Container for cached property definition aliases.
            </summary>
        </member>
        <member name="F:MFiles.VAF.MetadataCache.MetadataStructureCache.workflowIdByAlias">
            <summary>
            Container for cached workflow aliases.
            </summary>
        </member>
        <member name="F:MFiles.VAF.MetadataCache.MetadataStructureCache.workflowStateIdByAlias">
            <summary>
            Container for cached state aliases.
            </summary>
        </member>
        <member name="F:MFiles.VAF.MetadataCache.MetadataStructureCache.namedACLIdByAlias">
            <summary>
            Container for cached NACL aliases.
            </summary>
        </member>
        <member name="F:MFiles.VAF.MetadataCache.MetadataStructureCache.userGroupIdByAlias">
            <summary>
            Container for cached user group aliases.
            </summary>
        </member>
        <member name="F:MFiles.VAF.MetadataCache.MetadataStructureCache.valueListItemIDByGuid">
            <summary>
            Value list items (or objects) by guid.
            </summary>
        </member>
        <member name="F:MFiles.VAF.MetadataCache.MetadataStructureCache.userIdByGuid">
            <summary>
            Maps user guid to user id.
            </summary>
        </member>
        <member name="F:MFiles.VAF.MetadataCache.MetadataStructureCache.userGroupIdByGuid">
            <summary>
            Maps user group guid to user group id.
            </summary>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.MetadataStructureCache.#ctor(MFilesAPI.Vault)">
            <summary>
            Initializes new metadata structure cache.
            </summary>
            <param name="vault">The vault with which to build the cache.</param>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.MetadataStructureCache.Initialize(MFilesAPI.Vault)">
            <summary>
            The initialization method which is called only from the constructor. Rebuilds the cache.
            </summary>
            <param name="vault">The vault object.</param>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.MetadataStructureCache.GetObjectTypeAdmin(MFilesAPI.Vault,System.Int32)">
            <summary>
            Gets the full (admin) object type from the metadata structure cache.
            </summary>
            <param name="vault">The vault object. Reserved for future implementation to rebuild the cache if found not up-to-date.</param>
            <param name="objTypeId">The object type id.</param>
            <returns>The object type data struct.</returns>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.MetadataStructureCache.GetObjectClassAdmin(MFilesAPI.Vault,System.Int32)">
            <summary>
            Gets the full (admin) object class from the metadata structure cache.
            </summary>
            <param name="vault">The vault object. Reserved for future implementation to rebuild the cache if found not up-to-date.</param>
            <param name="classId">The object class id.</param>
            <returns>The object class data struct.</returns>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.MetadataStructureCache.GetPropertyDefAdmin(MFilesAPI.Vault,System.Int32)">
            <summary>
            Gets the full (admin) property definition from the metadata structure cache.
            </summary>
            <param name="vault">The vault object. Reserved for future implementation to rebuild the cache if found not up-to-date.</param>
            <param name="propertyDefId">The property definition ID.</param>
            <returns>The property definition data struct.</returns>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.MetadataStructureCache.GetWorkflowAdmin(MFilesAPI.Vault,System.Int32)">
            <summary>
            Gets the full (admin) workflow data struct.
            </summary>
            <param name="vault">The vault object. Reserved for future implementation to rebuild the cache if found not up-to-date.</param>
            <param name="workflowId">The workflow id.</param>
            <returns>The workflow data struct (full admin struct).</returns>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.MetadataStructureCache.GetStateAdmin(MFilesAPI.Vault,System.Int32)">
            <summary>
            Gets the full (admin) state data struct.
            </summary>
            <param name="vault">The vault object. Reserved for future implementation to rebuild the cache if found not up-to-date.</param>
            <param name="stateId">The state id.</param>
            <returns>The state data struct (full admin struct).</returns>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.MetadataStructureCache.GetClassIdByAlias(MFilesAPI.Vault,System.String)">
            <summary>
            Fetches the class id from the cache. Populates the cache if necessary.
            </summary>
            <param name="vault">The vault object.</param>
            <param name="alias">The alias as string.</param>
            <returns>The class id for the alias.</returns>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.MetadataStructureCache.GetObjectTypeIdByAlias(MFilesAPI.Vault,System.String)">
            <summary>
            Fetches the object type id from the cache. Populates the cache if necessary.
            </summary>
            <param name="vault">The vault object.</param>
            <param name="alias">The alias as string.</param>
            <returns>The object type id for the alias.</returns>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.MetadataStructureCache.GetPropertyDefIdByAlias(MFilesAPI.Vault,System.String)">
            <summary>
            Fetches the property def id from the cache. Populates the cache if necessary.
            </summary>
            <param name="vault">The vault object.</param>
            <param name="alias">The alias as string.</param>
            <returns>The property def id for the alias.</returns>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.MetadataStructureCache.GetWorkflowIdByAlias(MFilesAPI.Vault,System.String)">
            <summary>
            Fetches the workflow id from the cache. Populates the cache if necessary.
            </summary>
            <param name="vault">The vault object.</param>
            <param name="alias">The alias as string.</param>
            <returns>The workflow id for the alias.</returns>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.MetadataStructureCache.GetWorkflowStateIdByAlias(MFilesAPI.Vault,System.String)">
            <summary>
            Fetches the workflow state id from the cache. Populates the cache if necessary.
            </summary>
            <param name="vault">The vault object.</param>
            <param name="alias">The alias as string.</param>
            <returns>The workflow id for the alias.</returns>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.MetadataStructureCache.GetNamedACLIdByAlias(MFilesAPI.Vault,System.String)">
            <summary>
            Fetches the workflow state id from the cache. Populates the cache if necessary.
            </summary>
            <param name="vault">The vault object.</param>
            <param name="alias">The alias as string.</param>
            <returns>The workflow id for the alias.</returns>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.MetadataStructureCache.GetUserGroupIdByAlias(MFilesAPI.Vault,System.String)">
            <summary>
            Fetches the user group id from the cache. Populates the cache if necessary.
            </summary>
            <param name="vault">The vault object.</param>
            <param name="alias">The alias as string.</param>
            <returns>The workflow id for the alias.</returns>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.MetadataStructureCache.GetObjIDByGuid(MFilesAPI.Vault,System.String)">
            <summary>
            Fetches the value list item or object id by guid.
            </summary>
            <param name="vault">The vault object.</param>
            <param name="objectGuid">The GUID of the object or value list item.</param>
            <returns>The workflow id for the alias.</returns>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.MetadataStructureCache.GetUser(MFilesAPI.Vault,System.Int32)">
            <summary>
            Gets the user account of the specified user from the cache.
            </summary>
            <param name="vault">The vault object.</param>
            <param name="userId">The id of the user.</param>
            <returns>The user account.</returns>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.MetadataStructureCache.GetUserGroupAdmin(MFilesAPI.Vault,System.Int32)">
            <summary>
            Gets the specified user group from the cache.
            </summary>
            <param name="vault">The vault object.</param>
            <param name="groupId">The id of the user group.</param>
            <returns>The user group.</returns>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.MetadataStructureCache.GetLogin(MFilesAPI.Vault,System.Int32,System.String)">
            <summary>
            Gets the specified login account from the cache.
            </summary>
            <param name="vault">The vault object.</param>
            <param name="userId">The id of the user.</param>
            <param name="accountName">Account name.</param>
            <returns>The login account.</returns>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.MetadataStructureCache.GetUserIdByGuid(MFilesAPI.Vault,System.String)">
            <summary>
            Gets the user id by guid.
            </summary>
            <param name="vault">The vault object.</param>
            <param name="guid">The user GUID as string in '{00000000-0000-0000-0000-000000000000}' format.</param>
            <returns>The user id.</returns>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.MetadataStructureCache.GetUserGroupIdByGuid(MFilesAPI.Vault,System.String)">
            <summary>
            Gets user group id by guid.
            </summary>
            <param name="vault">The vault object.</param>
            <param name="guid">The user group GUID as string in '{00000000-0000-0000-0000-000000000000}' format.</param>
            <returns>The user group id.</returns>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.MetadataStructureCache.AddOrUpdateUserAccount(MFilesAPI.UserAccount)">
            <summary>
            Adds or updates a user account in the cache.
            </summary>
            <param name="userAccount">The user account to add or update.</param>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.MetadataStructureCache.RemoveUserAccount(System.Int32)">
            <summary>
            Removes the specified user account from the cache.
            </summary>
            <param name="userAccountId">The user account's id.</param>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.MetadataStructureCache.AddOrUpdateUserGroupAdmin(MFilesAPI.UserGroupAdmin)">
            <summary>
            Adds or updates a user group in the cache.
            </summary>
            <param name="userGroup">The user group object.</param>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.MetadataStructureCache.RemoveUserGroup(System.Int32)">
            <summary>
            Removes the specified user group from the cache.
            </summary>
            <param name="userGroupId">The user group's id.</param>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.MetadataStructureCache.AddOrUpdateLoginAccount(MFilesAPI.LoginAccount)">
            <summary>
            Adds or updates a user account in the cache.
            </summary>
            <param name="loginAccount">The login account object.</param>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.MetadataStructureCache.RemoveLoginAccount(System.String)">
            <summary>
            Removes the specified login account from the cache.
            </summary>
            <param name="accountName">The login accounts name.</param>
        </member>
        <member name="T:MFiles.VAF.MetadataCache.MetadataStructureCacheEventSink">
            <summary>
            Listener for the events that update the metadata structure cache.
            </summary>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.MetadataStructureCacheEventSink.#ctor(MFiles.VAF.MetadataCache.IMetadataStructureCacheUpdate)">
            <summary>
            Initializes the event sink.
            </summary>
            <param name="cache">Parent cache.</param>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.MetadataStructureCacheEventSink.SetTargetCache(MFiles.VAF.MetadataCache.IMetadataStructureCacheUpdate)">
            <summary>
            Changes the target cache object that gets updated according to this event sink.
            </summary>
            <param name="cache">The new cache object.</param>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.MetadataStructureCacheEventSink.UpdateUserGroupInCache(MFiles.VAF.Common.EventHandlerEnvironment)">
            <summary>
            Listener for user group changes.
            </summary>
            <param name="env"></param>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.MetadataStructureCacheEventSink.RemoveUserGroupFromCache(MFiles.VAF.Common.EventHandlerEnvironment)">
            <summary>
            RemoveUserGroupFromCache is the handler for AfterRemoveUserGroup event. It removes the user group from the cache.
            </summary>
            <param name="env">The event handler operation context.</param>		
        </member>
        <member name="M:MFiles.VAF.MetadataCache.MetadataStructureCacheEventSink.UpdateUserInCache(MFiles.VAF.Common.EventHandlerEnvironment)">
            <summary>
            Listener for user account changes.
            </summary>
            <param name="env"></param>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.MetadataStructureCacheEventSink.RemoveUserFromCache(MFiles.VAF.Common.EventHandlerEnvironment)">
            <summary>
            RemoveUserFromCache is the handler for AfterRemoveUserAccount event. It removes the user from the cache.
            </summary>
            <param name="env">The event handler operation context.</param>		
        </member>
        <member name="M:MFiles.VAF.MetadataCache.MetadataStructureCacheEventSink.UpdateLoginInCache(MFiles.VAF.Common.EventHandlerEnvironment)">
            <summary>
            Listener for login account changes.
            </summary>
            <param name="env"></param>
        </member>
        <member name="M:MFiles.VAF.MetadataCache.MetadataStructureCacheEventSink.RemoveLoginFromCache(MFiles.VAF.Common.EventHandlerEnvironment)">
            <summary>
            RemoveLoginFromCache is the handler for AfterRemoveLoginAccount event. It removes the login from the cache.
            </summary>
            <param name="env">The event handler operation context.</param>		
        </member>
        <member name="P:MFiles.VAF.MetadataCache.MetadataStructureCacheEventSink.Cache">
            <summary>
            Parent cache.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Module.BasicModule">
            <summary>
            Abstract base class for Configuration implementations.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Module.IModule">
            <summary>
            Common interface for all modules.
            Use abstract GenericModule class to get suitable implementation to all but LoadConfiguration().
            </summary>
        </member>
        <member name="M:MFiles.VAF.Module.IModule.GetConfigKey">
            <summary>
            Resolves the default configuration key for configurations of this module.
            </summary>
            <returns>The default configuration key.</returns>
        </member>
        <member name="M:MFiles.VAF.Module.IModule.GetModuleName">
            <summary>
            Returns the module name for UI.
            </summary>
            <returns>The module name string.</returns>
        </member>
        <member name="M:MFiles.VAF.Module.IModule.GetModuleDescription">
            <summary>
            Returns the module description.
            </summary>
            <returns>The module description string.</returns>
        </member>
        <member name="M:MFiles.VAF.Module.IModule.LoadConfiguration(MFilesAPI.Vault)">
            <summary>
            LoadConfiguration loads the configuration of the owner module from the vault.
            </summary>
            <param name="vault">The document vault.</param>
        </member>
        <member name="M:MFiles.VAF.Module.IModule.UnloadConfiguration">
            <summary>
            Removes the configuration.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Module.IModule.ValidateConfigurationSyntax(System.String)">
            <summary>
            Validates the configuration data syntax without touching running configuration.
            </summary>
            <param name="configurationData">The serialized configurationd data.</param>
        </member>
        <member name="M:MFiles.VAF.Module.IModule.ValidateConfiguration(MFilesAPI.Vault,MFiles.VAF.Configuration.ValidationResultBase)">
            <summary>
            Method to Validate the modules configuration in this vault.
            Updates the configurations IsValid.
            </summary>
            <param name="vault">The vault.</param>
            <param name="validationResult">The validation state that receives the validation results.</param>
        </member>
        <member name="M:MFiles.VAF.Module.IModule.Initialize(MFilesAPI.Vault)">
            <summary>
            Used for module initialization that may include dependencies on other modules.
            It is automatically called by the Configuration Manager after all modules are loaded.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Module.IModule.Start">
            <summary>
            Used for indicating the module start. It is automatically called by the Configuration Manager after all modules are initialized.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Module.IModule.Stop">
            <summary>
            Used for indicating the module stop. It is automatically called by the Configuration Manager for all modules before are initialized.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Module.IModule.Uninitialize">
            <summary>
            Used for indicating the module uninitialization. 
            </summary>
        </member>
        <member name="P:MFiles.VAF.Module.IModule.ModuleManager">
            <summary>
            Access to the module manager that initializes the instance.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Module.IModule.Configuration">
            <summary>
            Access to module's configuration object.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Module.IModule.ConfigurationRequired">
            <summary>
            Specifies whether the module requires configuration or not.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Module.IModule.AssemblyName">
            <summary>
            Name of the assembly from where the module is loaded.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Module.BasicModule.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Module.BasicModule.GetMethodsByAttribute``1(System.Boolean)">
            <summary>
            Returns a collection of the methods decorated with the given attribute that the module contains.
            </summary>
            <param name="unused">True to return unused handlers, false to return current used handlers.</param>
            <returns>A collection of methods or an empty collection if the module is not enabled.</returns>
        </member>
        <member name="M:MFiles.VAF.Module.BasicModule.GetConfigKey">
            <summary>
            Resolves the default configuration key for configurations of this module.
            </summary>
            <returns>The default configuration key.</returns>
        </member>
        <member name="M:MFiles.VAF.Module.BasicModule.GetModuleName">
            <summary>
            Returns the module name for UI.
            </summary>
            <returns>The module name string.</returns>
        </member>
        <member name="M:MFiles.VAF.Module.BasicModule.GetModuleDescription">
            <summary>
            Returns the module description.
            </summary>
            <returns>The module description string.</returns>
        </member>
        <member name="M:MFiles.VAF.Module.BasicModule.LoadConfiguration(MFilesAPI.Vault)">
            <summary>
            Actual module needs to have its own LoadConfiguration.
            </summary>
            <param name="vault">The document vault.</param>
        </member>
        <member name="M:MFiles.VAF.Module.BasicModule.UnloadConfiguration">
            <summary>
            Removes the configuration.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Module.BasicModule.ValidateConfigurationSyntax(System.String)">
            <summary>
            Validates the configuration data syntax without touching running configuration.
            </summary>
            <param name="configurationData">The serialized configurationd data.</param>
        </member>
        <member name="M:MFiles.VAF.Module.BasicModule.ValidateConfiguration(MFilesAPI.Vault,MFiles.VAF.Configuration.ValidationResultBase)">
            <summary>
            Method to validate the configuration in this vault.
            </summary>
            <param name="vault">The vault.</param>
            <param name="validationResult">The validation state that receives the validation results.</param>
        </member>
        <member name="M:MFiles.VAF.Module.BasicModule.Initialize(MFilesAPI.Vault)">
            <summary>
            Used for module initialization that may include dependencies on other modules.
            It is automatically called by the Configuration Manager after all modules are loaded.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Module.BasicModule.Start">
            <summary>
            Used for module start that may include dependencies on other modules.
            It is automatically called by the Configuration Manager after all modules are initialized.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Module.BasicModule.Stop">
            <summary>
            Used for indicating the module stop.
            It is automatically called by the Configuration Manager for all modules before they are uninitialized.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Module.BasicModule.Uninitialize">
            <summary>
            Used for indicating the module uninitialization. 
            </summary>
        </member>
        <member name="M:MFiles.VAF.Module.BasicModule.MoveConfigurationNamespace(MFilesAPI.Vault,System.String,System.String)">
            <summary>
            Move configuration content from under old namespace to new namespace.
            </summary>
            <param name="vault">The vault.</param>
            <param name="oldspace">Old namespace from where to take.</param>
            <param name="newspace">New namespace where to place.</param>
        </member>
        <member name="P:MFiles.VAF.Module.BasicModule.ModuleManager">
            <summary>
            Accesspoint to Configuration Manager.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Module.BasicModule.AssemblyName">
            <summary>
            Name of the assembly from where the module is loaded.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Module.BasicModule.Configuration">
            <summary>
            Access to specific configuration object.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Module.BasicModule.ConfigurationRequired">
            <summary>
            Specifies whether the module requires configuration or not.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Module.BasicModuleConfiguration">
            <summary>
            BasicModuleConfiguration is a base class for the module configuration classes. It provides implementations for configuration loading and parsing.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Module.IModuleConfiguration">
            <summary>
            Interface for the Configuration of the Modules.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Module.IModuleConfiguration.SetValidity(System.Boolean)">
            <summary>
            Set the configuration object either valid or invalid.
            </summary>
            <param name="isValid">The configuration validity.</param>
        </member>
        <member name="P:MFiles.VAF.Module.IModuleConfiguration.Enabled">
            <summary>
            Is the module that owns this configuration enabled or not.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Module.BasicModuleConfiguration.Valid">
            <summary>
            Method for resolving if the configuration is valid.
            </summary>
            <returns>True if the configuration is valid.</returns>
        </member>
        <member name="M:MFiles.VAF.Module.BasicModuleConfiguration.SetValidity(System.Boolean)">
            <summary>
            Set the configuration object either valid or invalid.
            </summary>
            <param name="isValid">The configuration validity.</param>
        </member>
        <member name="M:MFiles.VAF.Module.BasicModuleConfiguration.MarkMemberDefined(System.Object,System.Reflection.MemberInfo)">
            <summary>
            Marks the configuration member as 'defined', i.e. it is set in the user-specified configuration.
            </summary>
            <param name="containerObject">The object whose member is marked as defined.</param>
            <param name="member">The member indentity.</param>
        </member>
        <member name="M:MFiles.VAF.Module.BasicModuleConfiguration.IsMemberDefined(System.Object,System.Reflection.MemberInfo)">
            <summary>
            Resolves if a configuration member is defined. I.e. it is set in the user-specified configuration.
            </summary>
            <param name="containerObject">The object whose member is looked.</param>
            <param name="member">The member indentity.</param>
            <returns>Returns true if the member is defined.</returns>
        </member>
        <member name="M:MFiles.VAF.Module.BasicModuleConfiguration.#ctor">
            <summary>
            Constructor. Initializes the module as disabled and the configuration being valid.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Module.BasicModuleConfiguration.definedMembers">
            <summary>
            Set of configuration members that have been defined.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Module.BasicModuleConfiguration.ConfigurationId">
            <summary>
            Returns the module identification.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Module.BasicModuleConfiguration.ResourceManager">
            <summary>
            Returns the resource manager object that is associated with this configuration. Can be null.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Module.BasicModuleConfiguration.Enabled">
            <summary>
            Is the module that owns this configuration enabled or not.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.MFEventFilterOptions">
            <summary>
            Flags that allow further filtering of event handler delegation.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.MFEventFilterOptions.None">
            <summary>
            No filtering.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.MFEventFilterOptions.IgnoreTemplates">
            <summary>
            Filter out template object.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.MFEventFilterOptions.IgnoreRecords">
            <summary>
            Filter out objects that are marked as records.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.MFEventFilterOptions.Template">
            <summary>
            Accept only objects that are template objects.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.MFEventFilterOptions.Record">
            <summary>
            Accept only objects that are marked as record objects.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.IEventHandlerAttribute">
            <summary>
            Common interface for event handler attributes.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.IEventHandlerAttribute.MatchesEnvironment(MFiles.VAF.Common.IEventHandlerEnvironment)">
            <summary>
            MatchesEnvironment is a method that is used in evaluating the calling context against the provided filters.
            </summary>
            <param name="context">The environment object to check.</param>
            <returns>True if the filters are fulfilled and the handler should be called.</returns>
        </member>
        <member name="P:MFiles.VAF.Common.IEventHandlerAttribute.EventType">
            <summary>
            The event type.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.EventHandlerAttribute">
            <summary>
            Allows methods to be specified as event handler delegates.
            If these attributes match a certain event environment, the attached method will be executed.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.EventHandlerAttribute.MatchesEnvironment(MFiles.VAF.Common.IEventHandlerEnvironment)">
            <summary>
            MatchesContext checks the event handler attributes against the current event context and determines if the handler should be called.
            </summary>
            <param name="context">The event handler context object.</param>
            <returns>Returns true if the event handler should be called.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.EventHandlerAttribute.#ctor(MFilesAPI.MFEventHandlerType)">
            <summary>
            Creates a new instance of this attribute.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.EventHandlerAttribute.EventType">
            <summary>
            The type of event to which the method is bound.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.EventHandlerAttribute.FilterOptions">
            <summary>
            Addtional options to further filter the type of 
            objects/events to which the method is bound. 
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.VaultExtensionMethodAttribute">
            <summary>
            The attribute class for extension method implementations.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.VaultExtensionMethodAttribute.MatchesEnvironment(MFiles.VAF.Common.IEventHandlerEnvironment)">
            <summary>
            MatchesEnvironment checks the event handler attributes against the current event environment and determines if the handler should be called.
            </summary>
            <param name="context">The event handler environment object.</param>
            <returns>Returns true if the event handler at hand should be called.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.VaultExtensionMethodAttribute.#ctor(System.String)">
            <summary>
            Contructor.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.VaultExtensionMethodAttribute.Filter">
            <summary>
            Filter for matching the vault extension method handlers.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.VaultExtensionMethodAttribute.EventType">
            <summary>
            The event handler type.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.VaultExtensionMethodAttribute.RequiredVaultAccess">
            <summary>
            The vault access that is required to perform the call.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.VaultExtensionMethodAttribute.HasSeparateEventHandlerProxy">
            <summary>
            Should the Vault Extension Method have a separate Event Handler proxy.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.IEventHandlerEnvironment">
            <summary>
            The event hander 
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.IEventHandlerEnvironment.EventType">
            <summary>
            The current event type.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.IEventHandlerEnvironment.PropertyValues">
            <summary>
            Accessor for the property values object. Clones the object to local process on first call.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.IEventHandlerEnvironment.InputParams">
            <summary>
            Input parameters for the event. Set with extension method events only.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.IEventHandlerEnvironment.IsObjectEvent">
            <summary>
            Indicates if the event is associated with an object.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.IEventHandlerEnvironment.IsRecordObject">
            <summary>
            Identifies if the associated object is a record object.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.IEventHandlerEnvironment.IsTemplateObject">
            <summary>
            Identifies if the associated object is a template object.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.EventHandlerEnvironment">
            <summary>
            An object that contains variables available to a script.
            </summary>
            <remarks>
            Compare to EventHandlerEnvironment which can be used via COM with dynamic types.
            </remarks>
        </member>
        <member name="F:MFiles.VAF.Common.EventHandlerEnvironment.inputParams">
            <summary>
            Input parameters for extension methods.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.EventHandlerEnvironment.fileVerLocalClone">
            <summary>
            Local file version identifier object. The object is cloned to this process.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.EventHandlerEnvironment.loginAccountLocalClone">
            <summary>
            Local login account object. The object is cloned to this process.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.EventHandlerEnvironment.objectAccessControlListLocalClone">
            <summary>
            Local ACL object. The object is cloned to this process.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.EventHandlerEnvironment.propertyValuesLocalClone">
            <summary>
            Local property values object. The object is cloned to this process.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.EventHandlerEnvironment.valueListItemLocalClone">
            <summary>
            Local value list item object. The object is cloned to this process.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.EventHandlerEnvironment.userAccountLocalClone">
            <summary>
            Local user account object. The object is cloned to this process.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.EventHandlerEnvironment.userGroupAdminLocalClone">
            <summary>
            Local user group admin object. The object is cloned to this process.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.EventHandlerEnvironment.FileVerExternal">
            <summary>
            Original file version object. The object may be physically located in other process.
            </summary> 
        </member>
        <member name="P:MFiles.VAF.Common.EventHandlerEnvironment.LoginAccountExternal">
            <summary>
            Original login account object. The object may be physically located in other process.
            </summary> 
        </member>
        <member name="P:MFiles.VAF.Common.EventHandlerEnvironment.ObjectAccessControlListExternal">
            <summary>
            Original ACL object. The object may be physically located in other process.
            </summary> 
        </member>
        <member name="P:MFiles.VAF.Common.EventHandlerEnvironment.PropertyValuesExternal">
            <summary>
            Original property values object. The object may be physically located in other process.
            </summary> 
        </member>
        <member name="P:MFiles.VAF.Common.EventHandlerEnvironment.ValueListItemExternal">
            <summary>
            Original value list item object. The object may be physically located in other process.
            </summary> 
        </member>
        <member name="P:MFiles.VAF.Common.EventHandlerEnvironment.UserAccountExternal">
            <summary>
            Original user account object. The object may be physically located in other process.
            </summary> 
        </member>
        <member name="P:MFiles.VAF.Common.EventHandlerEnvironment.UserGroupAdminExternal">
            <summary>
            Original user group admin object. The object may be physically located in other process.
            </summary> 
        </member>
        <member name="P:MFiles.VAF.Common.EventHandlerEnvironment.ViewExternal">
            <summary>
            Original view object. The object may be physically located in other process.
            </summary> 
        </member>
        <member name="P:MFiles.VAF.Common.EventHandlerEnvironment.Type">
            <summary>
            The event type for which this event handler environment was built.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.EventHandlerEnvironment.FileTransferSessionID">
            <summary>
            The file transfer session id. Available only for file transfer related events.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.EventHandlerEnvironment.LoggedOutUserID">
            <summary>
            The user id for logged out user. Available only for logout event.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.EventHandlerEnvironment.VaultExtensionMethodName">
            <summary>
            The vault extension method to call.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.EventHandlerEnvironment.Input">
            <summary>
            The input string for vault extension method.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.EventHandlerEnvironment.IsCancellable">
            <summary>
            Tells if the operation can be cancelled by throwing an error.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.EventHandlerEnvironment.FileVer">
            <summary>
            Accessor for the file version. Clones the object to local process on first call.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.EventHandlerEnvironment.LoginAccount">
            <summary>
            Accessor for the login account. Clones the object to local process on first call.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.EventHandlerEnvironment.ObjectAccessControlList">
            <summary>
            Accessor for the ACL object. Clones the object to local process on first call.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.EventHandlerEnvironment.PropertyValues">
            <summary>
            Accessor for the property values object. Clones the object to local process on first call.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.EventHandlerEnvironment.ValueListItem">
            <summary>
            Accessor for the value list item object. Clones the object to local process on first call.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.EventHandlerEnvironment.UserAccount">
            <summary>
            Accessor for the user account object. Clones the object to local process on first call.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.EventHandlerEnvironment.UserGroupAdmin">
            <summary>
            Accessor for the user group admin object. Clones the object to local process on first call.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.EventHandlerEnvironment.InputParams">
            <summary>
            An array of input parameters passed. (Assumes they were in JSON array format)
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.EventHandlerEnvironment.View">
            <summary>
            Accessor for the exteral view object.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.EventHandlerEnvironment.EventType">
            <summary>
            Accessor for the event type.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.EventHandlerEnvironment.IsObjectEvent">
            <summary>
            Resolves if the event is object version specific event.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.EventHandlerEnvironment.IsRecordObject">
            <summary>
            Resolves if the event target is a record object.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.EventHandlerEnvironment.IsTemplateObject">
            <summary>
            Resolves if the event target is a template object.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Module.ConfigurationUpgrader.IConfigurationUpgrader">
            <summary>
            Module Specific Configuration Upgrader.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Module.ConfigurationUpgrader.IConfigurationUpgrader.GetUpgradeActions">
            <summary>
            Returns a collection of registered <see cref="T:MFiles.VAF.Module.ConfigurationUpgrader.IConfigurationUpgradeAction"/>'s.
            </summary>
            <returns>Collection of registered <see cref="T:MFiles.VAF.Module.ConfigurationUpgrader.IConfigurationUpgradeAction"/>'s.</returns>
        </member>
        <member name="M:MFiles.VAF.Module.ConfigurationUpgrader.IConfigurationUpgrader.RegisterAction(MFiles.VAF.Module.ConfigurationUpgrader.IConfigurationUpgradeAction)">
            <summary>
            Registers a single <see cref="T:MFiles.VAF.Module.ConfigurationUpgrader.IConfigurationUpgradeAction"/>.
            </summary>
            <param name="action">Action to be registered.</param>
        </member>
        <member name="M:MFiles.VAF.Module.ConfigurationUpgrader.IConfigurationUpgrader.Upgrade(MFilesAPI.Vault,System.String)">
            <summary>
            Applies all registered <see cref="T:MFiles.VAF.Module.ConfigurationUpgrader.IConfigurationUpgradeAction"/>'s for a Module's Configuration.
            </summary>
            <param name="vault">Vault</param>
            <param name="configJson">Configuration JSON</param>
            <returns><see cref="T:MFiles.VAF.Module.ConfigurationUpgrader.IConfigurationUpgradeResults"/></returns>
        </member>
        <member name="T:MFiles.VAF.Common.MFilesApiExtensionMethods">
            <summary>
            Includes extension methods various M-Files API objects.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.MFilesApiExtensionMethods.ToLocal(MFilesAPI.AccessControlList)">
            <summary>
            Create a local copy of the given object.
            </summary>
            <param name="source">External object</param>
            <returns>Local copy.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFilesApiExtensionMethods.ToLocal(MFilesAPI.FileVer)">
            <summary>
            Create a local copy of the given object.
            </summary>
            <param name="source">External object</param>
            <returns>Local copy.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFilesApiExtensionMethods.ToLocal(MFilesAPI.LoginAccount)">
            <summary>
            Create a local copy of the given object.
            </summary>
            <param name="source">External object</param>
            <returns>Local copy.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFilesApiExtensionMethods.ToLocal(MFilesAPI.ObjVer)">
            <summary>
            Create a local copy of the given object.
            </summary>
            <param name="source">External object</param>
            <returns>Local copy.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFilesApiExtensionMethods.ToLocal(MFilesAPI.PropertyValues)">
            <summary>
            Create a local copy of the given object.
            </summary>
            <param name="source">External object</param>
            <returns>Local copy.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFilesApiExtensionMethods.ToLocal(MFilesAPI.TypedValue)">
            <summary>
            Create a local copy of the given object.
            </summary>
            <param name="source">External object</param>
            <returns>Local copy.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFilesApiExtensionMethods.ToLocal(MFilesAPI.UserAccount)">
            <summary>
            Create a local copy of the given object.
            </summary>
            <param name="source">External object</param>
            <returns>Local copy.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFilesApiExtensionMethods.ToLocal(MFilesAPI.UserGroupAdmin)">
            <summary>
            Create a local copy of the given object.
            </summary>
            <param name="source">External object</param>
            <returns>Local copy.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFilesApiExtensionMethods.ToLocal(MFilesAPI.ValueListItem)">
            <summary>
            Create a local copy of the given object.
            </summary>
            <param name="source">External object</param>
            <returns>Local copy.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFilesApiExtensionMethods.ToLocal(MFilesAPI.PropertyDef)">
            <summary>
            Create a local copy of the given object.
            </summary>
            <param name="source">External object</param>
            <returns>Local copy.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFilesApiExtensionMethods.ToLocal(MFilesAPI.PropertyValue)">
            <summary>
            Create a local copy of the given object.
            </summary>
            <param name="source">External object</param>
            <returns>Local copy.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFilesApiExtensionMethods.ToLocal(MFilesAPI.SessionInfo)">
            <summary>
            Create a local copy of the given object.
            </summary>
            <param name="source">External object</param>
            <returns>Local copy.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.MFilesApiExtensionMethods.ToLocal(MFilesAPI.View)">
            <summary>
            Create a local copy of the given object.
            </summary>
            <param name="source">External object</param>
            <returns>Local copy.</returns>
        </member>
        <member name="T:MFiles.VAF.Module.ConfigurationUpgrader.IConfigurationUpgradeAction">
            <summary>
            A routine performed against an <see cref="T:MFiles.VAF.Configuration.IConfiguration"/>.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Module.ConfigurationUpgrader.IConfigurationUpgradeAction.Upgrade(MFilesAPI.Vault,System.String)">
            <summary>
            Applies the upgrade action.
            </summary>
            <param name="vault"><see cref="T:MFilesAPI.Vault"/></param>
            <param name="configJson">Configuration JSON</param>
            <returns><see cref="T:MFiles.VAF.Module.ConfigurationUpgrader.IConfigurationUpgradeActionResult"/></returns>
            <returns><see cref="T:MFiles.VAF.Module.ConfigurationUpgrader.IConfigurationUpgradeActionResult"/></returns>
        </member>
        <member name="M:MFiles.VAF.Module.ConfigurationUpgrader.IConfigurationUpgradeAction.IsUpgradeRequired(MFilesAPI.Vault,System.String)">
            <summary>
            Determines if the upgrade is required.
            </summary>
            <param name="vault"><see cref="T:MFilesAPI.Vault"/></param>
            <param name="configJson">Configuration JSON</param>
            <returns>True / False</returns>
        </member>
        <member name="P:MFiles.VAF.Module.ConfigurationUpgrader.IConfigurationUpgradeAction.ActionSummary">
            <summary>
            Summary of the modifications made by this upgrade action.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Module.ConfigurationUpgrader.IConfigurationUpgradeActionResult">
            <summary>
            The result of a single more upgrade action.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Module.ConfigurationUpgrader.IConfigurationUpgradeActionResult.OriginalJson">
            <summary>
            Pre-Upgrade Configuration JSON.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Module.ConfigurationUpgrader.IConfigurationUpgradeActionResult.UpgradedJson">
            <summary>
            Post-Upgrade Configuration JSON.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Module.ConfigurationUpgrader.IConfigurationUpgradeActionResult.State">
            <summary>
            Upgrade state.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Module.ConfigurationUpgrader.IConfigurationUpgradeActionResult.Details">
            <summary>
            Log of action taken during upgrade.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Module.ConfigurationUpgrader.IConfigurationUpgradeActionResult.FailureReason">
            <summary>
            Defined explanation or reasoning for failure.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Module.ConfigurationUpgrader.IConfigurationUpgradeResults">
            <summary>
            The result of a set of one or more upgrade actions for a single <see cref="T:MFiles.VAF.Module.IModule"/>.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Module.ConfigurationUpgrader.IConfigurationUpgradeResults.OriginalJson">
            <summary>
            Pre-Upgrade Configuration JSON.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Module.ConfigurationUpgrader.IConfigurationUpgradeResults.UpgradedJson">
            <summary>
            Post-Upgrade Configuration JSON.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Module.ConfigurationUpgrader.IConfigurationUpgradeResults.State">
            <summary>
            Upgrade state.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Module.ConfigurationUpgrader.IConfigurationUpgradeResults.ActionResults">
            <summary>
            Result objects for each upgrade action.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Module.ConfigurationUpgrader.UpgradeDetail">
            <summary>
            Detail entry for an upgrade action.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Module.ConfigurationUpgrader.UpgradeDetail.#ctor(System.String,System.String,System.String,System.String,MFiles.VAF.Module.ConfigurationUpgrader.UpgradeState)">
            <summary>
            Self Populating constructor.
            </summary>
            <param name="jsPath">Reference path to this item, used to query a <see cref="T:Newtonsoft.Json.Linq.JObject"/>, ( aka JSPath query ).</param>
            <param name="source">Module.GetConfigKey().</param>
            <param name="upgradeKey">Upgrade key being applied.</param>
            <param name="message">Detail message.</param>
            <param name="status">Status level.</param>
        </member>
        <member name="P:MFiles.VAF.Module.ConfigurationUpgrader.UpgradeDetail.Source">
            <summary>
            Upgrade Source, commonly the Module.GetConfigKey().
            </summary>
        </member>
        <member name="P:MFiles.VAF.Module.ConfigurationUpgrader.UpgradeDetail.UpgradeKey">
            <summary>
            Unique upgrade key of the upgrade that is being applied.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Module.ConfigurationUpgrader.UpgradeDetail.Message">
            <summary>
            Detail entry message.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Module.ConfigurationUpgrader.UpgradeDetail.Status">
            <summary>
            Detail status level.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Module.ConfigurationUpgrader.UpgradeDetail.JSPath">
            <summary>
            Reference path to this item, used as a JSPath query.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Module.ConfigurationUpgrader.UpgradeState">
            <summary>
            Result states for an <see cref="T:MFiles.VAF.Module.ConfigurationUpgrader.IConfigurationUpgradeAction"/>.
            
            Note: The numeric ordering denotes the severity level, where anything 
            larger than 'Succeeded' is a failure of some sort.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Module.ConfigurationUpgrader.UpgradeState.NotRequired">
            <summary>
            Upgrade was not required.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Module.ConfigurationUpgrader.UpgradeState.Required">
            <summary>
            Upgrade is required.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Module.ConfigurationUpgrader.UpgradeState.Succeeded">
            <summary>
            Upgrade succeeded.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Module.ConfigurationUpgrader.UpgradeState.Failed">
            <summary>
            Upgrade did not succeed.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Module.ConfigurationUpgrader.UpgradeState.Fatal">
            <summary>
            The upgrade resulted in a fatal exception and was unable to continue.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Module.IModuleConfigurationValidation.ValidateModules(MFilesAPI.Vault,System.Collections.Generic.List{MFiles.VAF.Module.IModule},MFiles.VAF.Configuration.ValidationResultBase)">
            <summary>
            Perform the validation on list of modules.
            </summary>
            <param name="vault">The vault object.</param>
            <param name="modules">List of modules which to validate.</param>
            <param name="validationResult">The validation state that receives the validation results.</param>
        </member>
        <member name="T:MFiles.VAF.Module.ModuleConfigurationValidator">
            <summary>
            
            </summary>
        </member>
        <member name="M:MFiles.VAF.Module.ModuleConfigurationValidator.ValidateModules(MFilesAPI.Vault,System.Collections.Generic.List{MFiles.VAF.Module.IModule},MFiles.VAF.Configuration.ValidationResultBase)">
            <summary>
            Perform the validation on list of modules.
            </summary>
            <param name="vault">The active vault</param>
            <param name="modules">List of modules which to validate.</param>
            <param name="validationResult">The validation state that receives the validation results.</param>
        </member>
        <member name="T:MFiles.VAF.Common.IPropertyAttribute">
            <summary>
            Common interface for event handler attributes.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.IPropertyAttribute.MatchesEnvironment(MFiles.VAF.Common.IPropertyEnvironment)">
            <summary>
            Common interface for property handler attributes.
            </summary>
            <param name="context">The environment object to check.</param>
            <returns>True if the filters are fulfilled and the handler should be called.</returns>
        </member>
        <member name="T:MFiles.VAF.Common.PropertyAttribute">
            <summary>
            Allows methods to be specified as event handler delegates.
            If these attributes match a certain event environment, the attached method will be executed.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.PropertyAttribute.MatchesEnvironment(MFiles.VAF.Common.IPropertyEnvironment)">
            <summary>
            MatchesEnvironment checks the event handler attributes against the current context and determines if the handler should be called.
            </summary>
            <param name="context">The event handler context object.</param>
            <returns>Returns true if the event handler should be called.</returns>	
        </member>
        <member name="M:MFiles.VAF.Common.PropertyAttribute.#ctor(System.String,MFiles.VAF.Common.PropertyAttribute.AttributeType)">
            <summary>
            Constructor.
            </summary>
            <param name="propertyDefinitionAlias">Alias of the property where the handler method decorated with this attribute should be attached to.</param>
            <param name="type">The type of the property handler attribute.</param>
        </member>
        <member name="P:MFiles.VAF.Common.PropertyAttribute.Type">
            <summary>
            The property attribute type.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.PropertyAttribute.PropertyDefinition">
            <summary>
            The property definition alias where the method containing this attribute should be attached.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.PropertyAttribute.AttributeType">
            <summary>
            The property attribute type enumeration.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.PropertyAttribute.AttributeType.PropertyValueValidation">
            <summary>
            Value Validation
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.PropertyAttribute.AttributeType.PropertyAutomaticNumbering">
            <summary>
            Number calculation.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.PropertyAttribute.AttributeType.PropertyCustomValue">
            <summary>
            Custom value generation.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.PropertyValueValidationAttribute">
            <summary>
            Attribute for marking the property value validation handler methods.
            Handler signature: delegate bool ValidationMethod( PropertyEnvironment environment, out string message )
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.PropertyValueValidationAttribute.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="propertyDefinitionAlias">Alias of the property where the property value validation handler method should be attached to.</param>
        </member>
        <member name="T:MFiles.VAF.Common.PropertyAutomaticNumberingAttribute">
            <summary>
            Attribute for marking the customized automatic numbering handler methods.
            Handler signature: delegate TypedValue ValidationMethod( PropertyEnvironment environment )
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.PropertyAutomaticNumberingAttribute.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="propertyDefinitionAlias">Alias of the property where the customized automatic numbering handler method should be attached to.</param>
        </member>
        <member name="T:MFiles.VAF.Common.PropertyCustomValueAttribute">
            <summary>
            Attribute for marking the custom value calculation handler methods.
            Handler signature: delegate TypedValue CustomValueMethod( PropertyEnvironment environment )
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.PropertyCustomValueAttribute.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="propertyDefinitionAlias">Alias of the property where the custom value calculation handler method should be attached to.</param>
        </member>
        <member name="T:MFiles.VAF.Common.IPropertyEnvironment">
            <summary>
            The property execution environment.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.IPropertyEnvironment.LastUsed">
            <summary>
            The last used property number. Is defined only in customized automatic numbering.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.IPropertyEnvironment.PropertyDefinition">
            <summary>
            The property definition in which context the execution is.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.IPropertyEnvironment.PropertyValue">
            <summary>
            The property value handled to the execution.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.PropertyEnvironment">
            <summary>
            An object that contains variables available to a script.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.PropertyEnvironment.propertyDefinitionLocalClone">
            <summary>
            Local property definition object. The object is cloned to this process.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.PropertyEnvironment.propertyValueLocalClone">
            <summary>
            Local property value object. The object is cloned to this process.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.PropertyEnvironment.lastUsedLocalClone">
            <summary>
            Local typed value object. The object is cloned to this process.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.PropertyEnvironment.PropertyDefinitionExternal">
            <summary>
            Original property definition object. The object may be physically located in other process.
            </summary> 
        </member>
        <member name="P:MFiles.VAF.Common.PropertyEnvironment.PropertyValueExternal">
            <summary>
            Original property value object. The object may be physically located in other process.
            </summary> 
        </member>
        <member name="P:MFiles.VAF.Common.PropertyEnvironment.LastUsedExternal">
            <summary>
            Original typed value object. The object is cloned to this process.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.PropertyEnvironment.PropertyDefinition">
            <summary>
            The property definition in which context the execution is.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.PropertyEnvironment.PropertyValue">
            <summary>
            The property value handled to the execution.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.PropertyEnvironment.LastUsed">
            <summary>
            The typed value handled to the execution.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.IStateAttribute">
            <summary>
            Common interface for state handlers attributes.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.IStateAttribute.MatchesEnvironment(MFiles.VAF.Common.IStateEnvironment)">
            <summary>
            MatchesEnvironment is a method that is used in evaluating the calling context against the provided filters.
            </summary>
            <param name="context">The environment object to check.</param>
            <returns>True if the filters are fulfilled and the handler should be called.</returns>
        </member>
        <member name="T:MFiles.VAF.Common.StateAttribute">
            <summary>
            Allows methods to be specified as event handler delegates.
            If these attributes match a certain event environment, the attached method will be executed.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.StateAttribute.MatchesEnvironment(MFiles.VAF.Common.IStateEnvironment)">
            <summary>
            MatchesEnvironment checks the method filters against the current event context and determines if the handler should be called.
            </summary>
            <param name="context">The state context object.</param>
            <returns>Returns true if the handler method should be called.</returns>
        </member>
        <member name="M:MFiles.VAF.Common.StateAttribute.#ctor(System.String,MFiles.VAF.Common.StateAttribute.AttributeType)">
            <summary>
            Constructor.
            </summary>
            <param name="stateAlias">Alias of the state where the handler method decorated with this attribute should be attached to.</param>
            <param name="type">The attribute type.</param>
        </member>
        <member name="P:MFiles.VAF.Common.StateAttribute.Type">
            <summary>
            The state attribute type.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.StateAttribute.State">
            <summary>
            The property definition alias where the method containing this attribute should be attached.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.StateAttribute.AttributeType">
            <summary>
            The state attribute type enumeration.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.StateAttribute.AttributeType.StateAction">
            <summary>
            State Action behavior.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Common.StateAttribute.AttributeType.StatePreConditions">
            <summary>
            State PreCondition check.
            </summary> 
        </member>
        <member name="F:MFiles.VAF.Common.StateAttribute.AttributeType.StatePostConditions">
            <summary>
            State PostCondition check.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.StateActionAttribute">
            <summary>
            Attribute for marking the state run action handlers.
            Handler signature: delegate void RunActionMethod( StateEnvironment environment )
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.StateActionAttribute.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="stateAlias">Alias of the state where the run action handler should be attached to.</param>
        </member>
        <member name="T:MFiles.VAF.Common.StatePreConditionsAttribute">
            <summary>
            Attribute for marking the state precondition evaluation handlers.
            Handler signature: delegate bool PreConditionsMethod( StateEnvironment environment, out string message )
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.StatePreConditionsAttribute.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="stateAlias">Alias of the state where the preconditions evaluation handler should be attached to.</param>
        </member>
        <member name="T:MFiles.VAF.Common.StatePostConditionsAttribute">
            <summary>
            Attribute for marking the state postcondition evaluation handlers.
            Handler signature: delegate bool PostConditionsMethod( StateEnvironment environment, out string message )
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.StatePostConditionsAttribute.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="stateAlias">Alias of the state where the postconditions evaluation handler should be attached to.</param>
        </member>
        <member name="T:MFiles.VAF.Common.IStateEnvironment">
            <summary>
            The state execution environment.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.IStateEnvironment.StateID">
            <summary>
            The current state ID.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.IStateEnvironment.InitialNextStateID">
            <summary>
            The initial next state ID.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.IStateEnvironment.PropertyValues">
            <summary>
            Accessor for the property values object. Clones the object to local process on first call.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Common.StateEnvironment">
            <summary>
            An object that contains variables available to a script.
            </summary>
            <remarks>
            Compare to EventHandlerEnvironment which can be used via COM with dynamic types.
            </remarks>
        </member>
        <member name="F:MFiles.VAF.Common.StateEnvironment.propertyValuesLocalClone">
            <summary>
            Local property values object. The object is cloned to this process.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.StateEnvironment.PropertyValuesExternal">
            <summary>
            Original property values object. The object may be physically located in other process.
            </summary> 
        </member>
        <member name="P:MFiles.VAF.Common.StateEnvironment.PropertyValues">
            <summary>
            Accessor for the property values object. Clones the object to local process on first call.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.StateEnvironment.StateID">
            <summary>
            The id of the state that acts as an execution context.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Common.StateEnvironment.InitialNextStateID">
            <summary>
            The initial next state ID.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.BlockCommandHandler">
            <summary>
            The base handler for placeholders that open or close template blocks .
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.PlaceholderCommandHandler">
            <summary>
            Abstract implementation of a Placeholder Command Handler 
            used to validate and expand a placeholder level command.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.IPlaceholderCommandHandler">
            <summary>
            Defines a handler for a placeholder level command.
            A handler is responsible for expanding the current ExpansionContext into another.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.IPlaceholderCommandHandler.Init(MFiles.VAF.Placeholders.PlaceholderLevel)">
            <summary>
            Initializes the handler for a specific placeholder level.
            </summary>
            <param name="level">The placeholder level to handle.</param>
        </member>
        <member name="M:MFiles.VAF.Placeholders.IPlaceholderCommandHandler.Expand(MFiles.VAF.Placeholders.IExpansionContext,MFiles.VAF.Placeholders.ObjVerExReadCache)">
            <summary>
            Expands the placeholder level based on the given context.
            </summary>
            <param name="context">The expansion context.</param>
            <param name="cache">The object cache.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.IPlaceholderCommandHandler.GetResolvedStructureReferences">
            <summary>
            Provides all structure references that exist and were resolved in this placeholder level.
            </summary>
            <remarks>
            All unresolved structure items should be listed as issues.
            </remarks>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.IPlaceholderCommandHandler.Level">
            <summary>
            The placeholder level this object is handling.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.IPlaceholderCommandHandler.Vault">
            <summary>
             The level's vault.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.IPlaceholderCommandHandler.Settings">
            <summary>
             The level's parse and expansion settings.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.IPlaceholderCommandHandler.Command">
            <summary>
             The level's command.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.IPlaceholderCommandHandler.Parameter">
            <summary>
            The level's parameter.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.IPlaceholderCommandHandler.ContextType">
            <summary>
            The datatype this command handler will output.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.IPlaceholderCommandHandler.AcceptsContextTypes">
            <summary>
            The datatype this command handler accepts for the context when expanding.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.IPlaceholderCommandHandler.Issues">
            <summary>
            Issues encountered during initialization.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.PlaceholderCommandHandler.Initialize">
            <summary>
            Performs custom initialization.
            </summary>
            <remarks>
            This method should:
            	1. Load any necessary data to be used during expansion. (Optimize for load once, expand many.)
            	2. Validate the level's location in the placeholder and parameter (if applicable) and return any issues.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.PlaceholderCommandHandler.Expand(MFiles.VAF.Placeholders.IExpansionContext,MFiles.VAF.Placeholders.ObjVerExReadCache)">
            <summary>
            Expands the placeholder level based on the given context.
            </summary>
            <param name="context">The expansion context.</param>
            <param name="cache">The object cache.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.PlaceholderCommandHandler.Init(MFiles.VAF.Placeholders.PlaceholderLevel)">
            <summary>
            Initializes the handler for a specific placeholder level.
            Sets the level, and performs base validation and kicks off custom initialization.
            </summary>
            <remarks>
            Override Initialize() to perform custom intialization.
            </remarks>
            <param name="level">The placeholder level to handle.</param>
        </member>
        <member name="M:MFiles.VAF.Placeholders.PlaceholderCommandHandler.GetResolvedStructureReferences">
            <summary>
            Provides all structure references that exist and were resolved in this placeholder level.
            </summary>
            <remarks>
            All unresolved structure items should be listed as issues.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.PlaceholderCommandHandler.ObjTypeVisibleToUser(MFilesAPI.ObjType)">
            <summary>
            Determines if the ObjType is visible to the current user session.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.PlaceholderCommandHandler.PropertyVisibleToUser(MFilesAPI.PropertyDef)">
            <summary>
            Determines if the PropertyDef is visible to the current user session.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.PlaceholderCommandHandler.ClassVisibleToUser(MFilesAPI.ObjectClass)">
            <summary>
            Determines if the ObjectClass is visible to the current user session.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.PlaceholderCommandHandler.ValueListItemVisibleToUser(MFilesAPI.ValueListItem)">
            <summary>
            Determines if the ObjectClass is visible to the current user session.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.PlaceholderCommandHandler.ValidateLevelType">
            <summary>
            Creates a validation issue if the type of the level isn't compatible with the handler.
            </summary>
            <returns>True if the level type is valid.</returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.PlaceholderCommandHandler.ValidateLevelPosition">
            <summary>
            
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.PlaceholderCommandHandler.Level">
            <summary>
            The placeholder level this object is handling.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.PlaceholderCommandHandler.Vault">
            <summary>
             The level's vault.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.PlaceholderCommandHandler.Settings">
            <summary>
             The level's parse and expansion settings.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.PlaceholderCommandHandler.Command">
            <summary>
             The level's command.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.PlaceholderCommandHandler.Parameter">
            <summary>
            The level's parameter.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.PlaceholderCommandHandler.ContextType">
            <summary>
            The datatype this command handler will output.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.PlaceholderCommandHandler.AcceptsContextTypes">
            <summary>
            The datatype this command handler accepts for the context when expanding.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.PlaceholderCommandHandler.Issues">
            <summary>
            Issues encountered during initialization.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.PlaceholderCommandHandler.Initialized">
            <summary>
            Indicates whether the handler has been initialized.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.PlaceholderCommandHandler.SupportedTypes">
            <summary>
            Hint to base validation about which types are supported.
            If null or empty, all formats are considered valid.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.BlockCommandHandler.OpensBlock">
            <summary>
            Determines if this command starts a new block.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.BlockCommandHandler.ClosesBlock(MFiles.VAF.Placeholders.Block)">
            <summary>
            Determines if this command can close a block.
            </summary>
            <param name="block">The currently open block.</param>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.BlockCommandHandler.OpenedBlock">
            <summary>
            The block this handler's level's placeholder opened (if any).
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.BlockCommandHandler.ClosedBlock">
            <summary>
            The block this handler's level's placeholder closed (if any).
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.IClonablePlaceholderCommandHandler">
            <summary>
            Interface for PlaceholderCommandHandlers to implement so they can
            utilize the CloningCommandHandlerProvider
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.IClonablePlaceholderCommandHandler.Clone">
            <summary>
            Creates a copy of the handler.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MFiles.VAF.Placeholders.CloningCommandHandlerProvider">
            <summary>
            Provides command handlers by providing a clone of the command handler it was created with.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.IPlaceholderCommandProvider">
            <summary>
            Interface for providing a Placeholder level command handler.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.IPlaceholderCommandProvider.GetHandler">
            <summary>
            Gets a handler for the command.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.IPlaceholderCommandProvider.Command">
            <summary>
            The name of the command this object returns a hanlder for.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.CloningCommandHandlerProvider.#ctor(System.String,MFiles.VAF.Placeholders.IClonablePlaceholderCommandHandler)">
            <summary>
            Constructor.
            </summary>
            <param name="command">The name of the command this object provides a handler for.</param>
            <param name="handler">The handler to provide clones of.</param>
        </member>
        <member name="M:MFiles.VAF.Placeholders.CloningCommandHandlerProvider.GetHandler">
            <summary>
            Gets a handler for the command.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.CloningCommandHandlerProvider.Command">
            <summary>
            The name of the command this object returns a hanlder for.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.CloningCommandHandlerProvider.Handler">
            <summary>
            The base handler this provider returns clones of.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.CommandProviders">
            <summary>
            Placeholder command providers indexed by their respective commands.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.CommandProviders.GetDefaultProviders">
            <summary>
            Default placeholder command providers (all VAF built in commands).
            </summary>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.CommandProviders.GetMFilesConcatenatingPropertyCommands">
            <summary>
            The placeholder commands available in M-Files admin when defining an auto-concatenating property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.CommandProviders.GetMFilesNotificationContext(MFilesAPI.TypedValue,MFilesAPI.TypedValue,MFilesAPI.TypedValue,MFilesAPI.TypedValue,MFilesAPI.TypedValue)">
            <summary>
            The placeholder commands available when defining an M-Files notification.			
            </summary>
            <param name="rulename">The name of the notification rule.</param>
            <param name="causedBy">The name of the user who caused the event.</param>
            <param name="causedByAccount">The account name for the user who caused the event.</param>
            <param name="rolledBacktoVersion">The version that the object was rolled back to.</param>
            <param name="timestamp">The time when the event occurred.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.CommandProviders.Add(MFiles.VAF.Placeholders.IPlaceholderCommandProvider)">
            <summary>
            Adds a provider to the dictionary.
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:MFiles.VAF.Placeholders.CommandProviders.AddRange(System.Collections.Generic.IEnumerable{MFiles.VAF.Placeholders.IPlaceholderCommandProvider})">
            <summary>
            Adds multiple providers to the dictionary.
            </summary>
            <param name="providers"></param>
        </member>
        <member name="M:MFiles.VAF.Placeholders.CommandProviders.AddRange(MFiles.VAF.Placeholders.IPlaceholderCommandProvider[])">
            <summary>
            Adds multiple providers to the dictionary.
            </summary>
            <param name="providers"></param>
        </member>
        <member name="M:MFiles.VAF.Placeholders.CommandProviders.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.CommandProviders.#ctor(System.Collections.Generic.IEnumerable{MFiles.VAF.Placeholders.IPlaceholderCommandProvider})">
            <summary>
            Constructor.
            </summary>
            <param name="providers"></param>
        </member>
        <member name="M:MFiles.VAF.Placeholders.CommandProviders.#ctor(MFiles.VAF.Placeholders.IPlaceholderCommandProvider[])">
            <summary>
            Constructor.
            </summary>
            <param name="providers"></param>
        </member>
        <member name="T:MFiles.VAF.Placeholders.Commands.FirstVersionPlaceholder">
            <summary>
            Expands to the specific version of an object.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.FirstVersionPlaceholder.Expand(MFiles.VAF.Placeholders.IExpansionContext,MFiles.VAF.Placeholders.ObjVerExReadCache)">
            <summary>
            Expands the placeholder level based on the given context.
            </summary>
            <param name="context">The expansion context.</param>
            <param name="cache">The object cache used during the expansion.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.FirstVersionPlaceholder.Initialize">
            <summary>
            Performs custom initialization.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.FirstVersionPlaceholder.ContextType">
            <summary>
            The datatype this command handler will output.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.FirstVersionPlaceholder.AcceptsContextTypes">
            <summary>
            The datatype this command handler accepts for the context when expanding.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.FirstVersionPlaceholder.SupportedTypes">
            <summary>
            The level types supported by this handler.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.Commands.CurrentContextPlaceholder">
            <summary>
            Expands to the objects parent via the relevant Owner property.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.CurrentContextPlaceholder.Expand(MFiles.VAF.Placeholders.IExpansionContext,MFiles.VAF.Placeholders.ObjVerExReadCache)">
            <summary>
            Expands the placeholder level based on the given context.
            </summary>
            <param name="context">The expansion context.</param>
            <param name="cache">The object cache used during the expansion.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.CurrentContextPlaceholder.Initialize">
            <summary>
            Performs custom initialization.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.CurrentContextPlaceholder.ContextType">
            <summary>
            The datatype this command handler will output.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.CurrentContextPlaceholder.AcceptsContextTypes">
            <summary>
            The datatype this command handler accepts for the context when expanding.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.CurrentContextPlaceholder.SupportedTypes">
            <summary>
            The level types supported by this handler.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.Commands.StaticContextPlaceholder">
            <summary>
            Generic handler for creating a placeholder that always resolves to the same context.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.StaticContextPlaceholder.#ctor(MFiles.VAF.Placeholders.IExpansionContext)">
            <summary>
            Constructor.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.StaticContextPlaceholder.Expand(MFiles.VAF.Placeholders.IExpansionContext,MFiles.VAF.Placeholders.ObjVerExReadCache)">
            <summary>
            Expands the placeholder level based on the given context.
            </summary>
            <param name="context"></param>
            <param name="cache"></param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.StaticContextPlaceholder.Initialize">
            <summary>
            Performs custom initialization.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.StaticContextPlaceholder.Context">
            <summary>
            The context this handler will expand to.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.StaticContextPlaceholder.ContextType">
            <summary>
            The datatype this command handler will output.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.StaticContextPlaceholder.AcceptsContextTypes">
            <summary>
            The datatype this command handler accepts for the context when expanding.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.StaticContextPlaceholder.SupportedTypes">
            <summary>
            The level types supported by this handler.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.Commands.IStaticPlaceholderProvider">
            <summary>
            Provides handlers that expand to a static context.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.IStaticPlaceholderProvider.Context">
            <summary>
            The context that all provided handlers will expand to.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.Commands.StaticContextPlaceholderProvider">
            <summary>
            Provides handlers that expands to a static context.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.StaticContextPlaceholderProvider.#ctor(System.String,MFiles.VAF.Placeholders.IExpansionContext)">
            <summary>
            Constructor.
            </summary>
            <param name="command">The name of the command this object provides a handler for.</param>
            <param name="context">The context that all handlers should provide.</param>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.StaticContextPlaceholderProvider.GetHandler">
            <summary>
            Gets a handler for the command.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.StaticContextPlaceholderProvider.Command">
            <summary>
            The name of the command this object returns a handler for.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.StaticContextPlaceholderProvider.Context">
            <summary>
            The context that all provided handlers will expand to.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.Commands.TodayPlaceholder">
            <summary>
            Expands to the current vault guid.
            <remarks>
            </remarks>
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.TodayPlaceholder.Expand(MFiles.VAF.Placeholders.IExpansionContext,MFiles.VAF.Placeholders.ObjVerExReadCache)">
            <summary>
            Expands this node in the given context.
            </summary>
            <param name="context">The context of the expansion.</param>
            <param name="cache">The object cache.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.TodayPlaceholder.Initialize">
            <summary>
            Performs custom initialization.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.TodayPlaceholder.ContextType">
            <summary>
            The datatype this command handler will output.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.TodayPlaceholder.AcceptsContextTypes">
            <summary>
            The datatype this command handler accepts for the context when expanding.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.TodayPlaceholder.SupportedTypes">
            <summary>
            The level types supported by this handler.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.Commands.ObjTitlePlaceholder">
            <summary>
            Expands to the titles of the context objects.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.Commands.SimpleObjectToTextPlaceholderBase">
            <summary>
            Base for simple commands that expand an object to a text value without any initialization.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.SimpleObjectToTextPlaceholderBase.Expand(MFiles.VAF.Placeholders.IExpansionContext,MFiles.VAF.Placeholders.ObjVerExReadCache)">
            <summary>
            Expands the placeholder level based on the given context.
            </summary>
            <param name="context">The expansion context.</param>
            <param name="cache">The object cache used during the expansion.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.SimpleObjectToTextPlaceholderBase.GetObjectText(MFiles.VAF.Common.ObjVerEx)">
            <summary>
            Expands an object to a text value.
            </summary>
            <param name="objVerEx">The object to expand.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.SimpleObjectToTextPlaceholderBase.Initialize">
            <summary>
            Performs custom initialization.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.SimpleObjectToTextPlaceholderBase.ContextType">
            <summary>
            The datatype this command handler will output.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.SimpleObjectToTextPlaceholderBase.AcceptsContextTypes">
            <summary>
            The datatype this command handler accepts for the context when expanding.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.SimpleObjectToTextPlaceholderBase.LoadObjects">
            <summary>
            Indicates whether the objects should be preloaded before passed to the GetObjectText() method.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.SimpleObjectToTextPlaceholderBase.SupportedTypes">
            <summary>
            The level types supported by this handler.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.ObjTitlePlaceholder.GetObjectText(MFiles.VAF.Common.ObjVerEx)">
            <summary>
            Expands an object to a text value.
            </summary>
            <param name="objVerEx">The object to expand.</param>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.ObjTitlePlaceholder.LoadObjects">
            <summary>
            Indicates whether the objects should be preloaded before passed to the GetObjectText() method.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.Commands.RelationshipPlaceholder">
            <summary>
            Expands to objects related to the context object.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.RelationshipPlaceholder.GetProvider(System.String,MFilesAPI.MFRelationshipsMode,System.Type)">
            <summary>
            Creates a provider for this command with the specified parameters.
            </summary>
            <param name="command">The name of the command the provider will return a handler for.</param>
            <param name="mode">The relationship mode to use during expansion.</param>
            <param name="filterType">The type of filter (None, Class or objType) that the placeholder can define.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.RelationshipPlaceholder.#ctor(MFilesAPI.MFRelationshipsMode,System.Type)">
            <summary>
            Constructor.
            </summary>
            <param name="mode">The relationship mode to use during expansion.</param>
            <param name="filterType">The type of filter (None, Class or objType) that the placeholder can define.</param>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.RelationshipPlaceholder.Expand(MFiles.VAF.Placeholders.IExpansionContext,MFiles.VAF.Placeholders.ObjVerExReadCache)">
            <summary>
            Expands the placeholder level based on the given context.
            </summary>
            <param name="context">The expansion context.</param>
            <param name="cache">The object cache used during the expansion.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.RelationshipPlaceholder.GetResolvedStructureReferences">
            <summary>
            Provides all structure references that exist and were resolved in this placeholder level.
            </summary>
            <remarks>
            All unresolved structure items should be listed as issues.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.RelationshipPlaceholder.Clone">
            <summary>
            Clones the placeholder.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.RelationshipPlaceholder.Initialize">
            <summary>
            Performs custom initialization.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.RelationshipPlaceholder.FilterType">
            <summary>
            The filter type to pass to MFIdentifier for filter reference resolution.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.RelationshipPlaceholder.Filter">
            <summary>
            The filter id if present and resolved.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.RelationshipPlaceholder.ObjType">
            <summary>
            The filtering ObjType definition.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.RelationshipPlaceholder.Class">
            <summary>
            The filtering Class definition.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.RelationshipPlaceholder.Mode">
            <summary>
            The relationship mode for expansion.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.RelationshipPlaceholder.ContextType">
            <summary>
            The datatype this command handler will output.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.RelationshipPlaceholder.AcceptsContextTypes">
            <summary>
            The datatype this command handler accepts for the context when expanding.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.RelationshipPlaceholder.SupportedTypes">
            <summary>
            The level types supported by this handler.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.Commands.RequirePlaceholder">
            <summary>
            Does not modify the current context, but creates an expansion issue if the
            current context is empty.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.RequirePlaceholder.Expand(MFiles.VAF.Placeholders.IExpansionContext,MFiles.VAF.Placeholders.ObjVerExReadCache)">
            <summary>
            Expands the placeholder level based on the given context.
            </summary>
            <param name="context">The expansion context.</param>
            <param name="cache">The object cache used during the expansion.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.RequirePlaceholder.Initialize">
            <summary>
            Performs custom initialization.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.RequirePlaceholder.ContextType">
            <summary>
            The datatype this command handler will output.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.RequirePlaceholder.AcceptsContextTypes">
            <summary>
            The datatype this command handler accepts for the context when expanding.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.RequirePlaceholder.SupportedTypes">
            <summary>
            The level types supported by this handler.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.Commands.SpecificVersionPlaceholder">
            <summary>
            Expands to the specific version of an object.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.SpecificVersionPlaceholder.Expand(MFiles.VAF.Placeholders.IExpansionContext,MFiles.VAF.Placeholders.ObjVerExReadCache)">
            <summary>
            Expands the placeholder level based on the given context.
            </summary>
            <param name="context">The expansion context.</param>
            <param name="cache">The object cache used during the expansion.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.SpecificVersionPlaceholder.Initialize">
            <summary>
            Performs custom initialization.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.SpecificVersionPlaceholder.ContextType">
            <summary>
            The datatype this command handler will output.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.SpecificVersionPlaceholder.AcceptsContextTypes">
            <summary>
            The datatype this command handler accepts for the context when expanding.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.SpecificVersionPlaceholder.SupportedTypes">
            <summary>
            The level types supported by this handler.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.Commands.DaysAgoPlaceholder">
            <summary>
            Expands to the number of days that have passed since the context date.
            Use when the context date is in the past.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.DaysAgoPlaceholder.Expand(MFiles.VAF.Placeholders.IExpansionContext,MFiles.VAF.Placeholders.ObjVerExReadCache)">
            <summary>
            Expands the placeholder level based on the given context.
            </summary>
            <param name="context">The expansion context.</param>
            <param name="cache">The object cache used during the expansion.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.DaysAgoPlaceholder.Initialize">
            <summary>
            Performs custom initialization.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.DaysAgoPlaceholder.ContextType">
            <summary>
            The datatype this command handler will output.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.DaysAgoPlaceholder.AcceptsContextTypes">
            <summary>
            The datatype this command handler accepts for the context when expanding.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.DaysAgoPlaceholder.SupportedTypes">
            <summary>
            The level types supported by this handler.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.Commands.DaysUntilPlaceholder">
            <summary>
            Expands to the number of days until the context date.
            Use when the context date is in the future.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.DaysUntilPlaceholder.Expand(MFiles.VAF.Placeholders.IExpansionContext,MFiles.VAF.Placeholders.ObjVerExReadCache)">
            <summary>
            Expands the placeholder level based on the given context.
            </summary>
            <param name="context">The expansion context.</param>
            <param name="cache">The object cache used during the expansion.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.DaysUntilPlaceholder.Initialize">
            <summary>
            Performs custom initialization.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.DaysUntilPlaceholder.ContextType">
            <summary>
            The datatype this command handler will output.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.DaysUntilPlaceholder.AcceptsContextTypes">
            <summary>
            The datatype this command handler accepts for the context when expanding.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.DaysUntilPlaceholder.SupportedTypes">
            <summary>
            The level types supported by this handler.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.Commands.FileNamesPlaceholder">
            <summary>
            Expands to the file names of each object context.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.FileNamesPlaceholder.Expand(MFiles.VAF.Placeholders.IExpansionContext,MFiles.VAF.Placeholders.ObjVerExReadCache)">
            <summary>
            Expands the placeholder level based on the given context.
            </summary>
            <param name="context">The expansion context.</param>
            <param name="cache">The object cache used during the expansion.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.FileNamesPlaceholder.Initialize">
            <summary>
            Performs custom initialization.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.FileNamesPlaceholder.ContextType">
            <summary>
            The datatype this command handler will output.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.FileNamesPlaceholder.AcceptsContextTypes">
            <summary>
            The datatype this command handler accepts for the context when expanding.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.FileNamesPlaceholder.SupportedTypes">
            <summary>
            The level types supported by this handler.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.Commands.HyperlinkFragmentHtmlPlaceholder">
            <summary>
            Expands to an HTML formatted hyperlink containing URLs to the object 
            for M-Files Desktop, M-Files Web, and M-Files Mobile.
            IEncodingPlaceholderCommand is implemented to avoid being double encoded.
            This should not be used as a default encoder.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.IEncodingPlaceholderCommand">
            <summary>
            Indicates which placeholders perform encoding,
            to ensure values aren't double encoded during expansion.
            Implementations need to expand to encoded text, as well 
            as provide their dedicated encoding method.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.IEncodingPlaceholderCommand.Encode(System.String)">
            <summary>
            Encodes an expanded text value.
            </summary>
            <param name="value">The value to encode.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.HyperlinkFragmentHtmlPlaceholder.GetObjectText(MFiles.VAF.Common.ObjVerEx)">
            <summary>
            Expands an object to a text value.
            </summary>
            <param name="objVerEx">The object to expand.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.HyperlinkFragmentHtmlPlaceholder.Encode(System.String)">
            <summary>
            Not implemented.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.HyperlinkFragmentHtmlPlaceholder.LoadObjects">
            <summary>
            Indicates whether the objects should be preloaded before passed to the GetObjectText() method.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.Commands.HyperlinkFragmentPlainPlaceholder">
            <summary>
            Expands to a plain-text formatted hyperlink containing URLs to the object 
            for M-Files Desktop, M-Files Web, and M-Files Mobile.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.HyperlinkFragmentPlainPlaceholder.GetObjectText(MFiles.VAF.Common.ObjVerEx)">
            <summary>
            Expands an object to a text value.
            </summary>
            <param name="objVerEx">The object to expand.</param>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.HyperlinkFragmentPlainPlaceholder.LoadObjects">
            <summary>
            Indicates whether the objects should be preloaded before passed to the GetObjectText() method.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.Commands.ObjVerStrPlaceholder">
            <summary>
            Expands to the ObjVer strings of the context objects.
            Format: "(ObjTypeID-ObjectID-Version)"
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.ObjVerStrPlaceholder.GetObjectText(MFiles.VAF.Common.ObjVerEx)">
            <summary>
            Expands an object to a text value.
            </summary>
            <param name="objVerEx">The object to expand.</param>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.ObjVerStrPlaceholder.LoadObjects">
            <summary>
            Indicates whether the objects should be preloaded before passed to the GetObjectText() method.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.Commands.ObjIDStrPlaceholder">
            <summary>
            Expands to the ObjID strings of the context objects.
            Format: "(ObjTypeID-ObjectID)"
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.ObjIDStrPlaceholder.GetObjectText(MFiles.VAF.Common.ObjVerEx)">
            <summary>
            Expands an object to a text value.
            </summary>
            <param name="objVerEx">The object to expand.</param>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.ObjIDStrPlaceholder.LoadObjects">
            <summary>
            Indicates whether the objects should be preloaded before passed to the GetObjectText() method.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.Commands.CountPlaceholder">
            <summary>
            Expands to the number of values are in the current context.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.CountPlaceholder.Expand(MFiles.VAF.Placeholders.IExpansionContext,MFiles.VAF.Placeholders.ObjVerExReadCache)">
            <summary>
            Expands this node in the given context.
            </summary>
            <param name="context">The context of the expansion.</param>
            <param name="cache">The object cache.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.CountPlaceholder.Initialize">
            <summary>
            Performs custom initialization.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.CountPlaceholder.ContextType">
            <summary>
            The datatype this command handler will output.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.CountPlaceholder.AcceptsContextTypes">
            <summary>
            The datatype this command handler accepts for the context when expanding.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.CountPlaceholder.SupportedTypes">
            <summary>
            The level types supported by this handler.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.Commands.MFilesUrlPlaceholder">
            <summary>
            Expands to an M-Files URL that shows the latest version of the object in question.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.MFilesUrlPlaceholder.#ctor(MFiles.VAF.Common.UrlTargetPlatform,System.Boolean,MFilesAPI.MFilesURLType)">
            <summary>
            Constructor.
            </summary>
            <param name="platform">The platform the url should target.</param>
            <param name="specificVersion">
            Indicates if the generated urls will point to a specific version of the object, or the latest.
            </param>
            <param name="urlType">Indicates the behavior of the generated url.</param>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.MFilesUrlPlaceholder.GetProvider(System.String,MFiles.VAF.Common.UrlTargetPlatform,System.Boolean,MFilesAPI.MFilesURLType)">
            <summary>
            Gets a provider for an MFilesUrl Placeholder.
            </summary>
            <param name="command">The name of the command the provider will return a handler for.</param>
            <param name="platform">The platform the url should target.</param>
            <param name="specificVersion">
            Indicates if the generated urls will point to a specific version of the object, or the latest.
            </param>
            <param name="urlType">Indicates the behavior of the generated url.</param>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.MFilesUrlPlaceholder.GetObjectText(MFiles.VAF.Common.ObjVerEx)">
            <summary>
            Expands an object to a text value.
            </summary>
            <param name="objVerEx">The object to expand.</param>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.MFilesUrlPlaceholder.LoadObjects">
            <summary>
            Indicates whether the objects should be preloaded before passed to the GetObjectText() method.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.MFilesUrlPlaceholder.Platform">
            <summary>
            The platform the url should target.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.MFilesUrlPlaceholder.SpecificVersion">
            <summary>
            Indicates if the generated urls will point to a specific version of the object, or the latest.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.MFilesUrlPlaceholder.UrlType">
            <summary>
            Indicates the behavior of the generated url.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.Commands.MFilesUrlPlaceholderCommandProvider">
            <summary>
            Provides an MFilesUrlPlaceholder handler.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.MFilesUrlPlaceholderCommandProvider.#ctor(System.String,MFiles.VAF.Common.UrlTargetPlatform,System.Boolean,MFilesAPI.MFilesURLType)">
            <summary>
            Constructor.
            Creates a provider for a StaticTextPlacholder. 
            </summary>
            <remarks>
            The provider will always return the same instance of the handler, so the
            staticText can be changed between expansions without re-parsing the template.
            </remarks>
            <param name="command">The name of the command this object provides a handler for.</param>
            <param name="platform">The platform the url should target.</param>
            <param name="specificVersion">
            	Indicates if the generated urls will point to a specific version of the object, or the latest.
            </param>
            <param name="urlType">Indicates the behavior of the generated url.</param>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.MFilesUrlPlaceholderCommandProvider.GetHandler">
            <summary>
            Gets a handler for the command.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.MFilesUrlPlaceholderCommandProvider.Command">
            <summary>
            The name of the command this object returns a hanlder for.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.MFilesUrlPlaceholderCommandProvider.Platform">
            <summary>
            The platform the url should target.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.MFilesUrlPlaceholderCommandProvider.SpecificVersion">
            <summary>
            Indicates if the generated urls will point to a specific version of the object, or the latest.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.MFilesUrlPlaceholderCommandProvider.UrlType">
            <summary>
            Indicates the behavior of the generated url.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.Commands.OldPropertyPlaceholder">
            <summary>
            Expands to the typed value of an object's previous version's property value for the specified property def.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.Commands.PropertyPlaceholder">
            <summary>
            Expands to the typed value of an object's property value for the specified property def.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.IPropertyValueCommandHandler">
            <summary>
            Interface for command hanlders that return the property values of a specific property.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.IPropertyValueCommandHandler.PropertyDef">
            <summary>
            The property def this handler will output values from.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Placeholders.Commands.PropertyPlaceholder.PropDefRef">
            <summary>
            The property reference.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.PropertyPlaceholder.Expand(MFiles.VAF.Placeholders.IExpansionContext,MFiles.VAF.Placeholders.ObjVerExReadCache)">
            <summary>
            Expands this node in the given context.
            </summary>
            <param name="context">The context of the expansion.</param>
            <param name="cache">The object cache.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.PropertyPlaceholder.GetResolvedStructureReferences">
            <summary>
            Provides all structure references that exist and were resolved in this placeholder level.
            </summary>
            <remarks>
            All unresolved structure items should be listed as issues.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.PropertyPlaceholder.Initialize">
            <summary>
            Performs custom initialization.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.PropertyPlaceholder.PropertyDef">
            <summary>
            The property def referenced in the command parameter.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.PropertyPlaceholder.ContextType">
            <summary>
            The datatype this command handler will output.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.PropertyPlaceholder.AcceptsContextTypes">
            <summary>
            The datatype this command handler accepts for the context when expanding.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.PropertyPlaceholder.SupportedTypes">
            <summary>
            The level types supported by this handler.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.OldPropertyPlaceholder.Expand(MFiles.VAF.Placeholders.IExpansionContext,MFiles.VAF.Placeholders.ObjVerExReadCache)">
            <summary>
            Expands the placeholder level based on the given context.
            </summary>
            <param name="context">The expansion context.</param>
            <param name="cache">The object cache used during the expansion.</param>
            <returns></returns>
        </member>
        <member name="T:MFiles.VAF.Placeholders.Commands.ParentPlaceholder">
            <summary>
            Expands to the objects parent via the relevant Owner property.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.ParentPlaceholder.Expand(MFiles.VAF.Placeholders.IExpansionContext,MFiles.VAF.Placeholders.ObjVerExReadCache)">
            <summary>
            Expands the placeholder level based on the given context.
            </summary>
            <param name="context">The expansion context.</param>
            <param name="cache">The object cache used during the expansion.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.ParentPlaceholder.Initialize">
            <summary>
            Performs custom initialization.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.ParentPlaceholder.IndexOwnerPropertyDefsByObjType">
            <summary>
            Indexes all real-object type based propertyDefs by the object types they point to.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.ParentPlaceholder.ContextType">
            <summary>
            The datatype this command handler will output.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.ParentPlaceholder.AcceptsContextTypes">
            <summary>
            The datatype this command handler accepts for the context when expanding.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.ParentPlaceholder.SupportedTypes">
            <summary>
            The level types supported by this handler.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.Commands.PreviousVersionPlaceholder">
            <summary>
            Expands to an objects last previous version in simple mode, or a previous
            version a specified number of versions ago in complex mode.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.PreviousVersionPlaceholder.Expand(MFiles.VAF.Placeholders.IExpansionContext,MFiles.VAF.Placeholders.ObjVerExReadCache)">
            <summary>
            Expands the placeholder level based on the given context.
            </summary>
            <param name="context">The expansion context.</param>
            <param name="cache">The object cache used during the expansion.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.PreviousVersionPlaceholder.Initialize">
            <summary>
            Performs custom initialization.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.PreviousVersionPlaceholder.ContextType">
            <summary>
            The datatype this command handler will output.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.PreviousVersionPlaceholder.AcceptsContextTypes">
            <summary>
            The datatype this command handler accepts for the context when expanding.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.PreviousVersionPlaceholder.SupportedTypes">
            <summary>
            The level types supported by this handler.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.Commands.ToDatePlaceholder">
            <summary>
            Expands a timestamp context into a date context.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.ToDatePlaceholder.Expand(MFiles.VAF.Placeholders.IExpansionContext,MFiles.VAF.Placeholders.ObjVerExReadCache)">
            <summary>
            Expands the placeholder level based on the given context.
            </summary>
            <param name="context">The expansion context.</param>
            <param name="cache">The object cache used during the expansion.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.ToDatePlaceholder.Initialize">
            <summary>
            Performs custom initialization.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.ToDatePlaceholder.ContextType">
            <summary>
            The datatype this command handler will output.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.ToDatePlaceholder.AcceptsContextTypes">
            <summary>
            The datatype this command handler accepts for the context when expanding.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.ToDatePlaceholder.SupportedTypes">
            <summary>
            The level types supported by this handler.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.Commands.UniquePlaceholder">
            <summary>
            Expands a context down to unique values only (removes duplicate values).
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.UniquePlaceholder.Expand(MFiles.VAF.Placeholders.IExpansionContext,MFiles.VAF.Placeholders.ObjVerExReadCache)">
            <summary>
            Expands the placeholder level based on the given context.
            </summary>
            <param name="context">The expansion context.</param>
            <param name="cache">The object cache used during the expansion.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.UniquePlaceholder.Initialize">
            <summary>
            Performs custom initialization.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.UniquePlaceholder.ContextType">
            <summary>
            The datatype this command handler will output.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.UniquePlaceholder.AcceptsContextTypes">
            <summary>
            The datatype this command handler accepts for the context when expanding.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.UniquePlaceholder.SupportedTypes">
            <summary>
            The level types supported by this handler.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.Commands.UserCausedWorkflowStatePlaceholder">
            <summary>
            Expands to the users who moved the context objects into a specific state.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.IObjTypeCommandHandler">
            <summary>
            Interface for command handlers that return objects or lookups of a specific object type or value list.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.IObjTypeCommandHandler.ObjType">
            <summary>
            The type of objects this handler will output.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.UserCausedWorkflowStatePlaceholder.Expand(MFiles.VAF.Placeholders.IExpansionContext,MFiles.VAF.Placeholders.ObjVerExReadCache)">
            <summary>
            Expands this node in the given context.
            </summary>
            <param name="context">The context of the expansion.</param>
            <param name="cache">The object cache.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.UserCausedWorkflowStatePlaceholder.GetResolvedStructureReferences">
            <summary>
            Provides all structure references that exist and were resolved in this placeholder level.
            </summary>
            <remarks>
            All unresolved structure items should be listed as issues.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.UserCausedWorkflowStatePlaceholder.Initialize">
            <summary>
            Performs custom initialization.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.UserCausedWorkflowStatePlaceholder.FindLastVersionTransitionedToState(MFiles.VAF.Common.ObjVerEx,System.Int32)">
            <summary>
            Finds the the version that was last transitioned to the specified state.
            </summary>
            <param name="objVerEx">The object to find the version for.</param>
            <param name="stateID">The id of the state.</param>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.UserCausedWorkflowStatePlaceholder.ObjType">
            <summary>
            Reference to the user account value list.
            </summary>
            <remarks>Specified to implement IObjTypeCommandHandler.</remarks>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.UserCausedWorkflowStatePlaceholder.State">
            <summary>
            The state referenced in the command parameter.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.UserCausedWorkflowStatePlaceholder.ContextType">
            <summary>
            The datatype this command handler will output.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.UserCausedWorkflowStatePlaceholder.AcceptsContextTypes">
            <summary>
            The datatype this command handler accepts for the context when expanding.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.UserCausedWorkflowStatePlaceholder.SupportedTypes">
            <summary>
            The level types supported by this handler.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.Commands.VaultGuidPlaceholder">
            <summary>
            Expands to the current vault guid.
            <remarks>
            </remarks>
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.VaultGuidPlaceholder.Expand(MFiles.VAF.Placeholders.IExpansionContext,MFiles.VAF.Placeholders.ObjVerExReadCache)">
            <summary>
            Expands this node in the given context.
            </summary>
            <param name="context">The context of the expansion.</param>
            <param name="cache">The object cache.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.VaultGuidPlaceholder.Initialize">
            <summary>
            Performs custom initialization.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.VaultGuidPlaceholder.ContextType">
            <summary>
            The datatype this command handler will output.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.VaultGuidPlaceholder.AcceptsContextTypes">
            <summary>
            The datatype this command handler accepts for the context when expanding.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.VaultGuidPlaceholder.SupportedTypes">
            <summary>
            The level types supported by this handler.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.Commands.VaultNamePlaceholder">
            <summary>
            Expands to the current vault name.
            <remarks>
            </remarks>
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.VaultNamePlaceholder.Expand(MFiles.VAF.Placeholders.IExpansionContext,MFiles.VAF.Placeholders.ObjVerExReadCache)">
            <summary>
            Expands this node in the given context.
            </summary>
            <param name="context">The context of the expansion.</param>
            <param name="cache">The object cache.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.VaultNamePlaceholder.Initialize">
            <summary>
            Performs custom initialization.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.VaultNamePlaceholder.ContextType">
            <summary>
            The datatype this command handler will output.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.VaultNamePlaceholder.AcceptsContextTypes">
            <summary>
            The datatype this command handler accepts for the context when expanding.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.VaultNamePlaceholder.SupportedTypes">
            <summary>
            The level types supported by this handler.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.Commands.InternalIDPlaceholder">
            <summary>
            Expands to the internal id of each context object.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.InternalIDPlaceholder.Expand(MFiles.VAF.Placeholders.IExpansionContext,MFiles.VAF.Placeholders.ObjVerExReadCache)">
            <summary>
            Expands this node in the given context.
            </summary>
            <param name="context">The context of the expansion.</param>
            <param name="cache">The object cache.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.InternalIDPlaceholder.Initialize">
            <summary>
            Performs custom initialization.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.InternalIDPlaceholder.ContextType">
            <summary>
            The datatype this command handler will output.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.InternalIDPlaceholder.AcceptsContextTypes">
            <summary>
            The datatype this command handler accepts for the context when expanding.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.InternalIDPlaceholder.SupportedTypes">
            <summary>
            The level types supported by this handler.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.Commands.ObjTypeIDPlaceholder">
            <summary>
            Placeholder that expands to the id an object's object type.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.ObjTypeIDPlaceholder.Initialize">
            <summary>
            Performs custom initialization.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.ObjTypeIDPlaceholder.Expand(MFiles.VAF.Placeholders.IExpansionContext,MFiles.VAF.Placeholders.ObjVerExReadCache)">
            <summary>
            Expands this node in the given context.
            </summary>
            <param name="context">The context of the expansion.</param>
            <param name="cache">The object cache.</param>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.ObjTypeIDPlaceholder.ContextType">
            <summary>
            The datatype this command handler will output.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.ObjTypeIDPlaceholder.AcceptsContextTypes">
            <summary>
            The datatype this command handler accepts for the context when expanding.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.ObjTypeIDPlaceholder.SupportedTypes">
            <summary>
            The level types supported by this handler.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.Commands.ForEachPlaceholder">
            <summary>
            Handler that begins a foreach template block. Closed by <see cref="T:MFiles.VAF.Placeholders.Commands.NextPlaceholder"/>.
            The block is expanded for each object in the context.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.ForEachPlaceholder.Expand(MFiles.VAF.Placeholders.IExpansionContext,MFiles.VAF.Placeholders.ObjVerExReadCache)">
            <summary>
            Expands this node in the given context.
            </summary>
            <param name="context">The context of the expansion.</param>
            <param name="cache">The object cache.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.ForEachPlaceholder.OpensBlock">
            <summary>
            Determines if this command starts a new block.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.ForEachPlaceholder.Initialize">
            <summary>
            Performs custom initialization.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.ForEachPlaceholder.ContextType">
            <summary>
            The datatype this command handler will output.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.ForEachPlaceholder.AcceptsContextTypes">
            <summary>
            The datatype this command handler accepts for the context when expanding.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.ForEachPlaceholder.SupportedTypes">
            <summary>
            The level types supported by this handler.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.Commands.NextPlaceholder">
            <summary>
            Closes a block opened by the <see cref="T:MFiles.VAF.Placeholders.Commands.ForEachPlaceholder"/> handler.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.NextPlaceholder.Expand(MFiles.VAF.Placeholders.IExpansionContext,MFiles.VAF.Placeholders.ObjVerExReadCache)">
            <summary>
            Expands this node in the given context.
            </summary>
            <param name="context">The context of the expansion.</param>
            <param name="cache">The object cache.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.NextPlaceholder.ClosesBlock(MFiles.VAF.Placeholders.Block)">
            <summary>
            Determines if this command can close a block.
            </summary>
            <param name="block">The currently open block.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.NextPlaceholder.Initialize">
            <summary>
            Performs custom initialization.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.NextPlaceholder.ContextType">
            <summary>
            The datatype this command handler will output.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.NextPlaceholder.AcceptsContextTypes">
            <summary>
            The datatype this command handler accepts for the context when expanding.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.NextPlaceholder.SupportedTypes">
            <summary>
            The level types supported by this handler.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.Commands.ObjIDPlaceholder">
            <summary>
            Expands an object reference to it's external (display) id. 
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.ObjIDPlaceholder.Expand(MFiles.VAF.Placeholders.IExpansionContext,MFiles.VAF.Placeholders.ObjVerExReadCache)">
            <summary>
            Expands this node in the given context.
            </summary>
            <param name="context">The context of the expansion.</param>
            <param name="cache">The object cache.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.ObjIDPlaceholder.Initialize">
            <summary>
            Performs custom initialization.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.ObjIDPlaceholder.ContextType">
            <summary>
            The datatype this command handler will output.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.ObjIDPlaceholder.AcceptsContextTypes">
            <summary>
            The datatype this command handler accepts for the context when expanding.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.ObjIDPlaceholder.SupportedTypes">
            <summary>
            The level types supported by this handler.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.Commands.ObjTypePlaceholder">
            <summary>
            Placeholder that expands to the the name of an object's object type (simple mode)
            or to all references of the object type specified with a parameter. (complex mode)
            </summary>
        </member>
        <member name="F:MFiles.VAF.Placeholders.Commands.ObjTypePlaceholder.ObjTypeRef">
            <summary>
            The object type reference.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.ObjTypePlaceholder.Expand(MFiles.VAF.Placeholders.IExpansionContext,MFiles.VAF.Placeholders.ObjVerExReadCache)">
            <summary>
            Expands this node in the given context.
            </summary>
            <param name="context">The context of the expansion.</param>
            <param name="cache">The object cache.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.ObjTypePlaceholder.GetResolvedStructureReferences">
            <summary>
            Provides all structure references that exist and were resolved in this placeholder level.
            </summary>
            <remarks>
            All unresolved structure items should be listed as issues.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.ObjTypePlaceholder.Initialize">
            <summary>
            Performs custom initialization.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.ObjTypePlaceholder.IndexPropertyDefsByObjType">
            <summary>
            Indexes propertyDefs by the objecttype/valuelist of the items they can reference.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.ObjTypePlaceholder.ObjType">
            <summary>
            The object type referenced in the command parameter.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.ObjTypePlaceholder.ContextType">
            <summary>
            The datatype this command handler will output.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.ObjTypePlaceholder.AcceptsContextTypes">
            <summary>
            The datatype this command handler accepts for the context when expanding.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.ObjTypePlaceholder.SupportedTypes">
            <summary>
            The level types supported by this handler.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.Commands.ObjVerPlaceholder">
            <summary>
            Expands objects to their specific version numbers.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.ObjVerPlaceholder.Initialize">
            <summary>
            Performs custom initialization.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.ObjVerPlaceholder.Expand(MFiles.VAF.Placeholders.IExpansionContext,MFiles.VAF.Placeholders.ObjVerExReadCache)">
            <summary>
            Expands this node in the given context.
            </summary>
            <param name="context">The context of the expansion.</param>
            <param name="cache">The object cache.</param>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.ObjVerPlaceholder.ContextType">
            <summary>
            The datatype this command handler will output.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.ObjVerPlaceholder.AcceptsContextTypes">
            <summary>
            The datatype this command handler accepts for the context when expanding.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.ObjVerPlaceholder.SupportedTypes">
            <summary>
            The level types supported by this handler.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.Commands.UnknownPlaceholder">
            <summary>
            Handler for all unrecognized placeholder level commands.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.UnknownPlaceholder.Initialize">
            <summary>
            Initializes the handler.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.UnknownPlaceholder.Expand(MFiles.VAF.Placeholders.IExpansionContext,MFiles.VAF.Placeholders.ObjVerExReadCache)">
            <summary>
            Expands this node in the given context.
            </summary>
            <param name="context">The context of the expansion.</param>
            <param name="cache">The object cache.</param>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.UnknownPlaceholder.ContextType">
            <summary>
            The datatype this command handler will output.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.UnknownPlaceholder.AcceptsContextTypes">
            <summary>
            The datatype this command handler accepts for the context when expanding.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.UnknownPlaceholder.SupportedTypes">
            <summary>
            The level types supported by this handler.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.Commands.EncodingPlaceholderCommandHandler">
            <summary>
            Abstract class for placeholder command handlers that do final encoding.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.EncodingPlaceholderCommandHandler.Expand(MFiles.VAF.Placeholders.IExpansionContext,MFiles.VAF.Placeholders.ObjVerExReadCache)">
            <summary>
            Expands the placeholder level based on the given context.
            </summary>
            <param name="context">The expansion context.</param>
            <param name="cache">The object cache used during the expansion.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.EncodingPlaceholderCommandHandler.Encode(System.String)">
            <summary>
            Encodes an expanded text value.
            </summary>
            <param name="value">The value to encode.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.EncodingPlaceholderCommandHandler.Initialize">
            <summary>
            Performs custom initialization.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.EncodingPlaceholderCommandHandler.ContextType">
            <summary>
            The datatype this command handler will output.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.EncodingPlaceholderCommandHandler.AcceptsContextTypes">
            <summary>
            The datatype this command handler accepts for the context when expanding.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Commands.EncodingPlaceholderCommandHandler.SupportedTypes">
            <summary>
            The level types supported by this handler.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.Commands.EncodeNonePlaceholder">
            <summary>
            Converts the current context to its text value (without encoding).
            Serves as an encoder placeholder to prevent other encoders from processing the value.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.EncodeNonePlaceholder.Encode(System.String)">
            <summary>
            Encodes an expanded text value.
            </summary>
            <param name="value">The value to encode.</param>
            <returns></returns>
        </member>
        <member name="T:MFiles.VAF.Placeholders.Commands.EncodeHtmlPlaceholder">
            <summary>
            Html encodes the text value of the current context.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.EncodeHtmlPlaceholder.Encode(System.String)">
            <summary>
            Encodes an expanded text value.
            </summary>
            <param name="value">The value to encode.</param>
            <returns></returns>
        </member>
        <member name="T:MFiles.VAF.Placeholders.Commands.EncodeUrlPlaceholder">
            <summary>
            Url encodes the text value of the current context.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Commands.EncodeUrlPlaceholder.Encode(System.String)">
            <summary>
            Encodes an expanded text value.
            </summary>
            <param name="value">The value to encode.</param>
            <returns></returns>
        </member>
        <member name="T:MFiles.VAF.Placeholders.ExpandedPlaceholder">
            <summary>
            Contains the expansion results of Placeholder Text segment in a specific context.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.ExpandedPlaceholderTemplateNode">
            <summary>
            Base implementation of an expanded node in a placeholder template.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Placeholders.ExpandedPlaceholderTemplateNode.children">
            <summary>
            The expanded child nodes.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Placeholders.ExpandedPlaceholderTemplateNode.issues">
            <summary>
            Issues from the source node only.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.ExpandedPlaceholderTemplateNode.#ctor(MFiles.VAF.Placeholders.PlaceholderTemplateNode,MFiles.VAF.Placeholders.IExpansionContext,System.Collections.Generic.List{MFiles.VAF.Placeholders.ExpandedPlaceholderTemplateNode},System.Collections.Generic.List{MFiles.VAF.Placeholders.PlaceholderExpansionIssue})">
            <summary>
            Constructor.
            </summary>
            <param name="source">The item that was expanded</param>
            <param name="context">The context of the expansion.</param>
            <param name="expandedChildNodes">Epanded child nodes.</param>
            <param name="issues">Issues expanding the source node (not it's children)</param>
        </member>
        <member name="M:MFiles.VAF.Placeholders.ExpandedPlaceholderTemplateNode.GetExpandedValues``1">
            <summary>
            Finds all expanded values of the specified type (the context can be cast it).
            </summary>
            <typeparam name="T">The type of values to return.</typeparam>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.ExpandedPlaceholderTemplateNode.Source">
            <summary>
            The segment that was expanded.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.ExpandedPlaceholderTemplateNode.Context">
            <summary>
            The context of the expansion.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.ExpandedPlaceholderTemplateNode.Children">
            <summary>
            The expanded child nodes.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.ExpandedPlaceholderTemplateNode.Text">
            <summary>
            The textual result of the expansion.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.ExpandedPlaceholderTemplateNode.Issues">
            <summary>
            Issues encountered during expansion of this node and it's children.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.ExpandedPlaceholder.#ctor(MFiles.VAF.Placeholders.Placeholder,MFiles.VAF.Placeholders.IExpansionContext,System.Collections.Generic.List{MFiles.VAF.Placeholders.ExpandedPlaceholderTemplateNode},System.Collections.Generic.List{MFiles.VAF.Placeholders.PlaceholderExpansionIssue},System.Boolean,MFiles.VAF.Placeholders.IEncodingPlaceholderCommand,MFilesAPI.SessionInfo)">
            <summary>
            Constructor.
            </summary>
            <param name="source">The item that was expanded</param>
            <param name="context">The context of the expansion.</param>
            <param name="expandedChildNodes">Expanded child nodes.</param>
            <param name="issues">Issues expanding the source node (not it's children)</param>
            <param name="hideMissingValue">Indicates whether the placeholder text should be left as-is if the context is empty.</param>
            <param name="defaultEncoder">Indicates the default encoding to use.</param>
            <param name="userSession">The user session used during expansion, if any.</param>
        </member>
        <member name="M:MFiles.VAF.Placeholders.ExpandedPlaceholder.GetExpandedValues``1">
            <summary>
            Finds all expanded values of the specified type (the context can be cast it).
            </summary>
            <typeparam name="T">The type of values to return.</typeparam>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.ExpandedPlaceholder.Placeholder">
            <summary>
            Source cast as placeholder.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.ExpandedPlaceholder.LastLevel">
            <summary>
            The final child level that determines the final output of the placeholder.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.ExpandedPlaceholder.Text">
            <summary>
            The textual result of the expansion.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.ExpandedPlaceholder.HideMissingValue">
            <summary>
            Determines if an empty or missing context will result in an empty string
            or the original placeholder definition.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.ExpandedPlaceholder.DefaultEncoder">
            <summary>
            The default encoder.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.ExpandedPlaceholder.UserSession">
            <summary>
            The user session used during expansion, if any.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.ExpandedPlaceholder.IsEncoded">
            <summary>
            Indicates whether the placeholder contains an explicit encoding command.
            If this values is false, the default encoder will be used, if specified.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.ExpandedLevel">
            <summary>
            Contains the expansion results of a single level within a placeholder for a specific context.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.ExpandedLevel.#ctor(MFiles.VAF.Placeholders.PlaceholderLevel,MFiles.VAF.Placeholders.IExpansionContext,MFiles.VAF.Placeholders.IExpansionContext,System.Collections.Generic.List{MFiles.VAF.Placeholders.ExpandedPlaceholderTemplateNode},System.Collections.Generic.List{MFiles.VAF.Placeholders.PlaceholderExpansionIssue})">
            <summary>
            Constructor.
            </summary>
            <param name="source">The item that was expanded</param>
            <param name="context">The context of the expansion.</param>
            <param name="results">The resulting context after expansion.</param>
            <param name="expandedChildNodes">Expanded child nodes.</param>
            <param name="issues">Issues expanding the source node (not it's children)</param>
        </member>
        <member name="M:MFiles.VAF.Placeholders.ExpandedLevel.GetExpandedValues``1">
            <summary>
            Finds all expanded values of the specified type (the context can be cast it).
            </summary>
            <typeparam name="T">The type of values to return.</typeparam>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.ExpandedLevel.Level">
            <summary>
            Source cast as level.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.ExpandedLevel.Text">
            <summary>
            The textual representation of the results.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.ExpandedLevel.Results">
            <summary>
            The resulting context after expansion.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.ExpandedBlock">
            <summary>
            Contains the expansion results of block for a specific context.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.ExpandedBlock.#ctor(MFiles.VAF.Placeholders.Block,MFiles.VAF.Placeholders.IExpansionContext,System.Collections.Generic.List{MFiles.VAF.Placeholders.ExpandedPlaceholderTemplateNode},System.Collections.Generic.List{MFiles.VAF.Placeholders.PlaceholderExpansionIssue})">
            <summary>
            Constructor.
            </summary>
            <param name="source">The item that was expanded</param>
            <param name="context">The context of the expansion.</param>
            <param name="expandedChildNodes">Epanded child nodes.</param>
            <param name="issues">Issues expanding the source node (not it's children)</param>
        </member>
        <member name="P:MFiles.VAF.Placeholders.ExpandedBlock.Text">
            <summary>
            The textual result of the expansion.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.Issues.ValueListsNotSupportedIssue">
            <summary>
            Occurs when a level parameter resolves to a value list when only real object types are supported.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.PlaceholderTemplateIssue">
            <summary>
            An issue with a placeholder tempalte.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.PlaceholderTemplateIssue.#ctor(MFiles.VAF.Placeholders.PlaceholderTemplateNode,System.String,MFiles.VAF.Placeholders.PlaceholderIssueType)">
            <summary>
            Constructor.
            </summary>
            <param name="source">The source of the issue.</param>
            <param name="message">A description of the issue.</param>
            <param name="type">A description of the issue.</param>
        </member>
        <member name="P:MFiles.VAF.Placeholders.PlaceholderTemplateIssue.Source">
            <summary>
            The placeholder template node where the issue is.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.PlaceholderTemplateIssue.Message">
            <summary>
            A description of the issue.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.PlaceholderTemplateIssue.Type">
            <summary>
            The type of issue this is.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Issues.ValueListsNotSupportedIssue.#ctor(MFiles.VAF.Placeholders.PlaceholderLevel)">
            <summary>
            Constructor.
            </summary>
            <param name="level"></param>
        </member>
        <member name="T:MFiles.VAF.Placeholders.Issues.EmptyContextIssue">
            <summary>
            Indicates a placeholder returned an empty context, though it was required.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.PlaceholderExpansionIssue">
            <summary>
            Describes an issue encountered during placeholder text expansion.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.PlaceholderExpansionIssue.#ctor(MFiles.VAF.Placeholders.PlaceholderTemplateNode,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="source">The source of the issue.</param>
            <param name="message">Description of the issue.</param>
        </member>
        <member name="P:MFiles.VAF.Placeholders.PlaceholderExpansionIssue.Source">
            <summary>
             The source of the issue.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.PlaceholderExpansionIssue.Message">
            <summary>
            Description of the issue.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Issues.EmptyContextIssue.#ctor(MFiles.VAF.Placeholders.PlaceholderLevel)">
            <summary>
            Indicates a placeholder returned an empty context, though it was required.
            </summary>
            <param name="level"></param>
        </member>
        <member name="T:MFiles.VAF.Placeholders.Issues.InvalidExpansionContextIssue">
            <summary>
            Indicates a level was given an expansion context it isn't compatible with.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Issues.InvalidExpansionContextIssue.#ctor(MFiles.VAF.Placeholders.PlaceholderLevel,MFiles.VAF.Placeholders.ExpansionContextType)">
            <summary>
            Indicates a level was asked to expand a context of a type it doesn't accept.
            </summary>
            <param name="level"></param>
            <param name="contextType"></param>
        </member>
        <member name="T:MFiles.VAF.Placeholders.Issues.UnknownCommandIssue">
            <summary>
            Occurs when a level command is used that is not registered in the placeholder settings.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Issues.UnknownCommandIssue.#ctor(MFiles.VAF.Placeholders.PlaceholderLevel,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="level"></param>
            <param name="command"></param>
        </member>
        <member name="T:MFiles.VAF.Placeholders.Issues.UnresolvedStateIssue">
            <summary>
            Occurs when a level command's parameter references an unresolved state.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Issues.UnresolvedStateIssue.#ctor(MFiles.VAF.Placeholders.PlaceholderLevel,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="level"></param>
            <param name="reference">The unresolved identifier.</param>
        </member>
        <member name="T:MFiles.VAF.Placeholders.Issues.UnresolvedClassIssue">
            <summary>
            Occurs when a level command's parameter references an unresolved class.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Issues.UnresolvedClassIssue.#ctor(MFiles.VAF.Placeholders.PlaceholderLevel,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="level"></param>
            <param name="reference">The unresolved identifier.</param>
        </member>
        <member name="T:MFiles.VAF.Placeholders.Issues.UnresolvedObjTypeIssue">
            <summary>
            Occurs when a level command's parameter references an unresolved object type.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Issues.UnresolvedObjTypeIssue.#ctor(MFiles.VAF.Placeholders.PlaceholderLevel,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="level"></param>
            <param name="reference">The unresolved identifier.</param>
        </member>
        <member name="T:MFiles.VAF.Placeholders.Issues.IncompatibleContextIssue">
            <summary>
            Occurs when a first position level command does not accecpt the current contexts type.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Issues.IncompatibleContextIssue.#ctor(MFiles.VAF.Placeholders.PlaceholderLevel)">
            <summary>
            Constructor.
            </summary>
            <param name="level"></param>
        </member>
        <member name="T:MFiles.VAF.Placeholders.Issues.IncompatibleLevelsIssue">
            <summary>
            Occurs when a level command does not accecpt any of the context types
            which the preceding level command outputs.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Issues.IncompatibleLevelsIssue.#ctor(MFiles.VAF.Placeholders.PlaceholderLevel,MFiles.VAF.Placeholders.PlaceholderLevel)">
            <summary>
            Constructor.
            </summary>
            <param name="level"></param>
            <param name="prevLevel"></param>
        </member>
        <member name="T:MFiles.VAF.Placeholders.Issues.InvalidCommandTypeIssue">
            <summary>
            Occurs when a level command accepts no context but is not positioned at the beginning of its placeholder.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Issues.InvalidCommandTypeIssue.#ctor(MFiles.VAF.Placeholders.PlaceholderLevel,MFiles.VAF.Placeholders.PlaceholderLevelType[])">
            <summary>
            Constructor.
            </summary>
            <param name="level"></param>
            <param name="supportedTypes"></param>
        </member>
        <member name="T:MFiles.VAF.Placeholders.Issues.InvalidLevelPositionIssue">
            <summary>
            Occurs when a level command accepts no context but is not positioned at the beginning of its placeholder.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Issues.InvalidLevelPositionIssue.#ctor(MFiles.VAF.Placeholders.PlaceholderLevel)">
            <summary>
            Constructor.
            </summary>
            <param name="level"></param>
        </member>
        <member name="T:MFiles.VAF.Placeholders.Issues.UnresolvedPropertyDefIssue">
            <summary>
            Occurs when a level command's parameter references an unresolved property def.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Issues.UnresolvedPropertyDefIssue.#ctor(MFiles.VAF.Placeholders.PlaceholderLevel,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="level"></param>
            <param name="reference">The unresolved identifier.</param>
        </member>
        <member name="T:MFiles.VAF.Placeholders.ObjVerExReadCache">
            <summary>
            A simple read cache for ObjVerEx objects.
            It assumes that ObjVerExs in the cache will not be modified within the cache,
            or on the server during the lifetime of the cache.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Placeholders.ObjVerExReadCache.cache">
            <summary>
            Contains a list of cached ObjVerExs by ObjVer.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Placeholders.ObjVerExReadCache.latestCache">
            <summary>
            Constains a list of cached ObjVerExs that are known to be the latest versions of their objects.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.ObjVerExReadCache.#ctor(MFilesAPI.Vault,System.Collections.Generic.IEnumerable{MFiles.VAF.Common.ObjVerEx})">
            <summary>
            Constructor.
            </summary>
            <param name="vault">The vault in which the objects to cache reside.</param>
            <param name="objVerExs">The objects to pre-fill the cache with.</param>
        </member>
        <member name="M:MFiles.VAF.Placeholders.ObjVerExReadCache.Cache(MFiles.VAF.Common.ObjVerEx)">
            <summary>
            Adds an ObjVerEx to the cache and ensures it is loaded.
            </summary>
            <remarks>
            If there is more than one objVerEx to cache, use the Resolve overload.
            </remarks>
            <param name="objVerEx">The item to cache.</param>
        </member>
        <member name="M:MFiles.VAF.Placeholders.ObjVerExReadCache.Resolve(MFilesAPI.Lookup,MFilesAPI.SessionInfo)">
            <summary>
            Resolves an ObjVerEx instance with the ObjectVersion and Properties already loaded.
            </summary>
            <param name="lookup">A reference to the object to load.</param>
            <param name="userSession">The current user session if applicable (can be null).</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.ObjVerExReadCache.Resolve(MFilesAPI.ObjID,MFilesAPI.SessionInfo)">
            <summary>
            Resolves an ObjVerEx instance with the ObjectVersion and Properties already loaded.
            </summary>
            <param name="objID">A reference to the object to load.</param>
            <param name="userSession">The current user session if applicable (can be null).</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.ObjVerExReadCache.Resolve(MFilesAPI.ObjVer,MFilesAPI.SessionInfo)">
            <summary>
            Resolves an ObjVerEx instance with the ObjectVersion and Properties already loaded.
            </summary>
            <param name="objVer">A reference to the object to load.</param>
            <param name="userSession">The current user session if applicable (can be null).</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.ObjVerExReadCache.Resolve(MFilesAPI.Lookups,MFilesAPI.SessionInfo)">
            <summary>
            Resolves a set of ObjVerEx instances with the ObjectVersion and Properties already loaded.
            </summary>
            <param name="lookups">References to the objects to load.</param>
            <param name="userSession">The current user session if applicable (can be null).</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.ObjVerExReadCache.Resolve(MFilesAPI.ObjIDs,MFilesAPI.SessionInfo)">
            <summary>
            Resolves a set of ObjVerEx instances with the ObjectVersion and Properties already loaded.
            </summary>
            <param name="objIDs">References to the objects to load.</param>
            <param name="userSession">The current user session if applicable (can be null).</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.ObjVerExReadCache.Resolve(MFilesAPI.ObjVers,MFilesAPI.SessionInfo)">
            <summary>
            Resolves a set of ObjVerEx instances with the ObjectVersion and Properties already loaded.
            </summary>
            <param name="objVers">References to the objects to load.</param>
            <param name="userSession">The current user session if applicable (can be null).</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.ObjVerExReadCache.Resolve(System.Collections.Generic.IEnumerable{MFilesAPI.Lookup},MFilesAPI.SessionInfo)">
            <summary>
            Resolves a set of ObjVerEx instances with the ObjectVersion and Properties already loaded.
            </summary>
            <param name="lookups">References to the objects to load.</param>
            <param name="userSession">The current user session if applicable (can be null).</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.ObjVerExReadCache.Resolve(System.Collections.Generic.IEnumerable{MFilesAPI.ObjID},MFilesAPI.SessionInfo)">
            <summary>
            Resolves a set of ObjVerEx instances with the ObjectVersion and Properties already loaded.
            </summary>
            <param name="objIDs">References to the objects to load.</param>
            <param name="userSession">The current user session if applicable (can be null).</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.ObjVerExReadCache.Resolve(System.Collections.Generic.IEnumerable{MFilesAPI.ObjVer},MFilesAPI.SessionInfo)">
            <summary>
            Resolves a set of ObjVerEx instances with the ObjectVersion and Properties already loaded.
            </summary>
            <param name="objVers">References to the objects to load.</param>
            <param name="userSession">The current user session if applicable (can be null).</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.ObjVerExReadCache.Resolve(System.Collections.Generic.IEnumerable{MFiles.VAF.Common.ObjVerEx},MFilesAPI.SessionInfo,System.Boolean)">
            <summary>
            Resolves a set of loaded ObjVerEx instances from the ones provided.
            If an instance is already cached, it is returned.
            If a passed instance is loaded (but not cached), it will be cached and returned.
            If a passed instance is not loaded (and not cached), it will be loaded, cached and returned.
            If an instance does not exist it is removed from the list. 
            </summary>
            <param name="objVerExs">References to the objects to load.</param>
            <param name="userSession">The current user session if applicable (can be null).</param>
            <param name="allowMissing">Indicates whether missing ObjVerEx's will cause an error, or simply not load.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.ObjVerExReadCache.Include(MFilesAPI.ObjVer,MFiles.VAF.Placeholders.ObjVerExReadCache.CacheResolutionOperation)">
            <summary>
            Adds an object to a resolution operation.
            </summary>
            <param name="objVer">The object to add.</param>
            <param name="op">The resolution operation.</param>
        </member>
        <member name="M:MFiles.VAF.Placeholders.ObjVerExReadCache.Resolve(MFiles.VAF.Placeholders.ObjVerExReadCache.CacheResolutionOperation,MFilesAPI.SessionInfo)">
            <summary>
            Ensures all requested objects in a resolution operation are resolved.
            </summary>
            <param name="op">The resolution operation.</param>
            <param name="userSession">The current user session if applicable (can be null).</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.ObjVerExReadCache.Load(MFiles.VAF.Placeholders.ObjVerExReadCache.CacheResolutionOperation,System.Boolean)">
            <summary>
            Loads a set of objects as the response of a resolution operation and caches them.
            </summary>
            <param name="op">The resolution operation</param>
            <param name="latest">Determines which list of the resolution opertations to load. Latest or Specific.</param>
        </member>
        <member name="P:MFiles.VAF.Placeholders.ObjVerExReadCache.Vault">
            <summary>
            The vault in which the objects to cache reside.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.ObjVerExReadCache.CacheResolutionOperation">
            <summary>
            Internal helper class to hold the request, state and response of a single operation
            to resolve objects from the cache.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Placeholders.ObjVerExReadCache.CacheResolutionOperation.Request">
            <summary>
            The requested objects in order.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Placeholders.ObjVerExReadCache.CacheResolutionOperation.Response">
            <summary>
            The list of loaded objects as a response to the request.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Placeholders.ObjVerExReadCache.CacheResolutionOperation.Specific">
            <summary>
            The list of objects to be loaded from the server with specific version information.
            The specific versions of the objects will be loaded.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Placeholders.ObjVerExReadCache.CacheResolutionOperation.Latest">
            <summary>
            The list of objects to be loaded from the server without specific version information.
            The latest versions of the objects will be loaded.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.PlaceholderCommandProvider`1">
            <summary>
            A generic implementation of IPlaceholderCommandProvider.
            </summary>
            <typeparam name="T">The command handler type to provide.</typeparam>
        </member>
        <member name="M:MFiles.VAF.Placeholders.PlaceholderCommandProvider`1.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="command">The name of the command this object provides a handler for.</param>
        </member>
        <member name="M:MFiles.VAF.Placeholders.PlaceholderCommandProvider`1.GetHandler">
            <summary>
            Gets a handler for the command.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.PlaceholderCommandProvider`1.Command">
            <summary>
            The name of the command this object provides a handler for.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.ExpansionContextType">
            <summary>
            Types of ExpansionContext values.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Placeholders.ExpansionContextType.Undefined">
            <summary>
            Type is unknown.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Placeholders.ExpansionContextType.None">
            <summary>
            No type. Used when defining accepted input types,
            indicates no context is needed for expansion. Used for 
            static placeholder levels that should be standalone.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Placeholders.ExpansionContextType.Any">
            <summary>
            Any type. Used when defining accepted input types.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Placeholders.ExpansionContextType.PassThrough">
            <summary>
            Any type. Used when defining output types. Indicates the level outputs
            the same type it receives as input.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Placeholders.ExpansionContextType.Object">
            <summary>
            Context contains Object Versions.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Placeholders.ExpansionContextType.Text">
            <summary>
            Context contains strings of text.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Placeholders.ExpansionContextType.Integer">
            <summary>
            Context contains numbers.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Placeholders.ExpansionContextType.Float">
            <summary>
            Context contains floating point numbers.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Placeholders.ExpansionContextType.Boolean">
            <summary>
            Context contains booleans.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Placeholders.ExpansionContextType.Timestamp">
            <summary>
            Context contains timestamps.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Placeholders.ExpansionContextType.Date">
            <summary>
            Context contains dates.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Placeholders.ExpansionContextType.Time">
            <summary>
            Context contains times.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Placeholders.ExpansionContextType.ValueListItem">
            <summary>
            Context contains value list items (as lookups).
            </summary>
        </member>
        <member name="F:MFiles.VAF.Placeholders.ExpansionContextType.UserAccount">
            <summary>
            Context contains user accounts (as lookups).
            </summary>
        </member>
        <member name="F:MFiles.VAF.Placeholders.ExpansionContextType.UserGroup">
            <summary>
            Context contains user group (as lookups).
            </summary>
        </member>
        <member name="F:MFiles.VAF.Placeholders.ExpansionContextType.File">
            <summary>
            Context contains files.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Placeholders.ExpansionContextType.PropertyValue">
            <summary>
            Context contains property values.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.IExpansionContext">
            <summary>
            A list of values as the input or output of placeholder level expansion.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.IExpansionContext.UniqueValues">
            <summary>
            Returns a new instance of this context type with duplicate values removed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.IExpansionContext.Clone">
            <summary>
            Returns a new instance of this context type with the same values.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.IExpansionContext.SafeCast``1">
            <summary>
            Casts the context to an enumerable list of type T safely.
            If the cast is not valid, null is returned.
            </summary>
            <typeparam name="T">The type to cast each context value to.</typeparam>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.IExpansionContext.ContextType">
            <summary>
            The type of expansion value this context contains.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.IExpansionContext.Type">
            <summary>
            The type of item this list contains.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.IExpansionContext.Text">
            <summary>
            A string representation of the values contained.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.IExpansionContext.Count">
            <summary>
            A string representation of the values contained.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.ExpansionContext`1">
            <summary>
            A list of values as the input or output of placeholder level expansion.
            </summary>
            <remarks>
            These lists should never contain null or empty values.
            These lists can contain duplicates.
            </remarks>
            <typeparam name="T">The type of value contained.</typeparam>
        </member>
        <member name="M:MFiles.VAF.Placeholders.ExpansionContext`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.ExpansionContext`1.UniqueValues">
            <summary>
            Returns a new instance of this context type with duplicate values removed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.ExpansionContext`1.Clone">
            <summary>
            Returns a new instance of this context type with the same values.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.ExpansionContext`1.AssertValidItem(`0)">
            <summary>
            Ensures an item is valid before it is added to the list.
            Delegated to by the IList methods that add a value to the list.
            The item to add is returned. If null is returned nothing will be added.
            </summary>
            <param name="item">The item to check.</param>
        </member>
        <member name="M:MFiles.VAF.Placeholders.ExpansionContext`1.SafeCast``1">
            <summary>
            Casts the context to an enumerable list of type T safely.
            If the cast is not valid, null is returned.
            </summary>
            <typeparam name="T2">The type to cast each context value to.</typeparam>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.ExpansionContext`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.ExpansionContext`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item at the specified index.
            Ignores null values.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item</param>
        </member>
        <member name="M:MFiles.VAF.Placeholders.ExpansionContext`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:MFiles.VAF.Placeholders.ExpansionContext`1.Add(`0)">
            <summary>
             Adds an item to the list. Ignores null values.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:MFiles.VAF.Placeholders.ExpansionContext`1.Clear">
            <summary>
            Removes all items from the list.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.ExpansionContext`1.Contains(`0)">
            <summary>
            Determines whether the item is present in the list.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.ExpansionContext`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the list to an Array, starting at a particular Array index.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">The array index.</param>
        </member>
        <member name="M:MFiles.VAF.Placeholders.ExpansionContext`1.Remove(`0)">
            <summary>
            Removes an item from the list.
            </summary>
            <param name="item">The item to remove.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.ExpansionContext`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through each item of the list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.ExpansionContext`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through each item of the list.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.ExpansionContext`1.Type">
            <summary>
            The type of item this list contains.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.ExpansionContext`1.ContextType">
            <summary>
            The type of value this context contains.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.ExpansionContext`1.Text">
            <summary>
            A string representation of the values contained.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.ExpansionContext`1.List">
            <summary>
            Internal list.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.ExpansionContext`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index.
            Ignores null values.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.ExpansionContext`1.Count">
            <summary>
            Gets the number of elements contained in the list.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.ExpansionContext`1.IsReadOnly">
            <summary>
            Indicates if the list can be modified, or is readonly.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.ExpansionContext">
            <summary>
            Static helper methods for expansion contexts.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Placeholders.ExpansionContext.None">
            <summary>
            An instance of NoContext.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.ExpansionContext.GetExpansionTypeForDataType(MFilesAPI.MFDataType)">
            <summary>
            Gets the best expansion type corresponding to the datatype.
            </summary>
            <remarks>
            If the vault and a propertyDef are available, it is usually better to use the
            GetExpansionTypeForPropertyDef() method, as it will separate objects from
            valuelistitems.
            </remarks>
            <param name="dataType">The datatype.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.ExpansionContext.GetExpansionTypeForPropertyDef(MFilesAPI.Vault,MFilesAPI.PropertyDef)">
            <summary>
            Gets the best expansion type corresponding to a PropertyDef's datatype and valuelist.
            </summary>
            <param name="vault">The vault in which the propertydef is defined.</param>
            <param name="propDef">The property def.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.ExpansionContext.Factory(MFiles.VAF.Placeholders.ExpansionContextType)">
            <summary>
            Creates an instance of the default Expansion Context for the Expansion context type. 
            </summary>
            <param name="expansionType"></param>
            <returns></returns>
        </member>
        <member name="T:MFiles.VAF.Placeholders.ObjectContext">
            <summary>
            A list of objects as the input or output of placeholder level expansion.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.ObjectContext.UniqueValues">
            <summary>
            Returns a new instance of this context type with duplicate values removed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.ObjectContext.Clone">
            <summary>
            Returns a new instance of this context type with the same values.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.ObjectContext.AddFromTypedValue(MFilesAPI.Vault,MFilesAPI.TypedValue)">
            <summary>
            Adds objects to the context based on a typedValue.
            Null values are ignored (nothing added to the context).
            </summary>
            <param name="vault">The vault where the objects are from.</param>
            <param name="typedValue">The typedValue that contains references to the objects to add.</param>
        </member>
        <member name="M:MFiles.VAF.Placeholders.ObjectContext.AddFromLookup(MFilesAPI.Vault,MFilesAPI.Lookup)">
            <summary>
            Converts a lookup to an ObjVerEx and adds it to the context.
            Null values are ignored (nothing added to the context).
            </summary>
            <param name="vault">The vault where the lookup is from.</param>
            <param name="lookup">The lookup whose object should be added to the context.</param>
        </member>
        <member name="M:MFiles.VAF.Placeholders.ObjectContext.SafeCast``1">
            <summary>
            Casts the context to an enumerable list of type T safely.
            If the cast is not valid, null is returned.
            </summary>
            <typeparam name="T2">The type to cast each context value to.</typeparam>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.ObjectContext.op_Explicit(MFiles.VAF.Placeholders.ObjectContext)~System.Collections.Generic.List{MFilesAPI.Lookup}">
            <summary>
            Explicit cast to a list of lookups.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.ObjectContext.op_Explicit(MFiles.VAF.Placeholders.ObjectContext)~System.Collections.Generic.List{MFilesAPI.TypedValue}">
            <summary>
            Explicit cast to a list of TypedValues.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.ObjectContext.ContextType">
            <summary>
            The type of value this context contains.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.ObjectContext.Text">
            <summary>
            A string representation of the values contained.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.TypedValueContext">
            <summary>
            A list of typedvalues as the input or output of placeholder level expansion.
            All values have the same datatype.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.TypedValueContext.AssertValidItem(MFilesAPI.TypedValue)">
            <summary>
            Ensures an item is valid before it is added to the list.
            Delegated to by the IList methods that add a value to the list.
            </summary>
            <param name="item">The item to check.</param>
        </member>
        <member name="P:MFiles.VAF.Placeholders.TypedValueContext.DataType">
            <summary>
            The datatype of the values in this context.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.TypedValueContext.Text">
            <summary>
            A string representation of the values contained.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.TextContext">
            <summary>
            A list of strings as the input or output of placeholder level expansion.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.TextContext.UniqueValues">
            <summary>
            Returns a new instance of this context type with duplicate values removed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.TextContext.Clone">
            <summary>
            Returns a new instance of this context type with the same values.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.TextContext.Add(MFilesAPI.TypedValue)">
            <summary>
            Adds a TypedValue to the context.
            </summary>
            <remarks>
            Item cannot be null, nor can the typedvalue point to a null value.
            The datatype must be either Text or MultilineText
            </remarks>
            <param name="item"></param>
        </member>
        <member name="M:MFiles.VAF.Placeholders.TextContext.Add(System.String)">
            <summary>
            Adds a raw value to the context (wraps it in a typedValue).
            </summary>
            <param name="value">The value to wrap and add.</param>
        </member>
        <member name="M:MFiles.VAF.Placeholders.TextContext.SafeCast``1">
            <summary>
            Casts the context to an enumerable list of type T safely.
            If the cast is not valid, null is returned.
            </summary>
            <typeparam name="T2">The type to cast each context value to.</typeparam>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.TextContext.op_Explicit(MFiles.VAF.Placeholders.TextContext)~System.Collections.Generic.List{System.String}">
            <summary>
            Explicit cast to a list of strings.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.TextContext.DataType">
            <summary>
            The datatype of the values in this context.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.TextContext.ContextType">
            <summary>
            The type of value this context contains.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.NoContext">
            <summary>
            A list of integers as the input or output of placeholder level expansion.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Placeholders.NoContext.Instance">
            <summary>
            Single instance of this type.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.NoContext.#ctor">
            <summary>
            Private Constructor. access single instance via Instance property.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.NoContext.UniqueValues">
            <summary>
            Returns a new instance of this context type with duplicate values removed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.NoContext.Clone">
            <summary>
            Returns a new instance of this context type with the same values.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.NoContext.AssertValidItem(MFilesAPI.TypedValue)">
            <summary>
            Ensures an item is valid before it is added to the list.
            Delegated to by the IList methods that add a value to the list.
            </summary>
            <param name="item">The item to check.</param>
        </member>
        <member name="P:MFiles.VAF.Placeholders.NoContext.DataType">
            <summary>
            The datatype of the values in this context.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.NoContext.ContextType">
            <summary>
            The type of value this context contains.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.NoContext.IsReadOnly">
            <summary>
            Indicates whether the list is read-only.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.LocalizableTypedValueContext">
            <summary>
            Localizable typed value context. Allows setting a localized string value.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.LocalizableTypedValueContext.SetLocalizedText(System.String)">
            <summary>
            Sets the localized text for this context.
            </summary>
            <param name="localizedText">Localized version of the text.</param>
        </member>
        <member name="P:MFiles.VAF.Placeholders.LocalizableTypedValueContext.LocalizedText">
            <summary>
            Localized text value for this context.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.LocalizableTypedValueContext.Text">
            <summary>
            A string representation of the values contained.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.IntegerContext">
            <summary>
            A list of integers as the input or output of placeholder level expansion.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.IntegerContext.UniqueValues">
            <summary>
            Returns a new instance of this context type with duplicate values removed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.IntegerContext.Clone">
            <summary>
            Returns a new instance of this context type with the same values.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.IntegerContext.Add(System.Int32)">
            <summary>
            Adds a raw value to the context (wraps it in a typedValue).
            </summary>
            <param name="value">The value to wrap and add.</param>
        </member>
        <member name="M:MFiles.VAF.Placeholders.IntegerContext.Add(System.Int32,System.String)">
            <summary>
            Adds a raw value to the context (wraps it in a typedValue) as well as storing the localized value..
            </summary>
            <param name="value">The value to wrap and add.</param>
            <param name="localizedText">Localized string representation</param>
        </member>
        <member name="M:MFiles.VAF.Placeholders.IntegerContext.SafeCast``1">
            <summary>
            Casts the context to an enumerable list of type T safely.
            If the cast is not valid, null is returned.
            </summary>
            <typeparam name="T2">The type to cast each context value to.</typeparam>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.IntegerContext.op_Explicit(MFiles.VAF.Placeholders.IntegerContext)~System.Collections.Generic.List{System.Int32}">
            <summary>
            Explicit cast to a list of integers.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.IntegerContext.DataType">
            <summary>
            The datatype of the values in this context.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.IntegerContext.ContextType">
            <summary>
            The type of value this context contains.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.FloatContext">
            <summary>
            A list of floating point numbers as the input or output of placeholder level expansion.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.FloatContext.UniqueValues">
            <summary>
            Returns a new instance of this context type with duplicate values removed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.FloatContext.Clone">
            <summary>
            Returns a new instance of this context type with the same values.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.FloatContext.Add(System.Double)">
            <summary>
            Adds a raw value to the context (wraps it in a typedValue).
            </summary>
            <param name="value">The value to wrap and add.</param>
        </member>
        <member name="M:MFiles.VAF.Placeholders.FloatContext.Add(System.Double,System.String)">
            <summary>
            Adds a raw value to the context (wraps it in a typedValue) as well as storing the localized value.
            </summary>
            <param name="value">The value to wrap and add.</param>
            <param name="localizedText">Localized string representation</param>
        </member>
        <member name="M:MFiles.VAF.Placeholders.FloatContext.SafeCast``1">
            <summary>
            Casts the context to an enumerable list of type T safely.
            If the cast is not valid, null is returned.
            </summary>
            <typeparam name="T2">The type to cast each context value to.</typeparam>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.FloatContext.op_Explicit(MFiles.VAF.Placeholders.FloatContext)~System.Collections.Generic.List{System.Double}">
            <summary>
            Explicit cast to a list of doubles.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.FloatContext.DataType">
            <summary>
            The datatype of the values in this context.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.FloatContext.ContextType">
            <summary>
            The type of value this context contains.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.BooleanContext">
            <summary>
            A list of booleans as the input or output of placeholder level expansion.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.BooleanContext.UniqueValues">
            <summary>
            Returns a new instance of this context type with duplicate values removed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.BooleanContext.Clone">
            <summary>
            Returns a new instance of this context type with the same values.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.BooleanContext.Add(System.Boolean)">
            <summary>
            Adds a raw value to the context (wraps it in a typedValue).
            </summary>
            <param name="value">The value to wrap and add.</param>
        </member>
        <member name="M:MFiles.VAF.Placeholders.BooleanContext.SafeCast``1">
            <summary>
            Casts the context to an enumerable list of type T safely.
            If the cast is not valid, null is returned.
            </summary>
            <typeparam name="T2">The type to cast each context value to.</typeparam>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.BooleanContext.op_Explicit(MFiles.VAF.Placeholders.BooleanContext)~System.Collections.Generic.List{System.Boolean}">
            <summary>
            Explicit cast to a list of booleans.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.BooleanContext.DataType">
            <summary>
            The datatype of the values in this context.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.BooleanContext.ContextType">
            <summary>
            The type of value this context contains.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.TimestampContext">
            <summary>
            A list of timestamps as the input or output of placeholder level expansion.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.TimestampContext.UniqueValues">
            <summary>
            Returns a new instance of this context type with duplicate values removed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.TimestampContext.Clone">
            <summary>
            Returns a new instance of this context type with the same values.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.TimestampContext.Add(System.DateTime)">
            <summary>
            Adds a raw value to the context (wraps it in a typedValue).
            </summary>
            <param name="value">The value to wrap and add.</param>
        </member>
        <member name="M:MFiles.VAF.Placeholders.TimestampContext.SafeCast``1">
            <summary>
            Casts the context to an enumerable list of type T safely.
            If the cast is not valid, null is returned.
            </summary>
            <typeparam name="T2">The type to cast each context value to.</typeparam>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.TimestampContext.op_Explicit(MFiles.VAF.Placeholders.TimestampContext)~System.Collections.Generic.List{System.DateTime}">
            <summary>
            Explicit cast to a list of DateTimes.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.TimestampContext.DataType">
            <summary>
            The datatype of the values in this context.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.TimestampContext.ContextType">
            <summary>
            The type of value this context contains.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.DateContext">
            <summary>
            A list of dates as the input or output of placeholder level expansion.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.DateContext.UniqueValues">
            <summary>
            Returns a new instance of this context type with duplicate values removed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.DateContext.Clone">
            <summary>
            Returns a new instance of this context type with the same values.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.DateContext.Add(System.DateTime)">
            <summary>
            Adds a raw value to the context (wraps it in a typedValue).
            </summary>
            <param name="value">The value to wrap and add.</param>
        </member>
        <member name="M:MFiles.VAF.Placeholders.DateContext.SafeCast``1">
            <summary>
            Casts the context to an enumerable list of type T safely.
            If the cast is not valid, null is returned.
            </summary>
            <typeparam name="T2">The type to cast each context value to.</typeparam>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.DateContext.op_Explicit(MFiles.VAF.Placeholders.DateContext)~System.Collections.Generic.List{System.DateTime}">
            <summary>
            Explicit cast to a list of DateTimes.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.DateContext.DataType">
            <summary>
            The datatype of the values in this context.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.DateContext.ContextType">
            <summary>
            The type of value this context contains.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.TimeContext">
            <summary>
            A list of times as the input or output of placeholder level expansion.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.TimeContext.UniqueValues">
            <summary>
            Returns a new instance of this context type with duplicate values removed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.TimeContext.Clone">
            <summary>
            Returns a new instance of this context type with the same values.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.TimeContext.Add(System.DateTime)">
            <summary>
            Adds a raw value to the context (wraps it in a typedValue).
            </summary>
            <param name="value">The value to wrap and add.</param>
        </member>
        <member name="M:MFiles.VAF.Placeholders.TimeContext.SafeCast``1">
            <summary>
            Casts the context to an enumerable list of type T safely.
            If the cast is not valid, null is returned.
            </summary>
            <typeparam name="T2">The type to cast each context value to.</typeparam>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.TimeContext.op_Explicit(MFiles.VAF.Placeholders.TimeContext)~System.Collections.Generic.List{System.DateTime}">
            <summary>
            Explicit cast to a list of DateTimes.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.TimeContext.DataType">
            <summary>
            The datatype of the values in this context.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.TimeContext.ContextType">
            <summary>
            The type of value this context contains.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.ValueListItemContext">
            <summary>
            A list of value list items as the input or output of placeholder level expansion.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.ValueListItemContext.UniqueValues">
            <summary>
            Returns a new instance of this context type with duplicate values removed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.ValueListItemContext.Clone">
            <summary>
            Returns a new instance of this context type with the same values.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.ValueListItemContext.Add(MFilesAPI.TypedValue)">
            <summary>
            Adds a TypedValue to the context.
            </summary>
            <remarks>
            Null items are discarded.
            The datatype must be either Lookup or Multiselect lookup.
            Multiselect lookups are converted to individual typedvalues of type lookup.
            </remarks>
            <param name="item"></param>
        </member>
        <member name="M:MFiles.VAF.Placeholders.ValueListItemContext.Add(System.Int32)">
            <summary>
            Adds a raw value to the context (wraps it in a typedValue).
            </summary>
            <param name="value">The value to wrap and add.</param>
        </member>
        <member name="M:MFiles.VAF.Placeholders.ValueListItemContext.SafeCast``1">
            <summary>
            Casts the context to an enumerable list of type T safely.
            If the cast is not valid, null is returned.
            </summary>
            <typeparam name="T2">The type to cast each context value to.</typeparam>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.ValueListItemContext.op_Explicit(MFiles.VAF.Placeholders.ValueListItemContext)~System.Collections.Generic.List{MFilesAPI.Lookup}">
            <summary>
            Explicit cast to a list of Lookups.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.ValueListItemContext.DataType">
            <summary>
            The datatype of the values in this context.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.ValueListItemContext.ContextType">
            <summary>
            The type of value this context contains.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.ExtendedValueListItemContext">
            <summary>
            Represents the value list item context of values from a specific built in value list.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.ExtendedValueListItemContext.ValueList">
            <summary>
            The built in value list this context extends the items of.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.UserAccountContext">
            <summary>
            A list of user accounts as the input or output of placeholder level expansion.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.UserAccountContext.ValueList">
            <summary>
            The built in value list this context extends the items of.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.UserAccountContext.ContextType">
            <summary>
            The type of value this context contains.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.UserGroupContext">
            <summary>
            A list of user accounts as the input or output of placeholder level expansion.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.UserGroupContext.ValueList">
            <summary>
            The built in value list this context extends the items of.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.UserGroupContext.ContextType">
            <summary>
            The type of value this context contains.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.FileContext">
            <summary>
            A list of value list items as the input or output of placeholder level expansion.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.FileContext.UniqueValues">
            <summary>
            Returns a new instance of this context type with duplicate values removed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.FileContext.Clone">
            <summary>
            Returns a new instance of this context type with the same values.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.FileContext.ContextType">
            <summary>
            The type of value this context contains.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.FileContext.Text">
            <summary>
            A string representation of the values contained.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.PropertyValueContext">
            <summary>
            A list of value list items as the input or output of placeholder level expansion.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.PropertyValueContext.UniqueValues">
            <summary>
            Returns a new instance of this context type with duplicate values removed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.PropertyValueContext.Clone">
            <summary>
            Returns a new instance of this context type with the same values.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.PropertyValueContext.ContextType">
            <summary>
            The type of value this context contains.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.PropertyValueContext.Text">
            <summary>
            A string representation of the values contained.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.PlaceholderLevelType">
            <summary>
            Placeholder level format types.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Placeholders.PlaceholderLevelType.Undefined">
            <summary>
            Undefined.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Placeholders.PlaceholderLevelType.Simple">
            <summary>
            A placeholder level as a simple command.
            Examples: OBJID, MFILESURL
            </summary>
        </member>
        <member name="F:MFiles.VAF.Placeholders.PlaceholderLevelType.ComplexDigit">
            <summary>
            A placeholder level with a numeric parameter.
            Examples: PROPERTY_1234, OBJTYPE_123
            </summary>
        </member>
        <member name="F:MFiles.VAF.Placeholders.PlaceholderLevelType.ComplexCurly">
            <summary>
            A placeholder level with a alpha-numeric parameter between curly braces.
            Examples: PROPERTY_{My.Property.Alias}, OBJTYPE_{00000000-0000-0000-0000-000000000000}
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.PlaceholderLevel">
            <summary>
            Represents a single level within a placeholder.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.PlaceholderTemplateElement">
            <summary>
            Base class for all PlaceholderTemplateNodes besides the root PlaceholderTemplate.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.PlaceholderTemplateNode">
            <summary>
            A node within a placeholder document.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Placeholders.PlaceholderTemplateNode.children">
            <summary>
            This node's child nodes.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.PlaceholderTemplateNode.AppendChild(MFiles.VAF.Placeholders.PlaceholderTemplateNode)">
            <summary>
            Appends a child node to this node's children.
            </summary>
            <param name="child">The child segment to append.</param>
        </member>
        <member name="M:MFiles.VAF.Placeholders.PlaceholderTemplateNode.Validate">
            <summary>
            Validates the node and it's child nodes returning all issues found throughout.
            Returns static parse based issues, not expansion issues.
            </summary>
            <returns>The validation findings.</returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.PlaceholderTemplateNode.Expand(MFiles.VAF.Placeholders.IExpansionContext,MFiles.VAF.Placeholders.ObjVerExReadCache)">
            <summary>
            Expands this node in the given context.
            </summary>
            <param name="context">The context values to expand.</param>
            <param name="cache">The object cache.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.PlaceholderTemplateNode.GetResolvedStructureReferences">
            <summary>
            Finds any resolved structure references in this node or it's children.
            </summary>
            <remarks>
            Unresolved references will appear as issues returned from the Valdiation method.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.PlaceholderTemplateNode.ChildIndex(MFiles.VAF.Placeholders.PlaceholderTemplateNode)">
            <summary>
            Used to determine a child's placement in the parent.
            </summary>
            <param name="child"></param>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.PlaceholderTemplateNode.Vault">
            <summary>
            The vault for which the placeholder document is defined/intended.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.PlaceholderTemplateNode.Type">
            <summary>
            The type of node this object represents.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.PlaceholderTemplateNode.Root">
            <summary>
            The placeholder template in which this node resides.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.PlaceholderTemplateNode.Parent">
            <summary>
            This node's parent node.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.PlaceholderTemplateNode.Children">
            <summary>
            This node's child nodes.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.PlaceholderTemplateNode.ChildCount">
            <summary>
            The number of child nodes this node has.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.PlaceholderTemplateNode.ValidChildTypes">
            <summary>
            The type of child nodes this node can contain.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.PlaceholderTemplateNode.IsLeaf">
            <summary>
            True if this node cannot contain children.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.PlaceholderTemplateNode.Text">
            <summary>
            The raw text representation of this node.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.PlaceholderTemplateNode.Settings">
            <summary>
            The settings which control how a placeholders are parsed and expanded.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Placeholders.PlaceholderTemplateElement.parent">
            <summary>
            The vault for which the placeholder document is defined/intended.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.PlaceholderTemplateElement.#ctor(MFiles.VAF.Placeholders.PlaceholderTemplateNode)">
            <summary>
            Constrcutor.
            </summary>
            <param name="parent">The parent node.</param>
        </member>
        <member name="P:MFiles.VAF.Placeholders.PlaceholderTemplateElement.Vault">
            <summary>
            The vault for which the placeholder document is defined/intended.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.PlaceholderTemplateElement.Root">
            <summary>
            The placeholder template in which this node resides.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.PlaceholderTemplateElement.Parent">
            <summary>
            This node's parent node.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.PlaceholderTemplateElement.Settings">
            <summary>
            The settings which control how a placeholders are parsed and expanded.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.PlaceholderLevel.#ctor(MFiles.VAF.Placeholders.Placeholder,MFiles.VAF.Placeholders.PlaceholderCommandHandler,MFiles.VAF.Placeholders.PlaceholderLevelType,System.String,System.String)">
            <summary>
             Constructor.
            </summary>
            <param name="placeholder">The placeholder in which the level is defined.</param>
            <param name="handler">The handler that can validate and expand this level.</param>
            <param name="levelType">The type of level defined.</param>
            <param name="command">The command string of this level.</param>
            <param name="param">The parameter of this level, if applicable.</param>
        </member>
        <member name="M:MFiles.VAF.Placeholders.PlaceholderLevel.Expand(MFiles.VAF.Placeholders.IExpansionContext,MFiles.VAF.Placeholders.ObjVerExReadCache)">
            <summary>
            Expands this node in the given context.
            </summary>
            <param name="context">The context values to expand. Cannot be null.</param>
            <param name="cache">The object cache. Cannot be null.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.PlaceholderLevel.Validate">
            <summary>
            Validates the node and it's child nodes returning all issues found throughout.
            Returns static parse based issues, not expansion issues.
            </summary>
            <returns>The validation findings.</returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.PlaceholderLevel.GetResolvedStructureReferences">
            <summary>
            Finds any resolved structure references in this node or it's children.
            </summary>
            <remarks>
            Unresolved references will appear as issues returned from the Valdiation method.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.PlaceholderLevel.IsValidExpansionContext(MFiles.VAF.Placeholders.IExpansionContext)">
            <summary>
            Determines if a context is valid input for expanding this level.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.PlaceholderLevel.Type">
            <summary>
            The type of node this object represents.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.PlaceholderLevel.Text">
            <summary>
            The text representation of the level.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.PlaceholderLevel.ValidChildTypes">
            <summary>
            The type of child nodes this node can contain.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.PlaceholderLevel.AcceptsContextTypes">
            <summary>
            The expansion context datatypes allowed.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.PlaceholderLevel.Placeholder">
            <summary>
            The placeholder in which this level resides.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.PlaceholderLevel.LevelType">
            <summary>
            The type of level this object represents.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.PlaceholderLevel.Command">
            <summary>
            The name of the level used in the placeholder.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.PlaceholderLevel.Parameter">
            <summary>
            The name of the level used in the placeholder.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.PlaceholderLevel.ContextType">
            <summary>
            The datatype this level emits during expansion.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.PlaceholderLevel.Handler">
            <summary>
            The handler that can validate and expand this level.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.PlaceholderNodeType">
            <summary>
            The types of nodes within a placeholder template.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Placeholders.PlaceholderNodeType.Undefined">
            <summary>
             Undefined.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Placeholders.PlaceholderNodeType.Root">
            <summary>
            The top-level template node.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Placeholders.PlaceholderNodeType.Block">
            <summary>
            A block node.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Placeholders.PlaceholderNodeType.Placeholder">
            <summary>
            A placeholder node.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Placeholders.PlaceholderNodeType.Level">
            <summary>
            A placeholder level node.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Placeholders.PlaceholderNodeType.Text">
            <summary>
            A static text node.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.PlaceholderTemplateParser">
            <summary>
            Parses placeholder templates (text with multiple placeholders in them).
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.PlaceholderTemplateParser.ParseTemplate(MFiles.VAF.Placeholders.PlaceholderTemplateNode,MFiles.VAF.Placeholders.CommandProviders,System.String)">
            <summary>
            Parses a placeholder template text into nodes.
            </summary>
            <param name="root"></param>
            <param name="cmdProviders"></param> 
            <param name="template"></param>		
        </member>
        <member name="M:MFiles.VAF.Placeholders.PlaceholderTemplateParser.ParsePlaceholder(System.String)">
            <summary>
            Splits a single placeholder into one or more command levels, and loads the correct command handlers.
            </summary>
            <param name="text"></param>
        </member>
        <member name="T:MFiles.VAF.Placeholders.LevelInfo">
            <summary>
            Parsed Placeholder level information.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Placeholders.LevelInfo.Type">
            <summary>
            The placeholder level type.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Placeholders.LevelInfo.Command">
            <summary>
            The command.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Placeholders.LevelInfo.Parameter">
            <summary>
            The command parameter (if applicable).
            </summary>
        </member>
        <member name="F:MFiles.VAF.Placeholders.LevelInfo.Handler">
            <summary>
            The command's handler (if resolved).
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.ExpansionIssueBehavior">
            <summary>
            Determines how the system reacts to issues encountered during expansion.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Placeholders.ExpansionIssueBehavior.None">
            <summary>
            No exceptions will be thrown during expansion.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Placeholders.ExpansionIssueBehavior.ThrowImmediateException">
            <summary>
            An exception will be thrown when an issue is encountered.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Placeholders.ExpansionIssueBehavior.ThrowMergedException">
            <summary>
            An exception will be thrown after expansion has completed
            with a merged list of the issues encountered.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.PlaceholderTemplateSettings">
            <summary>
            Settings to control how a placeholder template is parsed and expanded.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.PlaceholderTemplateSettings.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.PlaceholderTemplateSettings.CommandProviders">
            <summary>
            The Placeholder Levels available for expansion.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.PlaceholderTemplateSettings.UserSession">
            <summary>
            The current user session. If set, the placeholder expansion will be limited
            to vault elements and content visible to this user's session.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.PlaceholderTemplateSettings.HideMissingValues">
            <summary>
            Indicates whether placeholders should be left as they are if the object doesn't have a
            property referenced by a placeholder, instead of being replaced by an empty string.
            If set to false, format string can be passed to multiple objects.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.PlaceholderTemplateSettings.DefaultEncoder">
            <summary>
            Indicates which encoding should be used on expanded placeholder texts by default.
            If a placeholder already contains an encoder this will not be used on its values.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.PlaceholderTemplateSettings.UseNumericDigitGrouping">
            <summary>
            When true, number grouping separators  are applied to number values.
            - UseNumericDigitGrouping = False => "100000"
            - UseNumericDigitGrouping = True => "100,000"
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.ExpandedPlaceholderTemplate">
            <summary>
            Contains the expansion results of Placeholder Text Template for a specific context.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.ExpandedPlaceholderTemplate.#ctor(MFiles.VAF.Placeholders.PlaceholderTemplate,MFiles.VAF.Placeholders.IExpansionContext,System.Collections.Generic.List{MFiles.VAF.Placeholders.ExpandedPlaceholderTemplateNode},System.Collections.Generic.List{MFiles.VAF.Placeholders.PlaceholderExpansionIssue})">
            <summary>
            Constructor.
            </summary>
            <param name="source">The item that was expanded</param>
            <param name="context">The context of the expansion.</param>
            <param name="expandedChildNodes">Epanded child nodes.</param>
            <param name="issues">Issues expanding the source node (not it's children)</param>
        </member>
        <member name="P:MFiles.VAF.Placeholders.ExpandedPlaceholderTemplate.Text">
            <summary>
            The textual result of the expansion.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.PlaceholderIssueType">
            <summary>
            Defines the 
            </summary>
        </member>
        <member name="F:MFiles.VAF.Placeholders.PlaceholderIssueType.Undefined">
            <summary>
             Unknown type.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Placeholders.PlaceholderIssueType.Warning">
            <summary>
            There is an issue with the placeholder as defined, but
            expansion can occur, though it may expand to an empty context,
            the effect simply being that the placeholder is replaced by an empty string
            in the expanded text.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Placeholders.PlaceholderIssueType.Invalid">
            <summary>
            The placeholder is invalid. It will not be expanded and the placeholder text 
            will be visible in the expanded text.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.Placeholder">
            <summary>
            Represents a placeholder within a placeholder template.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Placeholder.#ctor(MFiles.VAF.Placeholders.PlaceholderTemplateNode)">
            <summary>
            Constructor.
            </summary>
            <param name="parent">The parent that contains this placeholder.</param>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Placeholder.Expand(MFiles.VAF.Placeholders.IExpansionContext,MFiles.VAF.Placeholders.ObjVerExReadCache)">
            <summary>
            Expands this node in the given context.
            </summary>
            <param name="context">The context values to expand. Cannot be null.</param>
            <param name="cache">The object cache. Cannot be null.</param>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Placeholder.Type">
            <summary>
            The type of node this object represents.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Placeholder.Text">
            <summary>
            The full text representation of the placeholder.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Placeholder.ValidChildTypes">
            <summary>
            The type of child nodes this node can contain.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Placeholder.Levels">
            <summary>
            The placeholder's children cast as levels.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Placeholder.AcceptsContextTypes">
            <summary>
            The expansion context the placeholder accepts.
            (The types accepted by the first level.)
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Placeholder.ContextType">
            <summary>
            The data type this placeholder emits during expansion.
            (The type emitted by the final level.)
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.PlaceholderTemplate">
            <summary>
            Represents text that may contain placeholders.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Placeholders.PlaceholderTemplate.vault">
            <summary>
            The vault for which the placeholder document is defined/intended.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.PlaceholderTemplate.#ctor(MFilesAPI.Vault,System.String,MFiles.VAF.Placeholders.PlaceholderTemplateSettings)">
            <summary>
            Constrcutor.
            </summary>
            <param name="vault">The vault for which the placeholder document is defined/intended.</param>
            <param name="template">The placeholder template text.</param>
            <param name="settings">The placeholder settings.</param>
        </member>
        <member name="M:MFiles.VAF.Placeholders.PlaceholderTemplate.Expand(MFiles.VAF.Common.ObjVerEx,MFiles.VAF.Placeholders.ObjVerExReadCache)">
            <summary>
            Expands this node in the given context.
            </summary>
            <param name="objVerEx">The context of the expansion.</param>
            <param name="cache"></param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.PlaceholderTemplate.Expand(MFiles.VAF.Placeholders.IExpansionContext,MFiles.VAF.Placeholders.ObjVerExReadCache)">
            <summary>
            Expands this node in the given context.
            </summary>
            <param name="context">The context values to expand. Cannot be null.</param>
            <param name="cache">The object cache. Cannot be null.</param>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.PlaceholderTemplate.Vault">
            <summary>
            The vault for which the placeholder document is defined/intended.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.PlaceholderTemplate.Type">
            <summary>
            The type of node this object represents.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.PlaceholderTemplate.Root">
            <summary>
            The placeholder template in which this node resides.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.PlaceholderTemplate.Parent">
            <summary>
            This node's parent node.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.PlaceholderTemplate.ValidChildTypes">
            <summary>
            The type of child nodes this node can contain.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.PlaceholderTemplate.Text">
            <summary>
            The raw text representation of this node.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.PlaceholderTemplate.Settings">
            <summary>
            The settings which control how a placeholder template is parsed and expanded.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.Block">
            <summary>
            Represents a block of placeholder template nodes between a
            Block opening placeholder and block closing placeholders.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Block.#ctor(MFiles.VAF.Placeholders.PlaceholderTemplateNode,MFiles.VAF.Placeholders.Placeholder)">
            <summary>
            Constructor.
            </summary>
            <param name="parent">The block's parent node.</param>
            <param name="blockStart">The opening placeholer of the block.</param>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Block.Close(MFiles.VAF.Placeholders.Placeholder)">
            <summary>
            Closes the block with the block ending placeholder.
            </summary>
            <param name="blockEnd"></param>
        </member>
        <member name="M:MFiles.VAF.Placeholders.Block.Expand(MFiles.VAF.Placeholders.IExpansionContext,MFiles.VAF.Placeholders.ObjVerExReadCache)">
            <summary>
            Expands this node in the given context.
            </summary>
            <param name="context">The context values to expand. Cannot be null.</param>
            <param name="cache">The object cache. Cannot be null.</param>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Block.Type">
            <summary>
            The type of node this object represents.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Block.Text">
            <summary>
            The raw text value.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Block.ValidChildTypes">
            <summary>
            The type of child nodes this node can contain.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Block.Start">
            <summary>
            The placeholder that opened the block.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.Block.End">
            <summary>
            The placeholder that closed the block.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.ExpandedText">
            <summary>
            Contains the expansion results of a static text for a specific context.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.ExpandedText.#ctor(MFiles.VAF.Placeholders.StaticPlaceholderText,MFiles.VAF.Placeholders.IExpansionContext)">
            <summary>
            Constructor.
            </summary>
            <param name="source">The item that was expanded</param>
            <param name="context">The context of the expansion.</param>
        </member>
        <member name="P:MFiles.VAF.Placeholders.ExpandedText.Text">
            <summary>
            The textual result of the expansion.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.PlaceholderValidator">
            <summary>
            Validates placeholder texts defined in module configurations.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.PlaceholderValidator.#ctor(MFilesAPI.Vault,MFiles.VAF.Configuration.IConfiguration,MFiles.VAF.Configuration.ValidationResultBase,MFiles.VAF.Placeholders.PlaceholderTemplateSettings)">
            <summary>
            Constructor.
            </summary>
            <param name="vault">The vault in which the configuration is being validated.</param>
            <param name="configuration">The configuration being validated.</param>
            <param name="results">The results where validation findings get reported.</param>
            <param name="settings">The placeholder settings to validate texts against.</param>
        </member>
        <member name="M:MFiles.VAF.Placeholders.PlaceholderValidator.ValidatePlaceholderTemplate(MFiles.VAF.Configuration.TranslatableContent,System.String,System.Boolean,System.Boolean)">
            <summary>
            Validates a string as a text that can contain muliple placeholders amongst static text.
            </summary>
            <param name="templateStr">The translatable placeholder template text.</param>
            <param name="itemName">The name of the item being validated.</param>
            <param name="required">Indicates whether an issue with this item is fatal (for the module.)</param>
            <param name="canBeEmpty">Indicates whether the item can be empty.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.PlaceholderValidator.ValidatePlaceholderTemplate(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Validates a string as a text that can contain muliple placeholders amongst static text.
            </summary>
            <param name="templateStr">The placeholder template text.</param>
            <param name="itemName">The name of the item being validated.</param>
            <param name="required">Indicates whether an issue with this item is fatal (for the module.)</param>
            <param name="canBeEmpty">Indicates whether the item can be empty.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.PlaceholderValidator.ValidatePlaceholder(MFiles.VAF.Configuration.TranslatableContent,System.String,System.Boolean,System.Boolean)">
            <summary>
            Validates a string as a single placeholder.
            </summary>
            <param name="placeholderStr">The placeholder text.</param>
            <param name="itemName">The name of the item being validated.</param>
            <param name="required">Indicates whether an issue with this item is fatal (for the module.)</param>
            <param name="canBeEmpty">Indicates whether the item can be empty.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.PlaceholderValidator.ValidatePlaceholder(System.String,System.String,System.Boolean,System.Boolean,MFiles.VAF.Placeholders.ExpansionContextType[],System.Int32[])">
            <summary>
            Validates a string as a single placeholder.
            </summary>
            <param name="placeholderStr">The placeholder text.</param>
            <param name="itemName">The name of the item being validated.</param>
            <param name="required">Indicates whether an issue with this item is fatal (for the module.)</param>
            <param name="canBeEmpty">Indicates whether the item can be empty.</param>
            <param name="validTypes">Valid expansion types for the placeholder to output.</param>
            <param name="validValueLists">Valid value list types to output if the context output is lookup or object.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.PlaceholderValidator.HandleEmpty(System.String,System.Boolean,System.Boolean)">
            <summary>
            Validates an empty value.
            </summary>
            <param name="itemName">The name of the item being validated.</param>
            <param name="required">Indicates whether an issue with this item is fatal (for the module.)</param>
            <param name="canBeEmpty">Indicates whether the item can be empty.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.PlaceholderValidator.Parse(System.String)">
            <summary>
            Parses a placeholder text with the current settings and vault.
            </summary>
            <param name="text">The text to parse.</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.PlaceholderValidator.PerformDefaultValidation(MFiles.VAF.Placeholders.PlaceholderTemplate,System.String,System.Boolean)">
            <summary>
            Performs default validation on a placeholder template.
            Reports all found structure items and issues.
            </summary>
            <param name="template">The parsed placeholder template.</param>
            <param name="itemName">The name of the item being validated.</param>
            <param name="required">Indicates whether an issue with this item is fatal (for the module.)</param>
            <returns></returns>
        </member>
        <member name="M:MFiles.VAF.Placeholders.PlaceholderValidator.ReportStructureItemFound(MFiles.VAF.Configuration.MFIdentifier,System.Boolean)">
            <summary>
            Reports a resolved metadata structure item referenced in a placeholder.
            </summary>
            <param name="item">The resolved item.</param>
            <param name="required">Whether it was required.</param>
        </member>
        <member name="P:MFiles.VAF.Placeholders.PlaceholderValidator.Vault">
            <summary>
            The vault in which the configuration is being validated.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.PlaceholderValidator.Configuration">
            <summary>
            The configuration being validated.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.PlaceholderValidator.Results">
            <summary>
            The results where validation findings get reported.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.PlaceholderValidator.Settings">
            <summary>
            The placeholder settings to validate texts against.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Placeholders.StaticPlaceholderText">
            <summary>
            Represents a static text node within a placeholder template node.
            </summary>
        </member>
        <member name="F:MFiles.VAF.Placeholders.StaticPlaceholderText.staticText">
            <summary>
            The static text.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Placeholders.StaticPlaceholderText.#ctor(MFiles.VAF.Placeholders.PlaceholderTemplateNode,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="parent"></param>
            <param name="staticText"></param>
        </member>
        <member name="M:MFiles.VAF.Placeholders.StaticPlaceholderText.Expand(MFiles.VAF.Placeholders.IExpansionContext,MFiles.VAF.Placeholders.ObjVerExReadCache)">
            <summary>
            Expands this node in the given context.
            </summary>
            <param name="context">The context values to expand. Cannot be null.</param>
            <param name="cache">The object cache. Cannot be null.</param>
            <returns></returns>
        </member>
        <member name="P:MFiles.VAF.Placeholders.StaticPlaceholderText.Type">
            <summary>
            The type of node this object represents.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.StaticPlaceholderText.ValidChildTypes">
            <summary>
            The type of child nodes this node can contain.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Placeholders.StaticPlaceholderText.Text">
            <summary>
            The raw text value.
            </summary>
        </member>
        <member name="T:MFiles.VAF.Resources.TextResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.AlreadyExists">
            <summary>
              Looks up a localized string similar to Already exists..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.AssemblyProbingException">
            <summary>
              Looks up a localized string similar to Exception while checking if the assembly &quot;{0}&quot; has &quot;IModule&quot; implementations..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.BackgroundOperationsPreventedOffline">
             <summary>
               Looks up a localized string similar to Background operations have prevented the vault from going offline for {0} seconds:
            .
             </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.BackgroundOperationsPreventedUninitialization">
             <summary>
               Looks up a localized string similar to Background operations prevented the uninitalization for a maximum of {0} seconds. These remaining background operations will be forcefully terminated:
            .
             </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.BothArgsNull">
            <summary>
              Looks up a localized string similar to Both arguments cannot be null..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.CannotBeNull">
            <summary>
              Looks up a localized string similar to Cannot be null..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.CannotConvertNull">
            <summary>
              Looks up a localized string similar to Cannot convert a null value to the type &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.ClassNotObjType">
            <summary>
              Looks up a localized string similar to The object type is not &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.ConfigHelpTextEnabled">
            <summary>
              Looks up a localized string similar to Indicates whether the module is used in this vault..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.ConfigurationIncomplete">
            <summary>
              Looks up a localized string similar to The configuration for the module &quot;{0}&quot; is incomplete..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.ConfigurationKeyDeprecated">
            <summary>
              Looks up a localized string similar to The configuration key is deprecated..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.ConfigurationKeyDeprecatedWithReplacement">
            <summary>
              Looks up a localized string similar to The configuration key is deprecated. Please use &quot;{0}&quot; instead..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.ConfigurationKeyDeprecatedWithReplacementUnambiguousValue">
            <summary>
              Looks up a localized string similar to The deprecated configuration key ({0}) and the configuration key replacing it ({1}) both have a value specified..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.ConfigurationLoadingFailed">
            <summary>
              Looks up a localized string similar to Loading failed for the configuration &quot;{0}.{1}&quot;..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.ConfigurationUnserializationFailed">
            <summary>
              Looks up a localized string similar to The unserialization of the configuration &quot;{0}&quot; failed..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.ContextIsRequiredButEmpty">
            <summary>
              Looks up a localized string similar to The placeholder &quot;{0}&quot; is required, but it expanded to an empty value..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.CustomFailureItemTypeKey">
            <summary>
              Looks up a localized string similar to Key.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.CustomFailureTypeKey">
            <summary>
              Looks up a localized string similar to Key.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.DataFunctionLeftCharsNotSupported">
            <summary>
              Looks up a localized string similar to The &quot;LeftChars&quot; data function is not supported in search conditions..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.EmptyValue">
            <summary>
              Looks up a localized string similar to Empty reference value in the &quot;{0}&quot; key..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.EmptyValueFor">
            <summary>
              Looks up a localized string similar to Empty reference value for &quot;{0}&quot; in &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.ErrorConvertingValue">
             <summary>
               Looks up a localized string similar to Error converting value {0} to type &quot;{1}&quot;.
              
            {2}.
             </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.ErrorEmptyTranslationsNotAllowed">
            <summary>
              Looks up a localized string similar to The translation must contain at least one character..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.ErrorExactlyOneDefaultTranslationRequired">
            <summary>
              Looks up a localized string similar to Exactly one default translation must be defined..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.ErrorLanguageNotDefinedForNonDefaultTranslation">
            <summary>
              Looks up a localized string similar to A language must be defined for non-default translations..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.ErrorOnlyOneTranslationPerLanguageAllowed">
            <summary>
              Looks up a localized string similar to Only one translation per language must be defined..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.ErrorRealObjTypesNotAllowed">
            <summary>
              Looks up a localized string similar to Object types are not allowed..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.ExceptionDeprecatedMemberReplacementMemberDeprecatedToo">
            <summary>
              Looks up a localized string similar to The key &quot;{0}&quot; and its replacement key, &quot;{1}&quot;, are both deprecated..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.ExceptionDeprecatedMemberReplacementMemberNotFoundOrUnambiguous">
            <summary>
              Looks up a localized string similar to The key &quot;{0}&quot; is deprecated, and the replacement key, &quot;{1}&quot;, is either not found or not unambiguous..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.ExceptionDeprecatedMemberReplacementMemberNotGood">
            <summary>
              Looks up a localized string similar to The key &quot;{0}&quot; is deprecated, and the replacement key, &quot;{1}&quot;, is incompatible..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.IllegalNullValueSettings">
            <summary>
              Looks up a localized string similar to Null values must be set with the &quot;IsNull&quot; property..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.InputStringParsingFailed">
             <summary>
               Looks up a localized string similar to Failed to parse the input string.
            
            {0}
            
                .
             </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.InterfaceMethodNotImplemented">
            <summary>
              Looks up a localized string similar to The interface method is not implemented..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.InvalidItemReference">
            <summary>
              Looks up a localized string similar to The item reference {0} is not valid..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.InvalidModuleConfiguration">
             <summary>
               Looks up a localized string similar to Operation is not allowed.
            
            The configuration &quot;{0}&quot; is invalid..
             </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.InvalidPropertyDefOrObjectType">
            <summary>
              Looks up a localized string similar to Either the &quot;PropertyDef&quot; or the &quot;ObjType&quot; property must be set. Both cannot be set at the same time..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.InvalidStringException">
            <summary>
              Looks up a localized string similar to The string is not valid..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.KeyMissingFromNamedValueStorage">
            <summary>
              Looks up a localized string similar to The given key is missing in the named value storage: &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.LicenseDecodingFailed">
            <summary>
              Looks up a localized string similar to License decoding failed..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.LicenseExpireNever">
            <summary>
              Looks up a localized string similar to Never.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.LicenseFormatError">
            <summary>
              Looks up a localized string similar to License is incorrect. The file is either not a license or it is corrupt or falsified..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.LicenseHasExpired">
            <summary>
              Looks up a localized string similar to The license is expired..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.LicenseIncorrectApplication">
            <summary>
              Looks up a localized string similar to The license is not for this application..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.LicenseIncorrectServerSerial">
            <summary>
              Looks up a localized string similar to License requires a different server license..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.LicenseInGracePeriod">
            <summary>
              Looks up a localized string similar to The license is in grace period. Renew the license as soon as possible..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.LicenseIsRequiredButMissing">
            <summary>
              Looks up a localized string similar to License is required but not installed..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.LicenseLicensedTo">
            <summary>
              Looks up a localized string similar to Licensed to.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.LicenseLicenseExpires">
            <summary>
              Looks up a localized string similar to License expires.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.LicenseMaintenanceExpires">
            <summary>
              Looks up a localized string similar to Maintenance subscription expires.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.LicenseMaintenanceHasExpired">
            <summary>
              Looks up a localized string similar to The maintenance subscription does not cover this version..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.LicenseNoLicenseNeeded">
            <summary>
              Looks up a localized string similar to Application does not need a license..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.LicenseNotAllowedInThisServerVersion">
            <summary>
              Looks up a localized string similar to The license is not valid for this server version..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.LicenseNotAllowedInThisVault">
            <summary>
              Looks up a localized string similar to The license is not valid for this vault..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.LicenseNumberConcurrent">
            <summary>
              Looks up a localized string similar to Maximum number of concurrent user licenses.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.LicenseNumberNamedUsers">
            <summary>
              Looks up a localized string similar to Maximum number of named user licenses.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.LicenseNumberReadOnly">
            <summary>
              Looks up a localized string similar to Maximum number of read-only licenses.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.LicenseRestrictedToVaults">
            <summary>
              Looks up a localized string similar to Valid for {0} identified vault(s)..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.LicenseSerialNumber">
            <summary>
              Looks up a localized string similar to Serial number.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.LicenseServerSerial">
            <summary>
              Looks up a localized string similar to Required server serial number.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.LicenseTooManyConcurrentUsers">
            <summary>
              Looks up a localized string similar to Too many concurrent user licenses on the server..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.LicenseTooManyNamedUsers">
            <summary>
              Looks up a localized string similar to Too many named user licenses on the server..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.LicenseTooManyReadOnlyUsers">
            <summary>
              Looks up a localized string similar to Too many read-only licenses on the server..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.LicenseUserGroupTooManyMembers">
            <summary>
              Looks up a localized string similar to The user group \&quot;{0}\&quot; has over {1} members..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.LoaderException">
            <summary>
              Looks up a localized string similar to Loader Exceptions:.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.LookupNotInitializedException">
            <summary>
              Looks up a localized string similar to The value list item &quot;{0}&quot; is not initialized..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.MFIdentifierExceptionIsNotValidGuid">
            <summary>
              Looks up a localized string similar to &quot;{0}&quot; is not valid GUID..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.MFIdentifierExceptionMultipleInstances">
            <summary>
              Looks up a localized string similar to Multiple instances of type &quot;{0}&quot; were found with alias &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.MFIdentifierExceptionNotFoundAlias">
            <summary>
              Looks up a localized string similar to Vault element with the alias &quot;{0}&quot; is not found..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.MFIdentifierExceptionNotFoundAliasWithType">
            <summary>
              Looks up a localized string similar to Vault element of type &quot;{1}&quot; with the alias &quot;{0}&quot; is not found..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.MFIdentifierExceptionNotFoundGuid">
            <summary>
              Looks up a localized string similar to Vault element with the GUID &quot;{0}&quot; is not found..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.MFIdentifierExceptionNotFoundGuidWithType">
            <summary>
              Looks up a localized string similar to Vault element of type &quot;{1}&quot; with the GUID &quot;{0}&quot; is not found..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.MFIdentifierExceptionNotFoundID">
            <summary>
              Looks up a localized string similar to Vault element with the ID &quot;{0}&quot; is not found..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.MFIdentifierExceptionNotFoundIDWithType">
            <summary>
              Looks up a localized string similar to Vault element of type &quot;{1}&quot; with the ID &quot;{0}&quot; is not found..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.MFIdentifierExceptionValueListNotSet">
            <summary>
              Looks up a localized string similar to The value list cannot be resolved..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.MissingPropertyException">
            <summary>
              Looks up a localized string similar to No &quot;{0}&quot; property for &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.MissingValueFor">
            <summary>
              Looks up a localized string similar to The value of the &quot;{0}&quot; key is null or empty..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.MissingValueForIn">
            <summary>
              Looks up a localized string similar to The value of the &quot;{0}&quot; key in the &quot;{1}&quot; element is null or empty..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.MissingValueType">
            <summary>
              Looks up a localized string similar to Configuration.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.ModuleConfigurationLoadingFailedException">
            <summary>
              Looks up a localized string similar to Exception when loading the configuration of the module &quot;{0}&quot; from the assembly &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.ModuleLoadingException">
            <summary>
              Looks up a localized string similar to Exception while loading modules from assemblies..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.ModulesLoadedByVAFMessage">
            <summary>
              Looks up a localized string similar to Vault Application Framework loaded {0} module(s):.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.ModuleStartupFailed">
             <summary>
               Looks up a localized string similar to The following modules did not start properly:
            {0}..
             </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.MultipleInstancesOfAssemblyFoundFromFolderException">
            <summary>
              Looks up a localized string similar to Multiple instances of the same assembly found from folder: {0}. Assembly: {1}..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.NoReference">
            <summary>
              Looks up a localized string similar to No reference has been set..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.NotFoundException">
            <summary>
              Looks up a localized string similar to Not found..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.NoWorkflowStatesException">
            <summary>
              Looks up a localized string similar to The workflow &quot;{1}&quot; ({0}) has no states..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.NullValue">
            <summary>
              Looks up a localized string similar to Null value.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.NullValueInStructureIdentifierList">
            <summary>
              Looks up a localized string similar to Null or other incorrect value in a collection..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.ObjectNotCheckedOut">
            <summary>
              Looks up a localized string similar to The object is not checked out..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.ObjectNotInWorkflow">
            <summary>
              Looks up a localized string similar to The object does not have a workflow..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.ObjectTypeMemberMissingException">
            <summary>
              Looks up a localized string similar to No &quot;{0}&quot; property for &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.ObjectUrlListHtml">
            <summary>
              Looks up a localized string similar to {0} ({1}).
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.ObjectUrlListPlain">
             <summary>
               Looks up a localized string similar to {0}
            {1}.
             </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.ParseErrorException">
            <summary>
              Looks up a localized string similar to The {0} string &quot;{1}&quot; is not valid..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.PlaceholderExpansionIssueInvalidContextType">
            <summary>
              Looks up a localized string similar to The level &quot;{0}&quot; cannot expand the contexts of the type &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.PlaceholderFormatDescriptionComplexCurly">
            <summary>
              Looks up a localized string similar to   - The command followed by an underscore and a parameter in curly braces: {0}_{{&lt;param&gt;}}.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.PlaceholderFormatDescriptionComplexDigit">
            <summary>
              Looks up a localized string similar to   - The command followed by an underscore and a number: {0}_&lt;number&gt;.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.PlaceholderFormatDescriptionSimple">
            <summary>
              Looks up a localized string similar to   - The command without anything added: {0}.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.PlaceholderInvalidDatatype">
            <summary>
              Looks up a localized string similar to The placeholder does not output the correct data type. Current: {0}, accepted:{1}.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.PlaceholderInvalidValueListReference">
            <summary>
              Looks up a localized string similar to The placeholder does not point to the correct value list or object type. Current: {0}, accepted:{1}.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.PlaceholderIssueClassNotFound">
            <summary>
              Looks up a localized string similar to The class reference &quot;{0}&quot; could not be resolved..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.PlaceholderIssueInvalidCommandType">
             <summary>
               Looks up a localized string similar to The &quot;{0}&quot; command is not specified correctly.
            
            Current command: {1}
            
            Supported formats:
            {2}.
             </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.PlaceholderIssueObjTypeNotFound">
            <summary>
              Looks up a localized string similar to The object type reference &quot;{0}&quot; could not be resolved..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.PlaceholderIssuePropertyNotFound">
            <summary>
              Looks up a localized string similar to The property definition reference &quot;{0}&quot; could not be resolved..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.PlaceholderIssueStateNotFound">
            <summary>
              Looks up a localized string similar to The state reference &quot;{0}&quot; could not be resolved..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.PlaceholderIssueUnrecognizedCommand">
            <summary>
              Looks up a localized string similar to Unrecognized command: {0}.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.PlaceholderIssueValueListsNotSupported">
            <summary>
              Looks up a localized string similar to Only real object types are supported, value lists cannot be used..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.PlaceholderLevelCannotBeIndirectError">
            <summary>
              Looks up a localized string similar to The command can only be used at the start of a placeholder..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.PlaceholderLevelIncompatibleContextError">
            <summary>
              Looks up a localized string similar to The command cannot be used in the current context. Its input type is not compatible..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.PlaceholderLevelsIncompatibleError">
            <summary>
              Looks up a localized string similar to The command cannot follow &quot;{0}&quot;. The output and input types are incompatible..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.PlaceholderMissingError">
            <summary>
              Looks up a localized string similar to Must be specified..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.PlaceholderMoreThanOneError">
            <summary>
              Looks up a localized string similar to Only a single placeholder can be defined..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.PlatformNameDesktop">
            <summary>
              Looks up a localized string similar to Desktop.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.PlatformNameMobile">
            <summary>
              Looks up a localized string similar to Mobile.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.PlatformNameWeb">
            <summary>
              Looks up a localized string similar to Web.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.PlatformUrlFormat">
            <summary>
              Looks up a localized string similar to {0}: {1}.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.PlatformUrlListSeparatorHtml">
            <summary>
              Looks up a localized string similar to , .
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.PlatformUrlListSeparatorPlain">
             <summary>
               Looks up a localized string similar to 
            .
             </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.ProblemInBackgroundOperation">
            <summary>
              Looks up a localized string similar to Problem in running the background operation &quot;{0}&quot; in vault &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.ProblemInContinuingBackgroundOperation">
            <summary>
              Looks up a localized string similar to Problem in continuing the background operation &quot;{0}&quot; in vault &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.ProcessingMemberFailedException">
            <summary>
              Looks up a localized string similar to Unexpected error while processing the &quot;{0}&quot; key..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.PropDefAssociation">
            <summary>
              Looks up a localized string similar to Has the property &quot;{0}&quot; but the &quot;required&quot; setting is wrong. The property should {1} for the class..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.PropDefAssociationNeedClass">
            <summary>
              Looks up a localized string similar to Cannot resolve the property association &quot;{0}&quot; without a class..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.PropDefNoAssociation">
            <summary>
              Looks up a localized string similar to Does not contain the property &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.PropDefNotObjType">
            <summary>
              Looks up a localized string similar to Cannot be used with the object type &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.PropDefWrongType">
            <summary>
              Looks up a localized string similar to Does not represent the data type &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.PropDefWrongValuelist">
            <summary>
              Looks up a localized string similar to Does not use the value list &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.PropertyAutomaticNumberingScriptInstallationPrevented">
            <summary>
              Looks up a localized string similar to Unable to generate customized automatic numbering VBScript for the property &quot;{0} ({1})&quot;. Custom script exists..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.PropertyCustomValueScriptInstallationPrevented">
            <summary>
              Looks up a localized string similar to Unable to generate custom value VBScript for the property &quot;{0} ({1})&quot;. Custom script exists..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.PropertyDefOrObjectTypeRequired">
            <summary>
              Looks up a localized string similar to Either the &quot;PropertyDef&quot; or the &quot;ObjType&quot; property must be set..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.PropertyDefOrObjectTypeRestricted">
            <summary>
              Looks up a localized string similar to The &quot;ObjType&quot; and &quot;PropertyDef&quot; properties cannot be set at the same time..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.PropertyDoesNotExistException">
            <summary>
              Looks up a localized string similar to The property &quot;{0}&quot; does not exist in vault..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.PropertyHasWrongDatatypeException">
            <summary>
              Looks up a localized string similar to The property &quot;{0}&quot; has a wrong datatype..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.PropertyMustBeBasedOnRealObjectTypeException">
            <summary>
              Looks up a localized string similar to The property &quot;{0}&quot; must point to objects..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.PropertyRequiredAny">
            <summary>
              Looks up a localized string similar to Any.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.PropertyRequiredNo">
            <summary>
              Looks up a localized string similar to not be required.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.PropertyRequiredYes">
            <summary>
              Looks up a localized string similar to be required.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.PropertyValidationScriptInstallationPrevented">
            <summary>
              Looks up a localized string similar to Unable to generate validation VBScript for the property &quot;{0} ({1})&quot;. Custom script exists..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.RangeFailure">
            <summary>
              Looks up a localized string similar to The value is not between {0} and {1}..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.ReferenceNotResolved">
            <summary>
              Looks up a localized string similar to The reference to the following metadata structure element could not be resolved: {0}.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.ReferenceTreeValidationInvalidCast">
            <summary>
              Looks up a localized string similar to Invalid cast to {0}..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.ReferenceTreeValidationInvalidUsageofMslu">
            <summary>
              Looks up a localized string similar to Invalid usage of the multi-select property &quot;{0}&quot; for a single reference resolution..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.ReferenceTreeValidationMultiTreeString">
            <summary>
              Looks up a localized string similar to A multi-tree string was passed to a &quot;ReferenceTree&quot; object. Use the &quot;ReferenceTrees&quot; object instead..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.StartupMessage">
            <summary>
              Looks up a localized string similar to {0} started in vault: {1}. Process ID: {2}..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.StateFound">
            <summary>
              Looks up a localized string similar to Is in the workflow &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.StateMissing">
            <summary>
              Looks up a localized string similar to Is missing, required in the workflow &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.StateNotIn">
            <summary>
              Looks up a localized string similar to Is not in the workflow &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.StatePostconditionScriptInstallationPrevented">
            <summary>
              Looks up a localized string similar to Unable to generate postcondition VBScript for the state &quot;{0} ({1})&quot;. Custom script exists..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.StatePreconditionScriptInstallationPrevented">
            <summary>
              Looks up a localized string similar to Unable to generate precondition VBScript for the state &quot;{0} ({1})&quot;. Custom script exists..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.StateRunActionScriptInstallationPrevented">
            <summary>
              Looks up a localized string similar to Unable to generate run action VBScript for the state &quot;{0} ({1})&quot;. Custom script exists..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.StateTransitionTriggerScriptInstallationPrevented">
            <summary>
              Looks up a localized string similar to Unable to generate trigger VBScript for the state transition &quot;{0} ({1})&quot;. Custom script exists..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.ThrowNotImplementedExceptionNotImplemented">
            <summary>
              Looks up a localized string similar to The &quot;ThrowNotImplementedException&quot; method has not been implemented..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.TransitionFound">
            <summary>
              Looks up a localized string similar to Is in the workflow &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.TransitionFoundWithFrom">
            <summary>
              Looks up a localized string similar to Is in the workflow &quot;{0}&quot; and the initial state is &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.TransitionFoundWithFromTo">
            <summary>
              Looks up a localized string similar to Is in the workflow &quot;{0}&quot;, and is from the state &quot;{1}&quot; to the state &quot;{2}&quot;..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.TransitionFoundWithTo">
            <summary>
              Looks up a localized string similar to Is in the workflow &quot;{0}&quot; and the target state is &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.TransitionMissing">
            <summary>
              Looks up a localized string similar to Is missing, required in the workflow &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.TransitionNeedsWorkflow">
            <summary>
              Looks up a localized string similar to No workflow specified. Unable to verify the initial and target states..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.TransitionNotCorrectFrom">
            <summary>
              Looks up a localized string similar to The initial state is not &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.TransitionNotCorrectFromTo">
            <summary>
              Looks up a localized string similar to Is not from the state &quot;{0}&quot; to the state &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.TransitionNotCorrectTo">
            <summary>
              Looks up a localized string similar to The target state is not &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.TransitionNotIn">
            <summary>
              Looks up a localized string similar to Is not in the workflow &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.TreeMapContainsNoValues">
            <summary>
              Looks up a localized string similar to &quot;TreeMap&quot; contains no values..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.TypeClass">
            <summary>
              Looks up a localized string similar to Class.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.TypeClassGroup">
            <summary>
              Looks up a localized string similar to Class group.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.TypeEventHandler">
            <summary>
              Looks up a localized string similar to Event handler.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.TypeNACL">
            <summary>
              Looks up a localized string similar to Named access control list.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.TypeObjectType">
            <summary>
              Looks up a localized string similar to Object type.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.TypePropDef">
            <summary>
              Looks up a localized string similar to Property definition.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.TypeStateTransition">
            <summary>
              Looks up a localized string similar to Workflow state transition.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.TypeUnknownException">
            <summary>
              Looks up a localized string similar to Unknown metadata item type..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.TypeUser">
            <summary>
              Looks up a localized string similar to User.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.TypeUserGroup">
            <summary>
              Looks up a localized string similar to User group.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.TypeValuelist">
            <summary>
              Looks up a localized string similar to Value list.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.TypeValuelistItem">
            <summary>
              Looks up a localized string similar to Value list item.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.TypeView">
            <summary>
              Looks up a localized string similar to View.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.TypeWorkflow">
            <summary>
              Looks up a localized string similar to Workflow.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.TypeWorkflowState">
            <summary>
              Looks up a localized string similar to Workflow state.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.UnableToCreateTempFileException">
            <summary>
              Looks up a localized string similar to Unable to create a temporary file..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.UnexpectedEnumValueJson">
            <summary>
              Looks up a localized string similar to Unsupported token type &quot;{0}&quot; while parsing an enumeration..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.UnhandledExceptionInBackgroundOperation">
            <summary>
              Looks up a localized string similar to Unhandled exception in a background operation: &quot;{0}&quot; in vault &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.UninitializedDynamicMFI">
            <summary>
              Looks up a localized string similar to Unresolved dynamic MFIdentifier using the ID &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.Unknown">
            <summary>
              Looks up a localized string similar to Unknown.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.UnknownValuelistText">
            <summary>
              Looks up a localized string similar to Unknown.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.UnrecognizedLookupJsonType">
            <summary>
              Looks up a localized string similar to Unrecognized JSON value type for the following value list item: {0}.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.UnrecognizedTranslatableContentJsonType">
            <summary>
              Looks up a localized string similar to Unrecognized JSON value type for the following item: {0}.
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.ValidationException">
            <summary>
              Looks up a localized string similar to An exception occurred during the validation of the &quot;{0}&quot; module..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.ValidationProtectionException">
            <summary>
              Looks up a localized string similar to Too deep recursion encountered. Either too deep object is been validated or it contains some unhandled special type..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.ValuelistItemFound">
            <summary>
              Looks up a localized string similar to Is in the list &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.ValuelistItemMissing">
            <summary>
              Looks up a localized string similar to Does not contain the item &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.ValuelistItemNeedList">
            <summary>
              Looks up a localized string similar to The value list item &quot;{0}&quot; at {1} cannot be resolved without a list..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.ValuelistItemNotIn">
            <summary>
              Looks up a localized string similar to Is not in the value list &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.ValuelistOfItemMissing">
            <summary>
              Looks up a localized string similar to Is missing, required by &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.VaultStructureVerificationFailedException">
             <summary>
               Looks up a localized string similar to Validation failed:
            Vault: {0}
            Application: {1}
            Application GUID: {2}
            Details:
            {3}.
             </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.WorkflowUndefined">
            <summary>
              Looks up a localized string similar to Required workflow is undefined..
            </summary>
        </member>
        <member name="P:MFiles.VAF.Resources.TextResources.WrongFileCount">
             <summary>
               Looks up a localized string similar to Wrong file count for single file document.
            Count: {0}.
             </summary>
        </member>
        <member name="T:MFiles.VAF.Common.TranslatableContentExtender">
            <summary>
            The TranslatableContentExtender static class contains extension methods for the TranslatableContent class.
            </summary>
        </member>
        <member name="M:MFiles.VAF.Common.TranslatableContentExtender.Validate(MFiles.VAF.Configuration.TranslatableContent,MFiles.VAF.Configuration.ValidationResultBase,MFiles.VAF.Configuration.IConfiguration,System.String,System.String,System.Boolean)">
            <summary>
            Method for validating the TranslatedContent collection values. Reports findings directly into the validation result object.
            </summary>
            <param name="content">The this parameter.</param>
            <param name="validationResult">The validation result object that contains all validation results.</param>
            <param name="configuration">The configuration object. Used in reporting/logging the validation errors.</param>
            <param name="itemType">The item type text. Used in the error messages.</param>
            <param name="item">The item text. Used in the error messages.</param>
            <param name="allowEmptyTranslations">If true the validation allows empty values as translated text.</param>
            <returns>True if everything was ok.</returns>
        </member>
        <member name="T:MFiles.VAF.VersionInfo">
            <summary>
            Version details.
            </summary>
        </member>
        <member name="F:MFiles.VAF.VersionInfo.MAJOR_VERSION">
            <summary>
            The major version. Do not change this manually.
            </summary> 
        </member>
        <member name="F:MFiles.VAF.VersionInfo.MINOR_VERSION">
            <summary>
            The minor version. Do not change this manually.
            </summary>
        </member>
        <member name="F:MFiles.VAF.VersionInfo.BUILD_NUMBER">
            <summary>
            Build number. Do not change this manually.
            </summary>
        </member>
        <member name="F:MFiles.VAF.VersionInfo.PATCH_NUMBER">
            <summary>
            Patch number. Do not change this manually.
            </summary>
        </member>
        <member name="F:MFiles.VAF.VersionInfo.VERSION_STRING">
            <summary>
            The version string. Do not change this manually.
            </summary>
        </member>
        <member name="F:MFiles.VAF.VersionInfo.VERSION_STRING_WITH_UNDERSCORES">
            <summary>
            The version string. Do not change this manually.
            </summary>
        </member>
        <member name="F:MFiles.VAF.VersionInfo.COMMENTS">
            <summary>
            Comments for the assembly resource.
            </summary>
        </member>
        <member name="F:MFiles.VAF.VersionInfo.COMPANY_NAME">
            <summary>
            Company for the assembly resource.
            </summary>
        </member>
        <member name="F:MFiles.VAF.VersionInfo.LEGAL_COPYRIGHT">
            <summary>
            Copyright for the assembly resource.
            </summary>
        </member>
        <member name="F:MFiles.VAF.VersionInfo.LEGAL_TRADEMARKS">
            <summary>
            Trademark for the assembly resource.
            </summary>
        </member>
        <member name="F:MFiles.VAF.VersionInfo.PRIVATE_BUILD">
            <summary>
            Private build identifier for the assembly resource.
            </summary>
        </member>
        <member name="F:MFiles.VAF.VersionInfo.PRODUCT_NAME">
            <summary>
            Product name for the assembly resource.
            </summary>
        </member>
        <member name="F:MFiles.VAF.VersionInfo.SPECIAL_BUILD">
            <summary>
            Special build identifier for the assembly resource.
            </summary>
        </member>
    </members>
</doc>
